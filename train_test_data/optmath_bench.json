[
  {
    "question": "The manufacturing facility produces custom components for two jobs, Job 0 and Job 1, each consisting of a sequence of operations that must be performed in a specific order. The goal is to schedule these operations to minimize the total completion time (makespan) while satisfying all operational constraints. Job 0 has five operations with processing times: Operation 0 takes 4 units, Operation 1 takes 1 unit, Operation 2 takes 6 units, Operation 3 takes 6 units, and Operation 4 takes 8 units. Job 1 has four operations with processing times: Operation 0 takes 9 units, Operation 1 takes 1 unit, Operation 2 takes 4 units, and Operation 3 takes 2 units.\n\nPrecedence constraints ensure that operations within each job are performed in sequence with specific gaps. For Job 0, Operation 1 must start at least 4 units after Operation 0 starts, Operation 2 must start at least 1 unit after Operation 1 starts, Operation 3 must start at least 6 units after Operation 2 starts, and Operation 4 must start at least 6 units after Operation 3 starts. For Job 1, Operation 1 must start at least 9 units after Operation 0 starts, Operation 2 must start at least 1 unit after Operation 1 starts, and Operation 3 must start at least 4 units after Operation 2 starts.\n\nMachine capacity constraints ensure that operations assigned to the same machine do not overlap. Binary variables determine the order of operations on shared machines. For example, if Operation 1 of Job 0 and Operation 3 of Job 0 are on the same machine, one must complete at least 6 units before the other starts. Similarly, if Operation 1 of Job 0 and Operation 2 of Job 1 are on the same machine, one must complete at least 4 units before the other starts. These constraints apply to all operation pairs on shared machines, ensuring no overlap and maintaining required time gaps. The large constant of 100,000 is used in these constraints to enforce the sequencing logic by ensuring that the constraints are only active when the binary variable is set to 1.\n\nThe makespan must be at least as large as the completion time of every operation. Specifically, the makespan must be at least 4 units after Operation 0 of Job 0 starts, 1 unit after Operation 1 of Job 0 starts, 6 units after Operation 2 of Job 0 starts, 6 units after Operation 3 of Job 0 starts, 8 units after Operation 4 of Job 0 starts, 9 units after Operation 0 of Job 1 starts, 1 unit after Operation 1 of Job 1 starts, 4 units after Operation 2 of Job 1 starts, and 2 units after Operation 3 of Job 1 starts.\n\nThe objective is to determine the start times for all operations and the sequence of operations on shared machines to minimize the makespan while respecting all precedence constraints, machine capacity constraints, and the makespan definition. Binary variables are used to enforce the correct sequencing of operations on shared machines, with a large constant of 100,000 ensuring the constraints are properly applied. The start times for all operations and the makespan must be non-negative. The binary variables are explicitly defined for all relevant operation pairs on shared machines, and the start times and makespan are continuous variables.",
    "answer": 25,
    "ori": "13_optmath_bench",
    "index": 1,
    "description": "The manufacturing facility produces custom components for two jobs, Job 0 and Job 1, each consisting of a sequence of operations that must be performed in a specific order. The goal is to schedule these operations to minimize the total completion time (makespan) while satisfying all operational constraints. Job 0 has five operations with processing times: Operation 0 takes 4 units, Operation 1 takes 1 unit, Operation 2 takes 6 units, Operation 3 takes 6 units, and Operation 4 takes 8 units. Job 1 has four operations with processing times: Operation 0 takes 9 units, Operation 1 takes 1 unit, Operation 2 takes 4 units, and Operation 3 takes 2 units.\n\nPrecedence constraints ensure that operations within each job are performed in sequence with specific gaps. For Job 0, Operation 1 must start at least 4 units after Operation 0 starts, Operation 2 must start at least 1 unit after Operation 1 starts, Operation 3 must start at least 6 units after Operation 2 starts, and Operation 4 must start at least 6 units after Operation 3 starts. For Job 1, Operation 1 must start at least 9 units after Operation 0 starts, Operation 2 must start at least 1 unit after Operation 1 starts, and Operation 3 must start at least 4 units after Operation 2 starts.\n\nMachine capacity constraints ensure that operations assigned to the same machine do not overlap. Binary variables determine the order of operations on shared machines. For example, if Operation 1 of Job 0 and Operation 3 of Job 0 are on the same machine, one must complete at least 6 units before the other starts. Similarly, if Operation 1 of Job 0 and Operation 2 of Job 1 are on the same machine, one must complete at least 4 units before the other starts. These constraints apply to all operation pairs on shared machines, ensuring no overlap and maintaining required time gaps. The large constant of 100,000 is used in these constraints to enforce the sequencing logic by ensuring that the constraints are only active when the binary variable is set to 1.\n\nThe makespan must be at least as large as the completion time of every operation. Specifically, the makespan must be at least 4 units after Operation 0 of Job 0 starts, 1 unit after Operation 1 of Job 0 starts, 6 units after Operation 2 of Job 0 starts, 6 units after Operation 3 of Job 0 starts, 8 units after Operation 4 of Job 0 starts, 9 units after Operation 0 of Job 1 starts, 1 unit after Operation 1 of Job 1 starts, 4 units after Operation 2 of Job 1 starts, and 2 units after Operation 3 of Job 1 starts.\n\nThe objective is to determine the start times for all operations and the sequence of operations on shared machines to minimize the makespan while respecting all precedence constraints, machine capacity constraints, and the makespan definition. Binary variables are used to enforce the correct sequencing of operations on shared machines, with a large constant of 100,000 ensuring the constraints are properly applied. The start times for all operations and the makespan must be non-negative. The binary variables are explicitly defined for all relevant operation pairs on shared machines, and the start times and makespan are continuous variables.",
    "ground_truth": 25
  },
  {
    "question": "The problem involves scheduling the landing times of three aircraft to minimize the total penalty costs associated with deviations from their earliest and latest possible landing times while ensuring safe separation between aircraft and adhering to their respective time windows. Each aircraft has an earliest and latest possible landing time, and penalty costs for landing early or late. Aircraft 0 has an earliest landing time of 201 minutes, a latest landing time of 261 minutes, an early penalty cost of \\$37 per minute, and a late penalty cost of \\$73 per minute. Aircraft 1 has an earliest landing time of 234 minutes, a latest landing time of 294 minutes, an early penalty cost of \\$99 per minute, and a late penalty cost of \\$84 per minute. Aircraft 2 has an earliest landing time of 29 minutes, a latest landing time of 89 minutes, an early penalty cost of \\$90 per minute, and a late penalty cost of \\$56 per minute.\n\nThe separation requirements are enforced using binary decision variables that determine the order in which the aircraft land. If Aircraft 0 lands before Aircraft 1, there must be at least 11 minutes of separation; if Aircraft 1 lands before Aircraft 0, the separation must be at least 27 minutes. If Aircraft 0 lands before Aircraft 2, there must be at least 9 minutes of separation; if Aircraft 2 lands before Aircraft 0, the separation must be at least 232 minutes. If Aircraft 1 lands before Aircraft 2, there must be at least 9 minutes of separation; if Aircraft 2 lands before Aircraft 1, the separation must be at least 265 minutes.\n\nThe landing time windows must be respected: Aircraft 0 must land between 201 and 261 minutes, Aircraft 1 between 234 and 294 minutes, and Aircraft 2 between 29 and 89 minutes. The penalties for early and late landings are calculated based on the difference between the actual landing time and the earliest or latest possible landing time, multiplied by the respective penalty costs. The objective is to determine the optimal landing times for all three aircraft to minimize the total penalty costs while ensuring all separation and time window constraints are satisfied. The total penalty cost is the sum of the early and late penalties for all aircraft. The order in which the aircraft land affects the separation requirements and landing times, so the schedule must balance these costs to achieve the lowest total penalty. Binary decision variables are used to determine the order of aircraft landings, ensuring that the separation constraints are enforced correctly. The constraints also ensure that the landing times are within the specified windows and that the penalties for early and late landings are calculated accurately based on the deviations from the earliest and latest possible landing times.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 2,
    "description": "The problem involves scheduling the landing times of three aircraft to minimize the total penalty costs associated with deviations from their earliest and latest possible landing times while ensuring safe separation between aircraft and adhering to their respective time windows. Each aircraft has an earliest and latest possible landing time, and penalty costs for landing early or late. Aircraft 0 has an earliest landing time of 201 minutes, a latest landing time of 261 minutes, an early penalty cost of \\$37 per minute, and a late penalty cost of \\$73 per minute. Aircraft 1 has an earliest landing time of 234 minutes, a latest landing time of 294 minutes, an early penalty cost of \\$99 per minute, and a late penalty cost of \\$84 per minute. Aircraft 2 has an earliest landing time of 29 minutes, a latest landing time of 89 minutes, an early penalty cost of \\$90 per minute, and a late penalty cost of \\$56 per minute.\n\nThe separation requirements are enforced using binary decision variables that determine the order in which the aircraft land. If Aircraft 0 lands before Aircraft 1, there must be at least 11 minutes of separation; if Aircraft 1 lands before Aircraft 0, the separation must be at least 27 minutes. If Aircraft 0 lands before Aircraft 2, there must be at least 9 minutes of separation; if Aircraft 2 lands before Aircraft 0, the separation must be at least 232 minutes. If Aircraft 1 lands before Aircraft 2, there must be at least 9 minutes of separation; if Aircraft 2 lands before Aircraft 1, the separation must be at least 265 minutes.\n\nThe landing time windows must be respected: Aircraft 0 must land between 201 and 261 minutes, Aircraft 1 between 234 and 294 minutes, and Aircraft 2 between 29 and 89 minutes. The penalties for early and late landings are calculated based on the difference between the actual landing time and the earliest or latest possible landing time, multiplied by the respective penalty costs. The objective is to determine the optimal landing times for all three aircraft to minimize the total penalty costs while ensuring all separation and time window constraints are satisfied. The total penalty cost is the sum of the early and late penalties for all aircraft. The order in which the aircraft land affects the separation requirements and landing times, so the schedule must balance these costs to achieve the lowest total penalty. Binary decision variables are used to determine the order of aircraft landings, ensuring that the separation constraints are enforced correctly. The constraints also ensure that the landing times are within the specified windows and that the penalties for early and late landings are calculated accurately based on the deviations from the earliest and latest possible landing times.",
    "ground_truth": 0
  },
  {
    "question": "A logistics company must deliver packages to four cities: City 0, City 1, City 2, and City 3, minimizing the total delivery cost while ensuring each city is visited exactly once and the route forms a continuous loop without subtours. The delivery costs between cities are as follows: City 0 to City 1 costs 616 units, City 0 to City 2 costs 567 units, City 0 to City 3 costs 143 units, City 1 to City 0 costs 388 units, City 1 to City 2 costs 947 units, City 1 to City 3 costs 628 units, City 2 to City 0 costs 495 units, City 2 to City 1 costs 650 units, City 2 to City 3 costs 604 units, City 3 to City 0 costs 77 units, City 3 to City 1 costs 630 units, and City 3 to City 2 costs 23 units. The company uses binary decision variables to indicate whether a route is used and assigns position variables to each city to prevent subtours. The position variable for City 0 is fixed at 0, while the position variables for City 1, City 2, and City 3 must be integers between 0 and 3. The objective is to minimize the total delivery cost, which is the sum of the costs of all selected routes, including the term 0 times the position variable for City 0. Constraints ensure each city is visited and departed exactly once. Subtour elimination is enforced by ensuring that if a route from City i to City j is used, the position of City j must be greater than the position of City i, except for City 0, which is fixed as the starting point. These constraints are implemented through specific relationships between the route variables and the position variables, guaranteeing the delivery route forms a single loop without smaller loops. The constraints also explicitly bound the position variables for City 1, City 2, and City 3 to be between 0 and 3, and ensure that the position variables are correctly related to the route variables to eliminate subtours.",
    "answer": 1204,
    "ori": "13_optmath_bench",
    "index": 3,
    "description": "A logistics company must deliver packages to four cities: City 0, City 1, City 2, and City 3, minimizing the total delivery cost while ensuring each city is visited exactly once and the route forms a continuous loop without subtours. The delivery costs between cities are as follows: City 0 to City 1 costs 616 units, City 0 to City 2 costs 567 units, City 0 to City 3 costs 143 units, City 1 to City 0 costs 388 units, City 1 to City 2 costs 947 units, City 1 to City 3 costs 628 units, City 2 to City 0 costs 495 units, City 2 to City 1 costs 650 units, City 2 to City 3 costs 604 units, City 3 to City 0 costs 77 units, City 3 to City 1 costs 630 units, and City 3 to City 2 costs 23 units. The company uses binary decision variables to indicate whether a route is used and assigns position variables to each city to prevent subtours. The position variable for City 0 is fixed at 0, while the position variables for City 1, City 2, and City 3 must be integers between 0 and 3. The objective is to minimize the total delivery cost, which is the sum of the costs of all selected routes, including the term 0 times the position variable for City 0. Constraints ensure each city is visited and departed exactly once. Subtour elimination is enforced by ensuring that if a route from City i to City j is used, the position of City j must be greater than the position of City i, except for City 0, which is fixed as the starting point. These constraints are implemented through specific relationships between the route variables and the position variables, guaranteeing the delivery route forms a single loop without smaller loops. The constraints also explicitly bound the position variables for City 1, City 2, and City 3 to be between 0 and 3, and ensure that the position variables are correctly related to the route variables to eliminate subtours.",
    "ground_truth": 1204
  },
  {
    "question": "The problem involves scheduling operations for three jobs (Job 0, Job 1, and Job 2) on shared machines to minimize the total completion time (makespan). Each job consists of a sequence of operations with specific processing times: Job 0 has two operations (Operation 0 takes 9 units of time, Operation 1 takes 8 units), Job 1 has three operations (Operation 0 takes 8 units, Operation 1 takes 8 units, Operation 2 takes 4 units), and Job 2 has four operations (Operation 0 takes 1 unit, Operation 1 takes 6 units, Operation 2 takes 4 units, Operation 3 takes 2 units). Operations within a job must follow a strict order, meaning each operation cannot start until the previous one in the same job has finished. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has completed after 9 units of time, Operation 1 of Job 1 cannot start until Operation 0 of Job 1 has completed after 8 units of time, and Operation 2 of Job 1 cannot start until Operation 1 of Job 1 has completed after 8 units of time. Similarly, Operation 1 of Job 2 cannot start until Operation 0 of Job 2 has completed after 1 unit of time, Operation 2 of Job 2 cannot start until Operation 1 of Job 2 has completed after 6 units of time, and Operation 3 of Job 2 cannot start until Operation 2 of Job 2 has completed after 4 units of time.\n\nCertain operations from different jobs share the same machine and cannot overlap in time. For instance, Operation 1 of Job 0 and Operation 1 of Job 2 are assigned to the same machine, so one must finish before the other starts. Similarly, Operation 0 of Job 0 and Operation 1 of Job 1 share a machine, and their schedules must not overlap. This applies to all pairs of operations sharing the same machine, such as Operation 0 of Job 0 and Operation 0 of Job 2, Operation 1 of Job 1 and Operation 0 of Job 2, Operation 0 of Job 1 and Operation 2 of Job 2, Operation 0 of Job 1 and Operation 3 of Job 2, Operation 2 of Job 1 and Operation 2 of Job 2, Operation 2 of Job 1 and Operation 3 of Job 2, and Operation 2 of Job 2 and Operation 3 of Job 2.\n\nTo enforce these constraints, binary variables are used to determine the order of operations on shared machines. A large constant (100000) is used in the constraints to ensure that operations on the same machine do not overlap. For example, if Operation 1 of Job 0 and Operation 1 of Job 2 are on the same machine, the constraints ensure that one operation starts only after the other has finished, using the binary variable to decide the order. The binary variables are restricted to values of 0 or 1, and the start times of operations are continuous and non-negative.\n\nThe makespan must be at least as large as the completion time of every operation. For example, it must be at least 9 units of time (completion of Operation 0 of Job 0), 8 units (completion of Operation 1 of Job 0), 8 units (completion of Operation 0 of Job 1), 8 units (completion of Operation 1 of Job 1), 4 units (completion of Operation 2 of Job 1), 1 unit (completion of Operation 0 of Job 2), 6 units (completion of Operation 1 of Job 2), 4 units (completion of Operation 2 of Job 2), and 2 units (completion of Operation 3 of Job 2).\n\nThe objective is to determine the start times for each operation on each machine such that all precedence and machine capacity constraints are satisfied, and the total completion time (makespan) is minimized. This involves deciding the order of operations on shared machines and ensuring no overlaps, while respecting the processing times and sequence constraints of each job.",
    "answer": 22,
    "ori": "13_optmath_bench",
    "index": 4,
    "description": "The problem involves scheduling operations for three jobs (Job 0, Job 1, and Job 2) on shared machines to minimize the total completion time (makespan). Each job consists of a sequence of operations with specific processing times: Job 0 has two operations (Operation 0 takes 9 units of time, Operation 1 takes 8 units), Job 1 has three operations (Operation 0 takes 8 units, Operation 1 takes 8 units, Operation 2 takes 4 units), and Job 2 has four operations (Operation 0 takes 1 unit, Operation 1 takes 6 units, Operation 2 takes 4 units, Operation 3 takes 2 units). Operations within a job must follow a strict order, meaning each operation cannot start until the previous one in the same job has finished. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has completed after 9 units of time, Operation 1 of Job 1 cannot start until Operation 0 of Job 1 has completed after 8 units of time, and Operation 2 of Job 1 cannot start until Operation 1 of Job 1 has completed after 8 units of time. Similarly, Operation 1 of Job 2 cannot start until Operation 0 of Job 2 has completed after 1 unit of time, Operation 2 of Job 2 cannot start until Operation 1 of Job 2 has completed after 6 units of time, and Operation 3 of Job 2 cannot start until Operation 2 of Job 2 has completed after 4 units of time.\n\nCertain operations from different jobs share the same machine and cannot overlap in time. For instance, Operation 1 of Job 0 and Operation 1 of Job 2 are assigned to the same machine, so one must finish before the other starts. Similarly, Operation 0 of Job 0 and Operation 1 of Job 1 share a machine, and their schedules must not overlap. This applies to all pairs of operations sharing the same machine, such as Operation 0 of Job 0 and Operation 0 of Job 2, Operation 1 of Job 1 and Operation 0 of Job 2, Operation 0 of Job 1 and Operation 2 of Job 2, Operation 0 of Job 1 and Operation 3 of Job 2, Operation 2 of Job 1 and Operation 2 of Job 2, Operation 2 of Job 1 and Operation 3 of Job 2, and Operation 2 of Job 2 and Operation 3 of Job 2.\n\nTo enforce these constraints, binary variables are used to determine the order of operations on shared machines. A large constant (100000) is used in the constraints to ensure that operations on the same machine do not overlap. For example, if Operation 1 of Job 0 and Operation 1 of Job 2 are on the same machine, the constraints ensure that one operation starts only after the other has finished, using the binary variable to decide the order. The binary variables are restricted to values of 0 or 1, and the start times of operations are continuous and non-negative.\n\nThe makespan must be at least as large as the completion time of every operation. For example, it must be at least 9 units of time (completion of Operation 0 of Job 0), 8 units (completion of Operation 1 of Job 0), 8 units (completion of Operation 0 of Job 1), 8 units (completion of Operation 1 of Job 1), 4 units (completion of Operation 2 of Job 1), 1 unit (completion of Operation 0 of Job 2), 6 units (completion of Operation 1 of Job 2), 4 units (completion of Operation 2 of Job 2), and 2 units (completion of Operation 3 of Job 2).\n\nThe objective is to determine the start times for each operation on each machine such that all precedence and machine capacity constraints are satisfied, and the total completion time (makespan) is minimized. This involves deciding the order of operations on shared machines and ensuring no overlaps, while respecting the processing times and sequence constraints of each job.",
    "ground_truth": 22
  },
  {
    "question": "Imagine you are managing a supply chain network for a company that operates across three key locations: **Node 0**, **Node 1**, and **Node 2**. Each location has specific supply and demand requirements, and your goal is to optimize the flow of goods between these nodes while minimizing the total cost of establishing connections and shipping products.\n\n#### Supply and Demand:\n- **Node 0** has a net supply of **236 units**, meaning it can provide this amount to other nodes.\n- **Node 1** has a net demand of **29 units**, requiring this amount to be fulfilled from other nodes.\n- **Node 2** has a net demand of **207 units**, which must also be met through shipments from other nodes.\n\n#### Shipping Costs and Capacities:\nTo move goods between nodes, you must decide whether to establish a connection (which incurs a fixed cost) and how much to ship (which incurs a variable cost per unit). The costs and capacities for each possible connection are as follows:\n\n1. **Node 0 to Node 1**:\n   - Fixed cost to establish the connection: **$3,532**\n   - Variable shipping cost per unit: **$45**\n   - Maximum shipping capacity: **773 units**\n\n2. **Node 0 to Node 2**:\n   - Fixed cost: **$3,895**\n   - Variable shipping cost: **$49**\n   - Maximum capacity: **973 units**\n\n3. **Node 1 to Node 0**:\n   - Fixed cost: **$3,485**\n   - Variable shipping cost: **$11**\n   - Maximum capacity: **785 units**\n\n4. **Node 1 to Node 2**:\n   - Fixed cost: **$1,845**\n   - Variable shipping cost: **$40**\n   - Maximum capacity: **787 units**\n\n5. **Node 2 to Node 0**:\n   - Fixed cost: **$1,291**\n   - Variable shipping cost: **$13**\n   - Maximum capacity: **602 units**\n\n6. **Node 2 to Node 1**:\n   - Fixed cost: **$1,818**\n   - Variable shipping cost: **$47**\n   - Maximum capacity: **766 units**\n\n#### Key Decisions:\n- For each connection between nodes, you must decide whether to establish it (a binary decision: yes or no).\n- For each established connection, you must determine the amount of goods to ship, ensuring it does not exceed the connection's capacity.\n\n#### Objective:\nYour goal is to minimize the total cost, which includes:\n1. The fixed costs of establishing the necessary connections.\n2. The variable shipping costs based on the amount of goods transported.\n\n#### Constraints:\n1. **Capacity Constraints**: The amount of goods shipped between any two nodes cannot exceed the maximum capacity of that connection. For example, if you decide to ship goods from **Node 0 to Node 1**, the shipment must be **773 units or less**.\n2. **Flow Balance Constraints**: The total inflow and outflow of goods at each node must match its supply or demand. For example:\n   - At **Node 0**, the total inflow from **Node 1** and **Node 2** minus the outflow to **Node 1** and **Node 2** must equal **236 units**.\n   - At **Node 1**, the total inflow from **Node 0** and **Node 2** minus the outflow to **Node 0** and **Node 2** must equal **-29 units** (indicating a net demand).\n   - At **Node 2**, the total inflow from **Node 0** and **Node 1** minus the outflow to **Node 0** and **Node 1** must equal **-207 units** (indicating a net demand).\n\n#### Summary:\nYour task is to determine the most cost-effective way to establish connections and ship goods between **Node 0**, **Node 1**, and **Node 2** to meet the supply and demand requirements while minimizing the total cost. This involves balancing fixed and variable costs, adhering to capacity limits, and ensuring the flow of goods aligns with the needs of each node.",
    "answer": 7364,
    "ori": "13_optmath_bench",
    "index": 5,
    "description": "Imagine you are managing a supply chain network for a company that operates across three key locations: **Node 0**, **Node 1**, and **Node 2**. Each location has specific supply and demand requirements, and your goal is to optimize the flow of goods between these nodes while minimizing the total cost of establishing connections and shipping products.\n\n#### Supply and Demand:\n- **Node 0** has a net supply of **236 units**, meaning it can provide this amount to other nodes.\n- **Node 1** has a net demand of **29 units**, requiring this amount to be fulfilled from other nodes.\n- **Node 2** has a net demand of **207 units**, which must also be met through shipments from other nodes.\n\n#### Shipping Costs and Capacities:\nTo move goods between nodes, you must decide whether to establish a connection (which incurs a fixed cost) and how much to ship (which incurs a variable cost per unit). The costs and capacities for each possible connection are as follows:\n\n1. **Node 0 to Node 1**:\n   - Fixed cost to establish the connection: **$3,532**\n   - Variable shipping cost per unit: **$45**\n   - Maximum shipping capacity: **773 units**\n\n2. **Node 0 to Node 2**:\n   - Fixed cost: **$3,895**\n   - Variable shipping cost: **$49**\n   - Maximum capacity: **973 units**\n\n3. **Node 1 to Node 0**:\n   - Fixed cost: **$3,485**\n   - Variable shipping cost: **$11**\n   - Maximum capacity: **785 units**\n\n4. **Node 1 to Node 2**:\n   - Fixed cost: **$1,845**\n   - Variable shipping cost: **$40**\n   - Maximum capacity: **787 units**\n\n5. **Node 2 to Node 0**:\n   - Fixed cost: **$1,291**\n   - Variable shipping cost: **$13**\n   - Maximum capacity: **602 units**\n\n6. **Node 2 to Node 1**:\n   - Fixed cost: **$1,818**\n   - Variable shipping cost: **$47**\n   - Maximum capacity: **766 units**\n\n#### Key Decisions:\n- For each connection between nodes, you must decide whether to establish it (a binary decision: yes or no).\n- For each established connection, you must determine the amount of goods to ship, ensuring it does not exceed the connection's capacity.\n\n#### Objective:\nYour goal is to minimize the total cost, which includes:\n1. The fixed costs of establishing the necessary connections.\n2. The variable shipping costs based on the amount of goods transported.\n\n#### Constraints:\n1. **Capacity Constraints**: The amount of goods shipped between any two nodes cannot exceed the maximum capacity of that connection. For example, if you decide to ship goods from **Node 0 to Node 1**, the shipment must be **773 units or less**.\n2. **Flow Balance Constraints**: The total inflow and outflow of goods at each node must match its supply or demand. For example:\n   - At **Node 0**, the total inflow from **Node 1** and **Node 2** minus the outflow to **Node 1** and **Node 2** must equal **236 units**.\n   - At **Node 1**, the total inflow from **Node 0** and **Node 2** minus the outflow to **Node 0** and **Node 2** must equal **-29 units** (indicating a net demand).\n   - At **Node 2**, the total inflow from **Node 0** and **Node 1** minus the outflow to **Node 0** and **Node 1** must equal **-207 units** (indicating a net demand).\n\n#### Summary:\nYour task is to determine the most cost-effective way to establish connections and ship goods between **Node 0**, **Node 1**, and **Node 2** to meet the supply and demand requirements while minimizing the total cost. This involves balancing fixed and variable costs, adhering to capacity limits, and ensuring the flow of goods aligns with the needs of each node.",
    "ground_truth": 7364
  },
  {
    "question": "The problem involves scheduling the landing times of four aircraft (aircraft_0, aircraft_1, aircraft_2, aircraft_3) at an airport to minimize the total penalty costs associated with deviations from their earliest possible landing times while adhering to separation and timing constraints. Each aircraft has an earliest and latest possible landing time, and penalty costs for landing early or late. Aircraft_0 has an earliest time of 0 minutes, latest time of 37 minutes, early penalty of \\$61 per minute, and late penalty of \\$82 per minute. Aircraft_1 has an earliest time of 7 minutes, latest time of 67 minutes, early penalty of \\$35 per minute, and late penalty of \\$34 per minute. Aircraft_2 has an earliest time of 225 minutes, latest time of 285 minutes, early penalty of \\$74 per minute, and late penalty of \\$41 per minute. Aircraft_3 has an earliest time of 119 minutes, latest time of 179 minutes, early penalty of \\$93 per minute, and late penalty of \\$56 per minute.\n\nThe landing order between any two aircraft must be explicitly determined using binary decision variables, ensuring one lands before the other. Separation constraints are enforced based on these landing orders, with coefficients modifying the required separation time depending on the landing sequence. For example, if aircraft_0 lands before aircraft_1, the separation constraint is adjusted by coefficients such as 2 and 30 depending on the order. Similar adjustments apply to other pairs: aircraft_0 and aircraft_2, aircraft_0 and aircraft_3, aircraft_1 and aircraft_2, aircraft_1 and aircraft_3, and aircraft_2 and aircraft_3. These constraints ensure that the separation between consecutive landings is maintained according to the specific coefficients provided in the LP data.\n\nEach aircraft must land within its specified earliest and latest possible landing times. Early deviations are calculated as the difference between the earliest time and the actual landing time if the aircraft lands early, and late deviations are calculated as the difference between the actual landing time and the earliest time if the aircraft lands late. The total penalty cost is the sum of the early and late penalties for all aircraft, weighted by their respective penalty rates. The objective is to determine the optimal landing times for all four aircraft to minimize the total penalty costs while ensuring all separation and timing constraints are satisfied.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 6,
    "description": "The problem involves scheduling the landing times of four aircraft (aircraft_0, aircraft_1, aircraft_2, aircraft_3) at an airport to minimize the total penalty costs associated with deviations from their earliest possible landing times while adhering to separation and timing constraints. Each aircraft has an earliest and latest possible landing time, and penalty costs for landing early or late. Aircraft_0 has an earliest time of 0 minutes, latest time of 37 minutes, early penalty of \\$61 per minute, and late penalty of \\$82 per minute. Aircraft_1 has an earliest time of 7 minutes, latest time of 67 minutes, early penalty of \\$35 per minute, and late penalty of \\$34 per minute. Aircraft_2 has an earliest time of 225 minutes, latest time of 285 minutes, early penalty of \\$74 per minute, and late penalty of \\$41 per minute. Aircraft_3 has an earliest time of 119 minutes, latest time of 179 minutes, early penalty of \\$93 per minute, and late penalty of \\$56 per minute.\n\nThe landing order between any two aircraft must be explicitly determined using binary decision variables, ensuring one lands before the other. Separation constraints are enforced based on these landing orders, with coefficients modifying the required separation time depending on the landing sequence. For example, if aircraft_0 lands before aircraft_1, the separation constraint is adjusted by coefficients such as 2 and 30 depending on the order. Similar adjustments apply to other pairs: aircraft_0 and aircraft_2, aircraft_0 and aircraft_3, aircraft_1 and aircraft_2, aircraft_1 and aircraft_3, and aircraft_2 and aircraft_3. These constraints ensure that the separation between consecutive landings is maintained according to the specific coefficients provided in the LP data.\n\nEach aircraft must land within its specified earliest and latest possible landing times. Early deviations are calculated as the difference between the earliest time and the actual landing time if the aircraft lands early, and late deviations are calculated as the difference between the actual landing time and the earliest time if the aircraft lands late. The total penalty cost is the sum of the early and late penalties for all aircraft, weighted by their respective penalty rates. The objective is to determine the optimal landing times for all four aircraft to minimize the total penalty costs while ensuring all separation and timing constraints are satisfied.",
    "ground_truth": 0
  },
  {
    "question": "The problem involves scheduling the landings of six aircraft to minimize the total penalty costs associated with deviations from their target landing times. Each aircraft has a target landing time, an earliest possible landing time, and a latest possible landing time. Penalties are incurred for landing early or late, with specific penalty rates for each aircraft: aircraft_0 has an early penalty rate of 72 and a late penalty rate of 59, aircraft_1 has an early penalty rate of 81 and a late penalty rate of 40, aircraft_2 has an early penalty rate of 46 and a late penalty rate of 34, aircraft_3 has an early penalty rate of 78 and a late penalty rate of 24, aircraft_4 has an early penalty rate of 40 and a late penalty rate of 80, and aircraft_5 has an early penalty rate of 60 and a late penalty rate of 14. The landing times must respect minimum separation times between consecutive landings, which vary depending on the pair of aircraft. The separation constraints are enforced using binary decision variables that determine the order in which the aircraft land. The objective is to minimize the sum of early and late landing penalties, weighted by the respective penalty rates for each aircraft. The landing times must fall within the specified time windows for each aircraft: aircraft_0 must land between 221 and 281, aircraft_1 between 179 and 239, aircraft_2 between 268 and 300, aircraft_3 between 0 and 36, aircraft_4 between 131 and 191, and aircraft_5 between 265 and 300. The order of landings must ensure that the separation constraints are satisfied, with specific separation times for each pair of aircraft. The binary decision variables ensure that the separation constraints are met by determining the sequence of landings. The problem requires determining the exact landing times for each aircraft within their respective time windows, ensuring that the separation requirements are met, and minimizing the total penalty costs. The binary variables are used to enforce the separation constraints, ensuring that if one aircraft lands before another, the required separation time is maintained. The constraints also ensure that the landing times fall within the specified time windows and that the penalties for early or late landings are correctly calculated based on the deviation from the target landing times. The binary variables are explicitly defined as binary (0 or 1) to determine the sequence of landings and enforce the separation constraints.",
    "answer": 34,
    "ori": "13_optmath_bench",
    "index": 7,
    "description": "The problem involves scheduling the landings of six aircraft to minimize the total penalty costs associated with deviations from their target landing times. Each aircraft has a target landing time, an earliest possible landing time, and a latest possible landing time. Penalties are incurred for landing early or late, with specific penalty rates for each aircraft: aircraft_0 has an early penalty rate of 72 and a late penalty rate of 59, aircraft_1 has an early penalty rate of 81 and a late penalty rate of 40, aircraft_2 has an early penalty rate of 46 and a late penalty rate of 34, aircraft_3 has an early penalty rate of 78 and a late penalty rate of 24, aircraft_4 has an early penalty rate of 40 and a late penalty rate of 80, and aircraft_5 has an early penalty rate of 60 and a late penalty rate of 14. The landing times must respect minimum separation times between consecutive landings, which vary depending on the pair of aircraft. The separation constraints are enforced using binary decision variables that determine the order in which the aircraft land. The objective is to minimize the sum of early and late landing penalties, weighted by the respective penalty rates for each aircraft. The landing times must fall within the specified time windows for each aircraft: aircraft_0 must land between 221 and 281, aircraft_1 between 179 and 239, aircraft_2 between 268 and 300, aircraft_3 between 0 and 36, aircraft_4 between 131 and 191, and aircraft_5 between 265 and 300. The order of landings must ensure that the separation constraints are satisfied, with specific separation times for each pair of aircraft. The binary decision variables ensure that the separation constraints are met by determining the sequence of landings. The problem requires determining the exact landing times for each aircraft within their respective time windows, ensuring that the separation requirements are met, and minimizing the total penalty costs. The binary variables are used to enforce the separation constraints, ensuring that if one aircraft lands before another, the required separation time is maintained. The constraints also ensure that the landing times fall within the specified time windows and that the penalties for early or late landings are correctly calculated based on the deviation from the target landing times. The binary variables are explicitly defined as binary (0 or 1) to determine the sequence of landings and enforce the separation constraints.",
    "ground_truth": 34
  },
  {
    "question": "The manufacturing facility produces custom orders for three jobs: Job 0, Job 1, and Job 2. Each job consists of a sequence of operations that must be performed in a specific order, with each operation requiring a specific duration. The facility has limited machines, and some operations from different jobs must share the same machine. The goal is to schedule all operations to minimize the total completion time (makespan).\n\nJob 0 has two operations: Operation 0 and Operation 1. Operation 1 cannot start until Operation 0 has finished, with at least 8 hours between their start times. The makespan must be at least 8 hours after the start of Operation 0 and at least 5 hours after the start of Operation 1.\n\nJob 1 has five operations: Operation 0, Operation 1, Operation 2, Operation 3, and Operation 4. Operation 1 cannot start until Operation 0 has finished, with at least 7 hours between their start times. Operation 2 cannot start until Operation 1 has finished, with at least 9 hours between their start times. Operation 3 cannot start until Operation 2 has finished, with at least 5 hours between their start times. Operation 4 cannot start until Operation 3 has finished, with at least 6 hours between their start times. The makespan must be at least 7 hours after the start of Operation 0, 9 hours after the start of Operation 1, 5 hours after the start of Operation 2, 6 hours after the start of Operation 3, and 2 hours after the start of Operation 4.\n\nJob 2 has five operations: Operation 0, Operation 1, Operation 2, Operation 3, and Operation 4. Operation 1 cannot start until Operation 0 has finished, with at least 9 hours between their start times. Operation 2 cannot start until Operation 1 has finished, with at least 5 hours between their start times. Operation 3 cannot start until Operation 2 has finished, with at least 8 hours between their start times. Operation 4 cannot start until Operation 3 has finished, with at least 3 hours between their start times. The makespan must be at least 9 hours after the start of Operation 0, 5 hours after the start of Operation 1, 8 hours after the start of Operation 2, 3 hours after the start of Operation 3, and 1 hour after the start of Operation 4.\n\nCertain operations from different jobs share machines and must be scheduled without overlap. The following pairs of operations share machines: Operation 0 of Job 1 and Operation 2 of Job 1; Operation 1 of Job 0 and Operation 3 of Job 2; Operation 0 of Job 0 and Operation 1 of Job 2; Operation 0 of Job 0 and Operation 2 of Job 2; Operation 1 of Job 2 and Operation 2 of Job 2; Operation 4 of Job 1 and Operation 0 of Job 2. The scheduling system must determine the order of these operations to avoid conflicts, using binary variables to enforce the order. A large constant (100000) is used in the constraints to ensure that the order of operations sharing machines is respected.\n\nThe objective is to determine the start times for all operations such that all precedence constraints within each job are satisfied, no two operations sharing the same machine overlap in time, and the total completion time (makespan) is minimized. The makespan must be at least as large as the completion time of every operation. All start times must be non-negative. The binary variables are used to enforce the order of operations sharing machines, and the large constant ensures that the constraints are properly applied. The start times and the makespan are general variables, and the objective is explicitly to minimize the makespan.",
    "answer": 29,
    "ori": "13_optmath_bench",
    "index": 8,
    "description": "The manufacturing facility produces custom orders for three jobs: Job 0, Job 1, and Job 2. Each job consists of a sequence of operations that must be performed in a specific order, with each operation requiring a specific duration. The facility has limited machines, and some operations from different jobs must share the same machine. The goal is to schedule all operations to minimize the total completion time (makespan).\n\nJob 0 has two operations: Operation 0 and Operation 1. Operation 1 cannot start until Operation 0 has finished, with at least 8 hours between their start times. The makespan must be at least 8 hours after the start of Operation 0 and at least 5 hours after the start of Operation 1.\n\nJob 1 has five operations: Operation 0, Operation 1, Operation 2, Operation 3, and Operation 4. Operation 1 cannot start until Operation 0 has finished, with at least 7 hours between their start times. Operation 2 cannot start until Operation 1 has finished, with at least 9 hours between their start times. Operation 3 cannot start until Operation 2 has finished, with at least 5 hours between their start times. Operation 4 cannot start until Operation 3 has finished, with at least 6 hours between their start times. The makespan must be at least 7 hours after the start of Operation 0, 9 hours after the start of Operation 1, 5 hours after the start of Operation 2, 6 hours after the start of Operation 3, and 2 hours after the start of Operation 4.\n\nJob 2 has five operations: Operation 0, Operation 1, Operation 2, Operation 3, and Operation 4. Operation 1 cannot start until Operation 0 has finished, with at least 9 hours between their start times. Operation 2 cannot start until Operation 1 has finished, with at least 5 hours between their start times. Operation 3 cannot start until Operation 2 has finished, with at least 8 hours between their start times. Operation 4 cannot start until Operation 3 has finished, with at least 3 hours between their start times. The makespan must be at least 9 hours after the start of Operation 0, 5 hours after the start of Operation 1, 8 hours after the start of Operation 2, 3 hours after the start of Operation 3, and 1 hour after the start of Operation 4.\n\nCertain operations from different jobs share machines and must be scheduled without overlap. The following pairs of operations share machines: Operation 0 of Job 1 and Operation 2 of Job 1; Operation 1 of Job 0 and Operation 3 of Job 2; Operation 0 of Job 0 and Operation 1 of Job 2; Operation 0 of Job 0 and Operation 2 of Job 2; Operation 1 of Job 2 and Operation 2 of Job 2; Operation 4 of Job 1 and Operation 0 of Job 2. The scheduling system must determine the order of these operations to avoid conflicts, using binary variables to enforce the order. A large constant (100000) is used in the constraints to ensure that the order of operations sharing machines is respected.\n\nThe objective is to determine the start times for all operations such that all precedence constraints within each job are satisfied, no two operations sharing the same machine overlap in time, and the total completion time (makespan) is minimized. The makespan must be at least as large as the completion time of every operation. All start times must be non-negative. The binary variables are used to enforce the order of operations sharing machines, and the large constant ensures that the constraints are properly applied. The start times and the makespan are general variables, and the objective is explicitly to minimize the makespan.",
    "ground_truth": 29
  },
  {
    "question": "Determine the optimal sequence of six cities (City 0, City 1, City 2, City 3, City 4, and City 5) to minimize the total travel distance while ensuring each city is visited exactly once. The distances between the cities are as follows: From City 0 to City 1 (722 units), City 2 (758 units), City 3 (688 units), City 4 (897 units), and City 5 (100 units); from City 1 to City 0 (746 units), City 2 (76 units), City 3 (49 units), City 4 (86 units), and City 5 (385 units); from City 2 to City 0 (479 units), City 1 (154 units), City 3 (11 units), City 4 (374 units), and City 5 (350 units); from City 3 to City 0 (645 units), City 1 (842 units), City 2 (117 units), City 4 (619 units), and City 5 (535 units); from City 4 to City 0 (278 units), City 1 (829 units), City 2 (499 units), City 3 (268 units), and City 5 (973 units); from City 5 to City 0 (951 units), City 1 (144 units), City 2 (810 units), City 3 (943 units), and City 4 (989 units). Each city must be visited exactly once, and each city must be departed exactly once. To prevent subtours, the sequence of cities must be continuous, and the position of each city in the sequence must be between 0 and 5. If a route is taken from city i to city j, the position of city i must be less than the position of city j. The decision variables include selecting whether to include each route (binary) and assigning a position to each city in the sequence (integer). The position variables u[city_0] to u[city_5] must satisfy the constraints that ensure the sequence is continuous and the position of each city is between 0 and 5. The goal is to minimize the total distance traveled while satisfying all constraints, including the subtour elimination constraints that link the route variables and the position variables. The constraints R12 to R41 ensure that if a route is taken from city i to city j, the position of city i must be less than the position of city j, and the position variables u[city_1] to u[city_5] are bounded between 0 and 5. The route variables are binary, and the position variables are general (integer) variables.",
    "answer": 1062,
    "ori": "13_optmath_bench",
    "index": 9,
    "description": "Determine the optimal sequence of six cities (City 0, City 1, City 2, City 3, City 4, and City 5) to minimize the total travel distance while ensuring each city is visited exactly once. The distances between the cities are as follows: From City 0 to City 1 (722 units), City 2 (758 units), City 3 (688 units), City 4 (897 units), and City 5 (100 units); from City 1 to City 0 (746 units), City 2 (76 units), City 3 (49 units), City 4 (86 units), and City 5 (385 units); from City 2 to City 0 (479 units), City 1 (154 units), City 3 (11 units), City 4 (374 units), and City 5 (350 units); from City 3 to City 0 (645 units), City 1 (842 units), City 2 (117 units), City 4 (619 units), and City 5 (535 units); from City 4 to City 0 (278 units), City 1 (829 units), City 2 (499 units), City 3 (268 units), and City 5 (973 units); from City 5 to City 0 (951 units), City 1 (144 units), City 2 (810 units), City 3 (943 units), and City 4 (989 units). Each city must be visited exactly once, and each city must be departed exactly once. To prevent subtours, the sequence of cities must be continuous, and the position of each city in the sequence must be between 0 and 5. If a route is taken from city i to city j, the position of city i must be less than the position of city j. The decision variables include selecting whether to include each route (binary) and assigning a position to each city in the sequence (integer). The position variables u[city_0] to u[city_5] must satisfy the constraints that ensure the sequence is continuous and the position of each city is between 0 and 5. The goal is to minimize the total distance traveled while satisfying all constraints, including the subtour elimination constraints that link the route variables and the position variables. The constraints R12 to R41 ensure that if a route is taken from city i to city j, the position of city i must be less than the position of city j, and the position variables u[city_1] to u[city_5] are bounded between 0 and 5. The route variables are binary, and the position variables are general (integer) variables.",
    "ground_truth": 1062
  },
  {
    "question": "Minimize the total cost, which includes fixed costs for establishing transit lines, operational costs based on the frequency of each line, and penalty costs for any unmet passenger demand. The transit network consists of seven potential lines (L0 to L6), each with specific fixed costs, operational costs per trip, and frequency bounds. The fixed costs are 2960 units for L0, 3834 for L1, 2998 for L2, 4562 for L3, 3636 for L4, 1972 for L5, and 1570 for L6. The operational costs per trip are 166 units for L0, 154 for L1, 133 for L2, 473 for L3, 381 for L4, 459 for L5, and 242 for L6. The frequency of each line must be between 2 and 10 trips per unit time if the line is selected. The total vehicle usage across all lines must not exceed the available fleet of 35 vehicles. Vehicle usage per trip is 66 units for L0, 113 for L1, 142 for L2, 179 for L3, 89 for L4, 106 for L5, and 129 for L6.\n\nFor each origin-destination (OD) pair, the total capacity provided by the selected lines must meet or exceed the demand. If not, the unmet demand incurs a penalty. The demand for OD pair 4-3 is 19 passengers with a penalty of 945 units, OD pair 5-2 is 42 passengers with a penalty of 649 units, OD pair 0-1 is 33 passengers with a penalty of 605 units, OD pair 7-4 is 28 passengers with a penalty of 747 units, OD pair 1-4 is 30 passengers with a penalty of 799 units, OD pair 3-7 is 31 passengers with a penalty of 960 units, OD pair 6-3 is 27 passengers with a penalty of 558 units, OD pair 2-5 is 13 passengers with a penalty of 530 units, OD pair 4-7 is 27 passengers with a penalty of 630 units, OD pair 1-3 is 42 passengers with a penalty of 528 units, OD pair 7-1 is 42 passengers with a penalty of 695 units, OD pair 6-1 is 31 passengers with a penalty of 814 units, OD pair 5-1 is 35 passengers with a penalty of 652 units, OD pair 3-1 is 39 passengers with a penalty of 748 units, OD pair 6-2 is 20 passengers with a penalty of 786 units, OD pair 5-3 is 34 passengers with a penalty of 599 units, OD pair 2-1 is 39 passengers with a penalty of 948 units, and OD pair 6-5 is 39 passengers with a penalty of 577 units.\n\nA station can only be designated as a transfer station if at least two lines pass through it. For example, station 0 can only be a transfer station if line L5 is selected, station 1 can only be a transfer station if at least two of lines L3, L4, or L6 are selected, station 2 can only be a transfer station if line L0 is selected, station 3 can only be a transfer station if line L1 is selected, station 4 can only be a transfer station if line L2 is selected, station 5 can only be a transfer station if at least two of lines L2, L3, L4, L5, or L6 are selected, and stations 6 and 7 cannot be transfer stations. The binary variables y[0] to y[7] indicate whether a station is a transfer station, and constraints ensure that y[n] can only be 1 if at least two lines pass through station n. The total frequency of lines serving each OD pair must meet a minimum threshold to ensure adequate service quality. Each selected line must form a continuous route, ensuring that the sequence of stations is logically connected. Frequencies and unmet demands must be non-negative, and decisions about line selection and transfer stations must be binary (yes/no). The constraints also ensure that the frequency of a line is between 2 and 10 if the line is selected, and the total vehicle usage across all lines does not exceed 35 units.",
    "answer": 402943,
    "ori": "13_optmath_bench",
    "index": 10,
    "description": "Minimize the total cost, which includes fixed costs for establishing transit lines, operational costs based on the frequency of each line, and penalty costs for any unmet passenger demand. The transit network consists of seven potential lines (L0 to L6), each with specific fixed costs, operational costs per trip, and frequency bounds. The fixed costs are 2960 units for L0, 3834 for L1, 2998 for L2, 4562 for L3, 3636 for L4, 1972 for L5, and 1570 for L6. The operational costs per trip are 166 units for L0, 154 for L1, 133 for L2, 473 for L3, 381 for L4, 459 for L5, and 242 for L6. The frequency of each line must be between 2 and 10 trips per unit time if the line is selected. The total vehicle usage across all lines must not exceed the available fleet of 35 vehicles. Vehicle usage per trip is 66 units for L0, 113 for L1, 142 for L2, 179 for L3, 89 for L4, 106 for L5, and 129 for L6.\n\nFor each origin-destination (OD) pair, the total capacity provided by the selected lines must meet or exceed the demand. If not, the unmet demand incurs a penalty. The demand for OD pair 4-3 is 19 passengers with a penalty of 945 units, OD pair 5-2 is 42 passengers with a penalty of 649 units, OD pair 0-1 is 33 passengers with a penalty of 605 units, OD pair 7-4 is 28 passengers with a penalty of 747 units, OD pair 1-4 is 30 passengers with a penalty of 799 units, OD pair 3-7 is 31 passengers with a penalty of 960 units, OD pair 6-3 is 27 passengers with a penalty of 558 units, OD pair 2-5 is 13 passengers with a penalty of 530 units, OD pair 4-7 is 27 passengers with a penalty of 630 units, OD pair 1-3 is 42 passengers with a penalty of 528 units, OD pair 7-1 is 42 passengers with a penalty of 695 units, OD pair 6-1 is 31 passengers with a penalty of 814 units, OD pair 5-1 is 35 passengers with a penalty of 652 units, OD pair 3-1 is 39 passengers with a penalty of 748 units, OD pair 6-2 is 20 passengers with a penalty of 786 units, OD pair 5-3 is 34 passengers with a penalty of 599 units, OD pair 2-1 is 39 passengers with a penalty of 948 units, and OD pair 6-5 is 39 passengers with a penalty of 577 units.\n\nA station can only be designated as a transfer station if at least two lines pass through it. For example, station 0 can only be a transfer station if line L5 is selected, station 1 can only be a transfer station if at least two of lines L3, L4, or L6 are selected, station 2 can only be a transfer station if line L0 is selected, station 3 can only be a transfer station if line L1 is selected, station 4 can only be a transfer station if line L2 is selected, station 5 can only be a transfer station if at least two of lines L2, L3, L4, L5, or L6 are selected, and stations 6 and 7 cannot be transfer stations. The binary variables y[0] to y[7] indicate whether a station is a transfer station, and constraints ensure that y[n] can only be 1 if at least two lines pass through station n. The total frequency of lines serving each OD pair must meet a minimum threshold to ensure adequate service quality. Each selected line must form a continuous route, ensuring that the sequence of stations is logically connected. Frequencies and unmet demands must be non-negative, and decisions about line selection and transfer stations must be binary (yes/no). The constraints also ensure that the frequency of a line is between 2 and 10 if the line is selected, and the total vehicle usage across all lines does not exceed 35 units.",
    "ground_truth": 402943
  },
  {
    "question": "A manufacturing facility produces custom orders for two jobs, Job 0 and Job 1. Each job consists of a sequence of operations that must be performed in a specific order, and some operations require the use of shared machinery. The goal is to schedule these operations to minimize the total production time, or makespan, ensuring all orders are completed as quickly as possible.\n\nJob 0 has three operations: Operation 0, Operation 1, and Operation 2. Operation 1 must start at least 8 units of time after Operation 0 completes, and Operation 2 must start at least 1 unit of time after Operation 1 completes. Job 1 has six operations: Operation 0, Operation 1, Operation 2, Operation 3, Operation 4, and Operation 5. Operation 1 must start at least 5 units of time after Operation 0 completes, Operation 2 must start at least 5 units of time after Operation 1 completes, Operation 3 must start at least 7 units of time after Operation 2 completes, Operation 4 must start at least 4 units of time after Operation 3 completes, and Operation 5 must start at least 2 units of time after Operation 4 completes.\n\nSome operations from both jobs require the use of the same machine, and only one operation can be processed on a machine at any given time. The following pairs of operations share the same machine: Operation 3 and Operation 4 of Job 1, Operation 0 and Operation 1 of Job 0, Operation 0 of Job 0 and Operation 2 of Job 1, and Operation 1 of Job 0 and Operation 2 of Job 1. For each pair of operations sharing a machine, a decision must be made about which operation is processed first. This decision is represented by a binary variable, where a value of 1 indicates that the first operation in the pair is processed before the second, and a value of 0 indicates the opposite.\n\nThe primary objective is to minimize the total production time, or makespan, which is defined as the time at which the last operation across all jobs is completed. The makespan must be at least as large as the completion time of every operation in both jobs. Specifically, the makespan must be at least 8 units of time after Operation 0 of Job 0 completes, at least 1 unit of time after Operation 1 of Job 0 completes, at least 4 units of time after Operation 2 of Job 0 completes, at least 5 units of time after Operation 0 of Job 1 completes, at least 5 units of time after Operation 1 of Job 1 completes, at least 7 units of time after Operation 2 of Job 1 completes, at least 4 units of time after Operation 3 of Job 1 completes, at least 2 units of time after Operation 4 of Job 1 completes, and at least 9 units of time after Operation 5 of Job 1 completes.\n\nAll operation start times must be non-negative, meaning no operation can start before time zero. For each pair of operations sharing a machine, the following must hold: if Operation A is scheduled before Operation B, then Operation B cannot start until Operation A has been completed, and conversely, if Operation B is scheduled before Operation A, then Operation A cannot start until Operation B has been completed. These constraints are enforced using a large constant (100,000) to ensure that the scheduling logic is maintained. The specific values derived from this constant, such as 99996, 99992, and 99999, are used in the constraints to enforce the sequencing logic.\n\nThe task is to determine the optimal schedule for all operations in both jobs, ensuring that all precedence and machine capacity constraints are satisfied, and that the total production time (makespan) is minimized. This involves deciding the order of operations on shared machines and ensuring that all operations are completed as quickly as possible.",
    "answer": 32,
    "ori": "13_optmath_bench",
    "index": 11,
    "description": "A manufacturing facility produces custom orders for two jobs, Job 0 and Job 1. Each job consists of a sequence of operations that must be performed in a specific order, and some operations require the use of shared machinery. The goal is to schedule these operations to minimize the total production time, or makespan, ensuring all orders are completed as quickly as possible.\n\nJob 0 has three operations: Operation 0, Operation 1, and Operation 2. Operation 1 must start at least 8 units of time after Operation 0 completes, and Operation 2 must start at least 1 unit of time after Operation 1 completes. Job 1 has six operations: Operation 0, Operation 1, Operation 2, Operation 3, Operation 4, and Operation 5. Operation 1 must start at least 5 units of time after Operation 0 completes, Operation 2 must start at least 5 units of time after Operation 1 completes, Operation 3 must start at least 7 units of time after Operation 2 completes, Operation 4 must start at least 4 units of time after Operation 3 completes, and Operation 5 must start at least 2 units of time after Operation 4 completes.\n\nSome operations from both jobs require the use of the same machine, and only one operation can be processed on a machine at any given time. The following pairs of operations share the same machine: Operation 3 and Operation 4 of Job 1, Operation 0 and Operation 1 of Job 0, Operation 0 of Job 0 and Operation 2 of Job 1, and Operation 1 of Job 0 and Operation 2 of Job 1. For each pair of operations sharing a machine, a decision must be made about which operation is processed first. This decision is represented by a binary variable, where a value of 1 indicates that the first operation in the pair is processed before the second, and a value of 0 indicates the opposite.\n\nThe primary objective is to minimize the total production time, or makespan, which is defined as the time at which the last operation across all jobs is completed. The makespan must be at least as large as the completion time of every operation in both jobs. Specifically, the makespan must be at least 8 units of time after Operation 0 of Job 0 completes, at least 1 unit of time after Operation 1 of Job 0 completes, at least 4 units of time after Operation 2 of Job 0 completes, at least 5 units of time after Operation 0 of Job 1 completes, at least 5 units of time after Operation 1 of Job 1 completes, at least 7 units of time after Operation 2 of Job 1 completes, at least 4 units of time after Operation 3 of Job 1 completes, at least 2 units of time after Operation 4 of Job 1 completes, and at least 9 units of time after Operation 5 of Job 1 completes.\n\nAll operation start times must be non-negative, meaning no operation can start before time zero. For each pair of operations sharing a machine, the following must hold: if Operation A is scheduled before Operation B, then Operation B cannot start until Operation A has been completed, and conversely, if Operation B is scheduled before Operation A, then Operation A cannot start until Operation B has been completed. These constraints are enforced using a large constant (100,000) to ensure that the scheduling logic is maintained. The specific values derived from this constant, such as 99996, 99992, and 99999, are used in the constraints to enforce the sequencing logic.\n\nThe task is to determine the optimal schedule for all operations in both jobs, ensuring that all precedence and machine capacity constraints are satisfied, and that the total production time (makespan) is minimized. This involves deciding the order of operations on shared machines and ensuring that all operations are completed as quickly as possible.",
    "ground_truth": 32
  },
  {
    "question": "The problem involves scheduling the landing times of three aircraft (Aircraft 0, Aircraft 1, and Aircraft 2) to minimize the total penalty costs associated with landing early or late. Each aircraft has a target landing time, and the actual landing time must fall within a specified earliest and latest possible landing time window. Aircraft 0 must land between 24 and 84 minutes, Aircraft 1 between 180 and 240 minutes, and Aircraft 2 between 215 and 275 minutes. The penalties for landing early are \\$21, \\$16, and \\$49 per minute for Aircraft 0, 1, and 2, respectively. The penalties for landing late are \\$57, \\$34, and \\$45 per minute for Aircraft 0, 1, and 2, respectively. The target landing times are defined such that Aircraft 0 must land no earlier than 54 minutes, Aircraft 1 no earlier than 210 minutes, and Aircraft 2 no earlier than 245 minutes. \n\nTo ensure safe landings, separation times between aircraft must be maintained based on the order in which they land. Binary variables determine the order of landings between any two aircraft. If Aircraft 0 lands before Aircraft 1, there must be at least 5 minutes between their landings; if Aircraft 1 lands before Aircraft 0, the separation must be at least 96 minutes. If Aircraft 0 lands before Aircraft 2, the separation must be at least 4 minutes; if Aircraft 2 lands before Aircraft 0, the separation must be at least 131 minutes. If Aircraft 1 lands before Aircraft 2, the separation must be at least 5 minutes; if Aircraft 2 lands before Aircraft 1, the separation must be at least 25 minutes. Additionally, if Aircraft 0 lands before Aircraft 1, the separation must be at least 216 minutes; if Aircraft 1 lands before Aircraft 0, the separation must be at least 2 minutes. If Aircraft 0 lands before Aircraft 2, the separation must be at least 251 minutes; if Aircraft 2 lands before Aircraft 0, the separation must be at least 1 minute. If Aircraft 1 lands before Aircraft 2, the separation must be at least 95 minutes; if Aircraft 2 lands before Aircraft 1, the separation must be at least 3 minutes.\n\nThe objective is to determine the landing times for each aircraft that minimize the total penalty costs, which are calculated as the sum of the early and late penalties for all aircraft. The early penalty for each aircraft is the number of minutes it lands before its target time multiplied by its early penalty rate, and the late penalty is the number of minutes it lands after its target time multiplied by its late penalty rate. The solution must ensure that all aircraft land within their respective time windows and that the separation times between landings are respected based on the order in which the aircraft land. The decision variables include the actual landing times for each aircraft and binary variables that determine the order of landings between any two aircraft. The goal is to find the optimal landing schedule that minimizes the total penalty costs while satisfying all constraints.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 12,
    "description": "The problem involves scheduling the landing times of three aircraft (Aircraft 0, Aircraft 1, and Aircraft 2) to minimize the total penalty costs associated with landing early or late. Each aircraft has a target landing time, and the actual landing time must fall within a specified earliest and latest possible landing time window. Aircraft 0 must land between 24 and 84 minutes, Aircraft 1 between 180 and 240 minutes, and Aircraft 2 between 215 and 275 minutes. The penalties for landing early are \\$21, \\$16, and \\$49 per minute for Aircraft 0, 1, and 2, respectively. The penalties for landing late are \\$57, \\$34, and \\$45 per minute for Aircraft 0, 1, and 2, respectively. The target landing times are defined such that Aircraft 0 must land no earlier than 54 minutes, Aircraft 1 no earlier than 210 minutes, and Aircraft 2 no earlier than 245 minutes. \n\nTo ensure safe landings, separation times between aircraft must be maintained based on the order in which they land. Binary variables determine the order of landings between any two aircraft. If Aircraft 0 lands before Aircraft 1, there must be at least 5 minutes between their landings; if Aircraft 1 lands before Aircraft 0, the separation must be at least 96 minutes. If Aircraft 0 lands before Aircraft 2, the separation must be at least 4 minutes; if Aircraft 2 lands before Aircraft 0, the separation must be at least 131 minutes. If Aircraft 1 lands before Aircraft 2, the separation must be at least 5 minutes; if Aircraft 2 lands before Aircraft 1, the separation must be at least 25 minutes. Additionally, if Aircraft 0 lands before Aircraft 1, the separation must be at least 216 minutes; if Aircraft 1 lands before Aircraft 0, the separation must be at least 2 minutes. If Aircraft 0 lands before Aircraft 2, the separation must be at least 251 minutes; if Aircraft 2 lands before Aircraft 0, the separation must be at least 1 minute. If Aircraft 1 lands before Aircraft 2, the separation must be at least 95 minutes; if Aircraft 2 lands before Aircraft 1, the separation must be at least 3 minutes.\n\nThe objective is to determine the landing times for each aircraft that minimize the total penalty costs, which are calculated as the sum of the early and late penalties for all aircraft. The early penalty for each aircraft is the number of minutes it lands before its target time multiplied by its early penalty rate, and the late penalty is the number of minutes it lands after its target time multiplied by its late penalty rate. The solution must ensure that all aircraft land within their respective time windows and that the separation times between landings are respected based on the order in which the aircraft land. The decision variables include the actual landing times for each aircraft and binary variables that determine the order of landings between any two aircraft. The goal is to find the optimal landing schedule that minimizes the total penalty costs while satisfying all constraints.",
    "ground_truth": 0
  },
  {
    "question": "In a manufacturing facility, you are tasked with scheduling the production of two distinct jobs, Job 0 and Job 1, across a set of machines. Each job consists of a sequence of operations that must be performed in a specific order, and each operation requires a certain amount of time to complete. The goal is to minimize the total production time, known as the makespan, while ensuring that all operations are scheduled without overlapping on the same machine and that the sequence of operations within each job is respected.\n\nJob 0 consists of two operations: Operation 0 takes 5 units of time to complete, and Operation 1 can only start after Operation 0 has finished. The makespan must be at least 5 units of time after the start of Operation 0 and at least 2 units of time after the start of Operation 1.\n\nJob 1 consists of five operations: Operation 0 takes 9 units of time to complete, Operation 1 takes 9 units of time and can only start after Operation 0 has finished, Operation 2 takes 7 units of time and can only start after Operation 1 has finished, Operation 3 takes 2 units of time and can only start after Operation 2 has finished, and Operation 4 takes 8 units of time and can only start after Operation 3 has finished. The makespan must be at least 9 units of time after the start of Operation 0, at least 9 units of time after the start of Operation 1, at least 7 units of time after the start of Operation 2, at least 2 units of time after the start of Operation 3, and at least 8 units of time after the start of Operation 4.\n\nCertain operations from Job 1 must be performed on the same machine, and their scheduling must avoid overlaps. Specifically, Operation 0 and Operation 4 of Job 1 cannot overlap on the same machine. If Operation 0 starts first, Operation 4 must start at least 8 units of time after Operation 0 finishes. Conversely, if Operation 4 starts first, Operation 0 must start at least 9 units of time after Operation 4 finishes. Similarly, Operation 2 and Operation 3 of Job 1 cannot overlap on the same machine. If Operation 2 starts first, Operation 3 must start at least 2 units of time after Operation 2 finishes. Conversely, if Operation 3 starts first, Operation 2 must start at least 7 units of time after Operation 3 finishes.\n\nThe primary objective is to minimize the makespan, which is the total time taken to complete all operations across both jobs. The makespan must be at least as long as the completion time of the last operation in either job. All operations must start at or after time 0, and the order of operations within each job must be strictly followed. The scheduling of operations on shared machines must respect the no-overlap constraints described above. Binary variables are used to enforce the no-overlap constraints on the shared machines, ensuring that the operations do not overlap and the sequence constraints are satisfied.",
    "answer": 35,
    "ori": "13_optmath_bench",
    "index": 13,
    "description": "In a manufacturing facility, you are tasked with scheduling the production of two distinct jobs, Job 0 and Job 1, across a set of machines. Each job consists of a sequence of operations that must be performed in a specific order, and each operation requires a certain amount of time to complete. The goal is to minimize the total production time, known as the makespan, while ensuring that all operations are scheduled without overlapping on the same machine and that the sequence of operations within each job is respected.\n\nJob 0 consists of two operations: Operation 0 takes 5 units of time to complete, and Operation 1 can only start after Operation 0 has finished. The makespan must be at least 5 units of time after the start of Operation 0 and at least 2 units of time after the start of Operation 1.\n\nJob 1 consists of five operations: Operation 0 takes 9 units of time to complete, Operation 1 takes 9 units of time and can only start after Operation 0 has finished, Operation 2 takes 7 units of time and can only start after Operation 1 has finished, Operation 3 takes 2 units of time and can only start after Operation 2 has finished, and Operation 4 takes 8 units of time and can only start after Operation 3 has finished. The makespan must be at least 9 units of time after the start of Operation 0, at least 9 units of time after the start of Operation 1, at least 7 units of time after the start of Operation 2, at least 2 units of time after the start of Operation 3, and at least 8 units of time after the start of Operation 4.\n\nCertain operations from Job 1 must be performed on the same machine, and their scheduling must avoid overlaps. Specifically, Operation 0 and Operation 4 of Job 1 cannot overlap on the same machine. If Operation 0 starts first, Operation 4 must start at least 8 units of time after Operation 0 finishes. Conversely, if Operation 4 starts first, Operation 0 must start at least 9 units of time after Operation 4 finishes. Similarly, Operation 2 and Operation 3 of Job 1 cannot overlap on the same machine. If Operation 2 starts first, Operation 3 must start at least 2 units of time after Operation 2 finishes. Conversely, if Operation 3 starts first, Operation 2 must start at least 7 units of time after Operation 3 finishes.\n\nThe primary objective is to minimize the makespan, which is the total time taken to complete all operations across both jobs. The makespan must be at least as long as the completion time of the last operation in either job. All operations must start at or after time 0, and the order of operations within each job must be strictly followed. The scheduling of operations on shared machines must respect the no-overlap constraints described above. Binary variables are used to enforce the no-overlap constraints on the shared machines, ensuring that the operations do not overlap and the sequence constraints are satisfied.",
    "ground_truth": 35
  },
  {
    "question": "There are two aircraft, **aircraft_0** and **aircraft_1**, that need to be scheduled for landing. The goal is to minimize the total penalty costs associated with deviations from their target landing times. **aircraft_0** must land between 0 and 30 units of time, while **aircraft_1** must land between 128 and 188 units of time. The target landing time for **aircraft_0** is 0 units, and for **aircraft_1**, it is 158 units. Penalties are incurred for deviations from the target times: **aircraft_0** incurs a penalty of 42 units per unit time for landing early and 32 units per unit time for landing late, while **aircraft_1** incurs a penalty of 62 units per unit time for landing early and 55 units per unit time for landing late.\n\nTo ensure safety, a minimum separation time must be maintained between the landings of the two aircraft. If **aircraft_0** lands before **aircraft_1**, there must be at least 3 units of separation time. If **aircraft_1** lands before **aircraft_0**, there must be at least 98 units of separation time. The order of landings is determined by binary variables **AircraftOrder[aircraft_0,aircraft_1]** and **AircraftOrder[aircraft_1,aircraft_0]**, which are mutually exclusive and must sum to 1. The landing times must respect the separation requirements based on the landing order, and each aircraft must land within its specified time window.\n\nThe early and late deviations for each aircraft are calculated based on the difference between the actual landing time and the target time. For **aircraft_0**, the early deviation is non-negative, and the late deviation is non-negative. For **aircraft_1**, the early deviation is calculated as the difference between the target time and the actual landing time, and the late deviation is calculated as the difference between the actual landing time and the target time. The objective is to minimize the total penalty costs, which are calculated as the sum of the penalties for early and late deviations for both aircraft.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 14,
    "description": "There are two aircraft, **aircraft_0** and **aircraft_1**, that need to be scheduled for landing. The goal is to minimize the total penalty costs associated with deviations from their target landing times. **aircraft_0** must land between 0 and 30 units of time, while **aircraft_1** must land between 128 and 188 units of time. The target landing time for **aircraft_0** is 0 units, and for **aircraft_1**, it is 158 units. Penalties are incurred for deviations from the target times: **aircraft_0** incurs a penalty of 42 units per unit time for landing early and 32 units per unit time for landing late, while **aircraft_1** incurs a penalty of 62 units per unit time for landing early and 55 units per unit time for landing late.\n\nTo ensure safety, a minimum separation time must be maintained between the landings of the two aircraft. If **aircraft_0** lands before **aircraft_1**, there must be at least 3 units of separation time. If **aircraft_1** lands before **aircraft_0**, there must be at least 98 units of separation time. The order of landings is determined by binary variables **AircraftOrder[aircraft_0,aircraft_1]** and **AircraftOrder[aircraft_1,aircraft_0]**, which are mutually exclusive and must sum to 1. The landing times must respect the separation requirements based on the landing order, and each aircraft must land within its specified time window.\n\nThe early and late deviations for each aircraft are calculated based on the difference between the actual landing time and the target time. For **aircraft_0**, the early deviation is non-negative, and the late deviation is non-negative. For **aircraft_1**, the early deviation is calculated as the difference between the target time and the actual landing time, and the late deviation is calculated as the difference between the actual landing time and the target time. The objective is to minimize the total penalty costs, which are calculated as the sum of the penalties for early and late deviations for both aircraft.",
    "ground_truth": 0
  },
  {
    "question": "The manufacturing facility produces custom parts for two jobs, Job 0 and Job 1, each with a sequence of operations that must follow specific precedence constraints. Job 0 has two operations: Operation 0 must start at least 2 hours before Operation 1 begins. Job 1 has five operations: Operation 1 must start at least 4 hours after Operation 0 begins, Operation 2 must start at least 2 hours after Operation 1 completes, Operation 3 must start at least 1 hour after Operation 2 completes, and Operation 4 must start at least 3 hours after Operation 3 completes. \n\nOperations from different jobs share machines: Operation 0 of Job 0 and Operation 0 of Job 1 share a machine, Operation 0 of Job 0 and Operation 1 of Job 1 share a machine, Operation 0 of Job 1 and Operation 1 of Job 1 share a machine, and Operation 2 of Job 1 and Operation 4 of Job 1 share a machine. To prevent overlapping, binary variables determine the order of operations on shared machines. If Operation A is scheduled before Operation B on a shared machine, the binary variable is 1; otherwise, it is 0. \n\nThe objective is to minimize the makespan, the total completion time for all operations. The makespan must be at least as large as the completion time of the last operation in either job. Constraints ensure that operations within the same job follow their precedence requirements and that operations sharing a machine do not overlap. For example, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1, Operation 0 of Job 1 must start at least 4 hours after Operation 0 of Job 0 begins. Similarly, if Operation 2 of Job 1 is scheduled before Operation 4 of Job 1, Operation 4 of Job 1 must start at least 7 hours after Operation 2 of Job 1 begins. \n\nThe makespan accounts for the completion times of all operations: Operation 0 of Job 0 contributes at least 2 hours, Operation 1 of Job 0 contributes at least 4 hours, Operation 0 of Job 1 contributes at least 4 hours, Operation 1 of Job 1 contributes at least 2 hours, Operation 2 of Job 1 contributes at least 1 hour, Operation 3 of Job 1 contributes at least 3 hours, and Operation 4 of Job 1 contributes at least 7 hours. All operation start times must be non-negative, and the binary variables determining the order of operations on shared machines must be either 0 or 1. The goal is to determine the optimal schedule for all operations across both jobs, ensuring all constraints are met while minimizing the makespan.",
    "answer": 17,
    "ori": "13_optmath_bench",
    "index": 15,
    "description": "The manufacturing facility produces custom parts for two jobs, Job 0 and Job 1, each with a sequence of operations that must follow specific precedence constraints. Job 0 has two operations: Operation 0 must start at least 2 hours before Operation 1 begins. Job 1 has five operations: Operation 1 must start at least 4 hours after Operation 0 begins, Operation 2 must start at least 2 hours after Operation 1 completes, Operation 3 must start at least 1 hour after Operation 2 completes, and Operation 4 must start at least 3 hours after Operation 3 completes. \n\nOperations from different jobs share machines: Operation 0 of Job 0 and Operation 0 of Job 1 share a machine, Operation 0 of Job 0 and Operation 1 of Job 1 share a machine, Operation 0 of Job 1 and Operation 1 of Job 1 share a machine, and Operation 2 of Job 1 and Operation 4 of Job 1 share a machine. To prevent overlapping, binary variables determine the order of operations on shared machines. If Operation A is scheduled before Operation B on a shared machine, the binary variable is 1; otherwise, it is 0. \n\nThe objective is to minimize the makespan, the total completion time for all operations. The makespan must be at least as large as the completion time of the last operation in either job. Constraints ensure that operations within the same job follow their precedence requirements and that operations sharing a machine do not overlap. For example, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1, Operation 0 of Job 1 must start at least 4 hours after Operation 0 of Job 0 begins. Similarly, if Operation 2 of Job 1 is scheduled before Operation 4 of Job 1, Operation 4 of Job 1 must start at least 7 hours after Operation 2 of Job 1 begins. \n\nThe makespan accounts for the completion times of all operations: Operation 0 of Job 0 contributes at least 2 hours, Operation 1 of Job 0 contributes at least 4 hours, Operation 0 of Job 1 contributes at least 4 hours, Operation 1 of Job 1 contributes at least 2 hours, Operation 2 of Job 1 contributes at least 1 hour, Operation 3 of Job 1 contributes at least 3 hours, and Operation 4 of Job 1 contributes at least 7 hours. All operation start times must be non-negative, and the binary variables determining the order of operations on shared machines must be either 0 or 1. The goal is to determine the optimal schedule for all operations across both jobs, ensuring all constraints are met while minimizing the makespan.",
    "ground_truth": 17
  },
  {
    "question": "The problem involves scheduling four jobs (Job 0, Job 1, Job 2, and Job 3) on a set of machines to minimize the total completion time (makespan). Each job consists of a sequence of operations, and each operation must be processed on a specific machine with a given processing time. Job 0 has two operations: Operation 0 takes 2 units of time, and Operation 1 takes 3 units of time. Job 1 has five operations: Operation 0 takes 8 units of time, Operation 1 takes 7 units of time, Operation 2 takes 4 units of time, Operation 3 takes 3 units of time, and Operation 4 takes 2 units of time. Job 2 has five operations: Operation 0 takes 8 units of time, Operation 1 takes 3 units of time, Operation 2 takes 7 units of time, Operation 3 takes 8 units of time, and Operation 4 takes 4 units of time. Job 3 has seven operations: Operation 0 takes 6 units of time, Operation 1 takes 4 units of time, Operation 2 takes 7 units of time, Operation 3 takes 6 units of time, Operation 4 takes 2 units of time, Operation 5 takes 8 units of time, and Operation 6 takes 9 units of time.\n\nEach operation in a job must start only after the previous operation in the same job has completed. For example, in Job 1, Operation 1 cannot start until Operation 0 has finished, and in Job 3, Operation 6 cannot start until Operation 5 has finished. No two operations can be processed on the same machine at the same time. For example, if Operation 3 of Job 1 and Operation 4 of Job 2 are assigned to the same machine, they cannot overlap, and the start time of one must be at least 4 units after the other, depending on the order in which they are scheduled. Similarly, Operation 1 of Job 1 and Operation 2 of Job 3 cannot overlap on the same machine, and the start time of one must be at least 7 units after the other.\n\nThe total completion time (makespan) must be at least as large as the completion time of every operation. For example, the makespan must be at least 2 units to account for the completion of Operation 0 in Job 0, and it must also be at least 9 units to account for the completion of Operation 6 in Job 3. The objective is to minimize the makespan, which involves determining the start times for each operation on each machine while respecting the precedence and machine capacity constraints. All start times must be non-negative, and the order of operations on each machine is determined by binary decision variables, which decide whether one operation starts before another on the same machine. A large constant (100000) is used in the machine capacity constraints to ensure that the constraints are only active when the binary variable is 1 or 0.\n\nThe binary decision variables, such as \\(X_{(1,3)(2,4)}\\), \\(X_{(1,3)(3,0)}\\), and others, determine the order of operations on the same machine. For example, \\(X_{(1,3)(2,4)}\\) decides whether Operation 3 of Job 1 starts before Operation 4 of Job 2 on the same machine. The constraints involving these binary variables ensure that the start times of operations on the same machine do not overlap. The start times \\(S_{(i,j)}\\) and the makespan \\(C_{\\text{max}}\\) are general variables that can take non-negative real values. The precedence constraints between operations of different jobs on the same machine, such as those involving \\(S_{(1,3)}\\), \\(S_{(2,4)}\\), and \\(S_{(3,0)}\\), are explicitly enforced to ensure that the operations are scheduled in a feasible order.",
    "answer": 42,
    "ori": "13_optmath_bench",
    "index": 16,
    "description": "The problem involves scheduling four jobs (Job 0, Job 1, Job 2, and Job 3) on a set of machines to minimize the total completion time (makespan). Each job consists of a sequence of operations, and each operation must be processed on a specific machine with a given processing time. Job 0 has two operations: Operation 0 takes 2 units of time, and Operation 1 takes 3 units of time. Job 1 has five operations: Operation 0 takes 8 units of time, Operation 1 takes 7 units of time, Operation 2 takes 4 units of time, Operation 3 takes 3 units of time, and Operation 4 takes 2 units of time. Job 2 has five operations: Operation 0 takes 8 units of time, Operation 1 takes 3 units of time, Operation 2 takes 7 units of time, Operation 3 takes 8 units of time, and Operation 4 takes 4 units of time. Job 3 has seven operations: Operation 0 takes 6 units of time, Operation 1 takes 4 units of time, Operation 2 takes 7 units of time, Operation 3 takes 6 units of time, Operation 4 takes 2 units of time, Operation 5 takes 8 units of time, and Operation 6 takes 9 units of time.\n\nEach operation in a job must start only after the previous operation in the same job has completed. For example, in Job 1, Operation 1 cannot start until Operation 0 has finished, and in Job 3, Operation 6 cannot start until Operation 5 has finished. No two operations can be processed on the same machine at the same time. For example, if Operation 3 of Job 1 and Operation 4 of Job 2 are assigned to the same machine, they cannot overlap, and the start time of one must be at least 4 units after the other, depending on the order in which they are scheduled. Similarly, Operation 1 of Job 1 and Operation 2 of Job 3 cannot overlap on the same machine, and the start time of one must be at least 7 units after the other.\n\nThe total completion time (makespan) must be at least as large as the completion time of every operation. For example, the makespan must be at least 2 units to account for the completion of Operation 0 in Job 0, and it must also be at least 9 units to account for the completion of Operation 6 in Job 3. The objective is to minimize the makespan, which involves determining the start times for each operation on each machine while respecting the precedence and machine capacity constraints. All start times must be non-negative, and the order of operations on each machine is determined by binary decision variables, which decide whether one operation starts before another on the same machine. A large constant (100000) is used in the machine capacity constraints to ensure that the constraints are only active when the binary variable is 1 or 0.\n\nThe binary decision variables, such as \\(X_{(1,3)(2,4)}\\), \\(X_{(1,3)(3,0)}\\), and others, determine the order of operations on the same machine. For example, \\(X_{(1,3)(2,4)}\\) decides whether Operation 3 of Job 1 starts before Operation 4 of Job 2 on the same machine. The constraints involving these binary variables ensure that the start times of operations on the same machine do not overlap. The start times \\(S_{(i,j)}\\) and the makespan \\(C_{\\text{max}}\\) are general variables that can take non-negative real values. The precedence constraints between operations of different jobs on the same machine, such as those involving \\(S_{(1,3)}\\), \\(S_{(2,4)}\\), and \\(S_{(3,0)}\\), are explicitly enforced to ensure that the operations are scheduled in a feasible order.",
    "ground_truth": 42
  },
  {
    "question": "The problem involves scheduling the landing times of six aircraft at a busy airport to minimize the total penalty costs associated with deviations from their target landing times while ensuring safe separation between landings. Each aircraft has a target landing time, earliest and latest possible landing times, and penalty costs for landing early or late. The landing times must fall within the specified bounds for each aircraft: Aircraft 0 between 8 and 68 minutes, Aircraft 1 between 46 and 106 minutes, Aircraft 2 between 90 and 150 minutes, Aircraft 3 between 16 and 76 minutes, Aircraft 4 between 0 and 57 minutes, and Aircraft 5 between 39 and 99 minutes. The penalties are calculated based on the deviation from the target landing times, with specific costs per minute for early or late landings: 55 for early landing of Aircraft 0, 94 for Aircraft 1, 61 for Aircraft 2, 64 for Aircraft 3, 74 for Aircraft 4, and 84 for Aircraft 5; and 38 for late landing of Aircraft 0, 81 for Aircraft 1, 71 for Aircraft 2, 80 for Aircraft 3, 53 for Aircraft 4, and 84 for Aircraft 5. The binary decision variables ensure that for each pair of aircraft, one lands before the other, and the separation times are enforced based on the landing order. The separation constraints include specific times such as 22 minutes between Aircraft 0 and 1, 22 minutes between Aircraft 0 and 2, 5 minutes between Aircraft 0 and 3, 3 minutes between Aircraft 0 and 4, 3 minutes between Aircraft 0 and 5, 4 minutes between Aircraft 1 and 2, 3 minutes between Aircraft 1 and 3, 1 minute between Aircraft 1 and 4, 5 minutes between Aircraft 1 and 5, 2 minutes between Aircraft 2 and 3, 1 minute between Aircraft 2 and 4, 5 minutes between Aircraft 2 and 5, 5 minutes between Aircraft 3 and 4, 3 minutes between Aircraft 3 and 5, and 5 minutes between Aircraft 4 and 5. The goal is to determine the actual landing times for all six aircraft such that the total penalty cost is minimized, and all separation and landing time constraints are satisfied. The binary decision variables `AircraftOrder[i,j]` are used to determine the landing order, and the constraints involving `Early` and `Late` variables ensure that the landing times are within the acceptable deviations from the target times. The target landing times for each aircraft are implied by the constraints involving `Early` and `Late` variables, and the `AircraftOrder` variables are binary, ensuring that one aircraft lands before the other in each pair. The relationship between the separation constraints and the binary decision variables is essential for understanding the problem structure.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 17,
    "description": "The problem involves scheduling the landing times of six aircraft at a busy airport to minimize the total penalty costs associated with deviations from their target landing times while ensuring safe separation between landings. Each aircraft has a target landing time, earliest and latest possible landing times, and penalty costs for landing early or late. The landing times must fall within the specified bounds for each aircraft: Aircraft 0 between 8 and 68 minutes, Aircraft 1 between 46 and 106 minutes, Aircraft 2 between 90 and 150 minutes, Aircraft 3 between 16 and 76 minutes, Aircraft 4 between 0 and 57 minutes, and Aircraft 5 between 39 and 99 minutes. The penalties are calculated based on the deviation from the target landing times, with specific costs per minute for early or late landings: 55 for early landing of Aircraft 0, 94 for Aircraft 1, 61 for Aircraft 2, 64 for Aircraft 3, 74 for Aircraft 4, and 84 for Aircraft 5; and 38 for late landing of Aircraft 0, 81 for Aircraft 1, 71 for Aircraft 2, 80 for Aircraft 3, 53 for Aircraft 4, and 84 for Aircraft 5. The binary decision variables ensure that for each pair of aircraft, one lands before the other, and the separation times are enforced based on the landing order. The separation constraints include specific times such as 22 minutes between Aircraft 0 and 1, 22 minutes between Aircraft 0 and 2, 5 minutes between Aircraft 0 and 3, 3 minutes between Aircraft 0 and 4, 3 minutes between Aircraft 0 and 5, 4 minutes between Aircraft 1 and 2, 3 minutes between Aircraft 1 and 3, 1 minute between Aircraft 1 and 4, 5 minutes between Aircraft 1 and 5, 2 minutes between Aircraft 2 and 3, 1 minute between Aircraft 2 and 4, 5 minutes between Aircraft 2 and 5, 5 minutes between Aircraft 3 and 4, 3 minutes between Aircraft 3 and 5, and 5 minutes between Aircraft 4 and 5. The goal is to determine the actual landing times for all six aircraft such that the total penalty cost is minimized, and all separation and landing time constraints are satisfied. The binary decision variables `AircraftOrder[i,j]` are used to determine the landing order, and the constraints involving `Early` and `Late` variables ensure that the landing times are within the acceptable deviations from the target times. The target landing times for each aircraft are implied by the constraints involving `Early` and `Late` variables, and the `AircraftOrder` variables are binary, ensuring that one aircraft lands before the other in each pair. The relationship between the separation constraints and the binary decision variables is essential for understanding the problem structure.",
    "ground_truth": 0
  },
  {
    "question": "The problem involves scheduling the landing times of three aircraft (aircraft_0, aircraft_1, and aircraft_2) to minimize the total penalty costs associated with deviations from their target landing times. Each aircraft has specific time windows within which it must land: aircraft_0 must land between 19 and 79 minutes, aircraft_1 between 58 and 118 minutes, and aircraft_2 between 205 and 265 minutes. The penalties for landing early or late are as follows: aircraft_0 incurs a penalty of 58 units per minute early and 57 units per minute late, aircraft_1 incurs 25 units per minute early and 61 units per minute late, and aircraft_2 incurs 37 units per minute early and 70 units per minute late.\n\nThe landing sequence between any two aircraft is determined by binary variables, where a value of 1 indicates that one aircraft lands before the other. The constraints ensure that the landing times respect the sequence and separation requirements. For example, if aircraft_0 lands before aircraft_1, there must be at least 4 minutes of separation, but if aircraft_1 lands before aircraft_0, the required separation is 21 minutes. Similarly, if aircraft_0 lands before aircraft_2, the separation must be at least 12 minutes, but if aircraft_2 lands before aircraft_0, the separation must be at least 126 minutes. For aircraft_1 and aircraft_2, the separation is at least 13 minutes if aircraft_1 lands first, and at least 87 minutes if aircraft_2 lands first.\n\nThe objective is to minimize the total penalty costs, which include the penalties for early and late landings for all three aircraft. The constraints ensure that each aircraft lands within its specified time window, the landing sequence respects the separation requirements, and the binary variables enforce the correct sequence between aircraft pairs. The penalties for early or late landings are calculated based on the deviation from the target landing times, which are implicitly defined by the constraints on the landing times and the penalties. Specifically, the constraints ensure that the landing time of aircraft_0 plus the early penalty for aircraft_0 is at least 49 minutes, and the landing time of aircraft_0 minus the late penalty for aircraft_0 is at most 49 minutes. Similarly, the landing time of aircraft_1 plus the early penalty for aircraft_1 is at least 88 minutes, and the landing time of aircraft_1 minus the late penalty for aircraft_1 is at most 88 minutes. For aircraft_2, the landing time plus the early penalty is at least 235 minutes, and the landing time minus the late penalty is at most 235 minutes. These constraints ensure that the penalties are correctly calculated based on the deviation from the target landing times.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 18,
    "description": "The problem involves scheduling the landing times of three aircraft (aircraft_0, aircraft_1, and aircraft_2) to minimize the total penalty costs associated with deviations from their target landing times. Each aircraft has specific time windows within which it must land: aircraft_0 must land between 19 and 79 minutes, aircraft_1 between 58 and 118 minutes, and aircraft_2 between 205 and 265 minutes. The penalties for landing early or late are as follows: aircraft_0 incurs a penalty of 58 units per minute early and 57 units per minute late, aircraft_1 incurs 25 units per minute early and 61 units per minute late, and aircraft_2 incurs 37 units per minute early and 70 units per minute late.\n\nThe landing sequence between any two aircraft is determined by binary variables, where a value of 1 indicates that one aircraft lands before the other. The constraints ensure that the landing times respect the sequence and separation requirements. For example, if aircraft_0 lands before aircraft_1, there must be at least 4 minutes of separation, but if aircraft_1 lands before aircraft_0, the required separation is 21 minutes. Similarly, if aircraft_0 lands before aircraft_2, the separation must be at least 12 minutes, but if aircraft_2 lands before aircraft_0, the separation must be at least 126 minutes. For aircraft_1 and aircraft_2, the separation is at least 13 minutes if aircraft_1 lands first, and at least 87 minutes if aircraft_2 lands first.\n\nThe objective is to minimize the total penalty costs, which include the penalties for early and late landings for all three aircraft. The constraints ensure that each aircraft lands within its specified time window, the landing sequence respects the separation requirements, and the binary variables enforce the correct sequence between aircraft pairs. The penalties for early or late landings are calculated based on the deviation from the target landing times, which are implicitly defined by the constraints on the landing times and the penalties. Specifically, the constraints ensure that the landing time of aircraft_0 plus the early penalty for aircraft_0 is at least 49 minutes, and the landing time of aircraft_0 minus the late penalty for aircraft_0 is at most 49 minutes. Similarly, the landing time of aircraft_1 plus the early penalty for aircraft_1 is at least 88 minutes, and the landing time of aircraft_1 minus the late penalty for aircraft_1 is at most 88 minutes. For aircraft_2, the landing time plus the early penalty is at least 235 minutes, and the landing time minus the late penalty is at most 235 minutes. These constraints ensure that the penalties are correctly calculated based on the deviation from the target landing times.",
    "ground_truth": 0
  },
  {
    "question": "The problem involves scheduling the landing times of five aircraft to minimize the total penalty costs associated with deviations from their target landing times, while ensuring that each aircraft lands within its specified time window and that the required separation times between consecutive landings are maintained. Each aircraft has a target landing time, an earliest possible landing time, and a latest possible landing time. Aircraft 0 must land between 178 and 238, aircraft 1 between 35 and 95, aircraft 2 between 266 and 300, aircraft 3 between 0 and 40, and aircraft 4 between 69 and 129. Penalties are incurred for landing early or late, with specific costs per unit time for each aircraft: aircraft 0 has an early penalty of 62 and a late penalty of 82, aircraft 1 has an early penalty of 10 and a late penalty of 65, aircraft 2 has an early penalty of 89 and a late penalty of 72, aircraft 3 has an early penalty of 81 and a late penalty of 69, and aircraft 4 has an early penalty of 50 and a late penalty of 42. The separation requirements between aircraft depend on the order in which they land, and these requirements are enforced using binary decision variables that determine the landing sequence. The separation times are as follows: between aircraft 0 and 1, the required separation is 203 if 0 lands before 1 and 3 if 1 lands before 0; between aircraft 0 and 2, the required separation is 2 if 0 lands before 2 and 28 if 2 lands before 0; between aircraft 0 and 3, the required separation is 4 if 0 lands before 3 and 238 if 3 lands before 0; between aircraft 0 and 4, the required separation is 5 if 0 lands before 4 and 169 if 4 lands before 0; between aircraft 1 and 2, the required separation is 3 if 1 lands before 2 and 171 if 2 lands before 1; between aircraft 1 and 3, the required separation is 2 if 1 lands before 3 and 95 if 3 lands before 1; between aircraft 1 and 4, the required separation is 4 if 1 lands before 4 and 26 if 4 lands before 1; between aircraft 2 and 3, the required separation is 5 if 2 lands before 3 and 300 if 3 lands before 2; between aircraft 2 and 4, the required separation is 2 if 2 lands before 4 and 231 if 4 lands before 2; between aircraft 3 and 4, the required separation is 5 if 3 lands before 4 and 29 if 4 lands before 3. The objective is to minimize the sum of the penalties for early and late landings across all aircraft. The constraints include ensuring that each aircraft lands within its time window, enforcing the separation times based on the landing order, and calculating the penalties for deviations from the target landing times. The binary decision variables ensure that only one of the two possible orders between any pair of aircraft is chosen, and the separation constraints are applied accordingly. The landing times must also satisfy bounds that are specific to each aircraft. The penalties are calculated based on the difference between the actual landing time and the target landing time, with separate variables for early and late deviations. The goal is to find the optimal landing times and sequence that minimize the total penalty costs while satisfying all constraints.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 19,
    "description": "The problem involves scheduling the landing times of five aircraft to minimize the total penalty costs associated with deviations from their target landing times, while ensuring that each aircraft lands within its specified time window and that the required separation times between consecutive landings are maintained. Each aircraft has a target landing time, an earliest possible landing time, and a latest possible landing time. Aircraft 0 must land between 178 and 238, aircraft 1 between 35 and 95, aircraft 2 between 266 and 300, aircraft 3 between 0 and 40, and aircraft 4 between 69 and 129. Penalties are incurred for landing early or late, with specific costs per unit time for each aircraft: aircraft 0 has an early penalty of 62 and a late penalty of 82, aircraft 1 has an early penalty of 10 and a late penalty of 65, aircraft 2 has an early penalty of 89 and a late penalty of 72, aircraft 3 has an early penalty of 81 and a late penalty of 69, and aircraft 4 has an early penalty of 50 and a late penalty of 42. The separation requirements between aircraft depend on the order in which they land, and these requirements are enforced using binary decision variables that determine the landing sequence. The separation times are as follows: between aircraft 0 and 1, the required separation is 203 if 0 lands before 1 and 3 if 1 lands before 0; between aircraft 0 and 2, the required separation is 2 if 0 lands before 2 and 28 if 2 lands before 0; between aircraft 0 and 3, the required separation is 4 if 0 lands before 3 and 238 if 3 lands before 0; between aircraft 0 and 4, the required separation is 5 if 0 lands before 4 and 169 if 4 lands before 0; between aircraft 1 and 2, the required separation is 3 if 1 lands before 2 and 171 if 2 lands before 1; between aircraft 1 and 3, the required separation is 2 if 1 lands before 3 and 95 if 3 lands before 1; between aircraft 1 and 4, the required separation is 4 if 1 lands before 4 and 26 if 4 lands before 1; between aircraft 2 and 3, the required separation is 5 if 2 lands before 3 and 300 if 3 lands before 2; between aircraft 2 and 4, the required separation is 2 if 2 lands before 4 and 231 if 4 lands before 2; between aircraft 3 and 4, the required separation is 5 if 3 lands before 4 and 29 if 4 lands before 3. The objective is to minimize the sum of the penalties for early and late landings across all aircraft. The constraints include ensuring that each aircraft lands within its time window, enforcing the separation times based on the landing order, and calculating the penalties for deviations from the target landing times. The binary decision variables ensure that only one of the two possible orders between any pair of aircraft is chosen, and the separation constraints are applied accordingly. The landing times must also satisfy bounds that are specific to each aircraft. The penalties are calculated based on the difference between the actual landing time and the target landing time, with separate variables for early and late deviations. The goal is to find the optimal landing times and sequence that minimize the total penalty costs while satisfying all constraints.",
    "ground_truth": 0
  },
  {
    "question": "There are six jobs, each with a specific sequence of operations that must be performed on shared machines to complete their tasks. The goal is to schedule these operations to minimize the total time (makespan) required to complete all jobs. Each job has a predefined sequence of operations with specific processing times. Job 0 has two operations: the first takes 1 unit of time, and the second takes 6 units. Job 1 has two operations: the first takes 4 units, and the second takes 2 units. Job 2 has three operations: the first takes 9 units, the second takes 2 units, and the third takes 2 units. Job 3 has four operations: the first takes 5 units, the second takes 7 units, the third takes 6 units, and the fourth takes 3 units. Job 4 has four operations: the first takes 2 units, the second takes 9 units, the third takes 8 units, and the fourth takes 7 units. Job 5 has two operations: the first takes 4 units, and the second takes 8 units.\n\nOperations from different jobs may share the same machine, and the order in which they are processed must be determined. For example, the second operation of Job 0 and the fourth operation of Job 3 share a machine. If Job 0’s second operation starts first, it must finish before Job 3’s fourth operation begins, or vice versa. Similarly, the second operation of Job 1 and the second operation of Job 2 share a machine. If Job 1’s second operation starts first, it must finish before Job 2’s second operation begins, or vice versa.\n\nEach job’s operations must be performed in a specific order. For Job 0, the second operation cannot start until the first operation is completed. For Job 1, the second operation cannot start until the first operation is completed. For Job 2, the second operation cannot start until the first operation is completed, and the third operation cannot start until the second operation is completed. For Job 3, the second operation cannot start until the first operation is completed, the third operation cannot start until the second operation is completed, and the fourth operation cannot start until the third operation is completed. For Job 4, the second operation cannot start until the first operation is completed, the third operation cannot start until the second operation is completed, and the fourth operation cannot start until the third operation is completed. For Job 5, the second operation cannot start until the first operation is completed.\n\nThe objective is to minimize the total time (makespan) required to complete all operations for all jobs. The makespan is determined by the latest completion time among all operations. The constraints include precedence constraints, which ensure that each operation starts only after its preceding operation in the same job’s sequence is completed. For example, Job 0’s second operation must start at least 1 unit of time after the first operation starts. Job 1’s second operation must start at least 4 units of time after the first operation starts. Job 2’s second operation must start at least 9 units of time after the first operation starts, and the third operation must start at least 2 units of time after the second operation starts. Job 3’s second operation must start at least 5 units of time after the first operation starts, the third operation must start at least 7 units of time after the second operation starts, and the fourth operation must start at least 6 units of time after the third operation starts. Job 4’s second operation must start at least 2 units of time after the first operation starts, the third operation must start at least 9 units of time after the second operation starts, and the fourth operation must start at least 8 units of time after the third operation starts. Job 5’s second operation must start at least 4 units of time after the first operation starts.\n\nMachine capacity constraints ensure that operations sharing the same machine do not overlap. For example, if Job 0’s second operation starts first on a shared machine, it must finish before Job 3’s fourth operation begins, or vice versa. A large constant (100,000) is used to enforce the order of operations on shared machines. Non-negativity constraints ensure that all operation start times are non-negative. Binary decision variables determine the order of operations on shared machines.\n\nThe processing times for each operation are fixed and provided. The precedence constraints specify the minimum time gaps between operations. The machine capacity constraints ensure that operations on shared machines do not overlap. The decisions to be made include determining the start time for each operation for all jobs, deciding the order of operations on shared machines using binary variables, and ensuring that all constraints are satisfied while minimizing the total makespan. The objective is to minimize the total time (makespan) required to complete all operations for all jobs, ensuring that all precedence and machine capacity constraints are met.",
    "answer": 29,
    "ori": "13_optmath_bench",
    "index": 20,
    "description": "There are six jobs, each with a specific sequence of operations that must be performed on shared machines to complete their tasks. The goal is to schedule these operations to minimize the total time (makespan) required to complete all jobs. Each job has a predefined sequence of operations with specific processing times. Job 0 has two operations: the first takes 1 unit of time, and the second takes 6 units. Job 1 has two operations: the first takes 4 units, and the second takes 2 units. Job 2 has three operations: the first takes 9 units, the second takes 2 units, and the third takes 2 units. Job 3 has four operations: the first takes 5 units, the second takes 7 units, the third takes 6 units, and the fourth takes 3 units. Job 4 has four operations: the first takes 2 units, the second takes 9 units, the third takes 8 units, and the fourth takes 7 units. Job 5 has two operations: the first takes 4 units, and the second takes 8 units.\n\nOperations from different jobs may share the same machine, and the order in which they are processed must be determined. For example, the second operation of Job 0 and the fourth operation of Job 3 share a machine. If Job 0’s second operation starts first, it must finish before Job 3’s fourth operation begins, or vice versa. Similarly, the second operation of Job 1 and the second operation of Job 2 share a machine. If Job 1’s second operation starts first, it must finish before Job 2’s second operation begins, or vice versa.\n\nEach job’s operations must be performed in a specific order. For Job 0, the second operation cannot start until the first operation is completed. For Job 1, the second operation cannot start until the first operation is completed. For Job 2, the second operation cannot start until the first operation is completed, and the third operation cannot start until the second operation is completed. For Job 3, the second operation cannot start until the first operation is completed, the third operation cannot start until the second operation is completed, and the fourth operation cannot start until the third operation is completed. For Job 4, the second operation cannot start until the first operation is completed, the third operation cannot start until the second operation is completed, and the fourth operation cannot start until the third operation is completed. For Job 5, the second operation cannot start until the first operation is completed.\n\nThe objective is to minimize the total time (makespan) required to complete all operations for all jobs. The makespan is determined by the latest completion time among all operations. The constraints include precedence constraints, which ensure that each operation starts only after its preceding operation in the same job’s sequence is completed. For example, Job 0’s second operation must start at least 1 unit of time after the first operation starts. Job 1’s second operation must start at least 4 units of time after the first operation starts. Job 2’s second operation must start at least 9 units of time after the first operation starts, and the third operation must start at least 2 units of time after the second operation starts. Job 3’s second operation must start at least 5 units of time after the first operation starts, the third operation must start at least 7 units of time after the second operation starts, and the fourth operation must start at least 6 units of time after the third operation starts. Job 4’s second operation must start at least 2 units of time after the first operation starts, the third operation must start at least 9 units of time after the second operation starts, and the fourth operation must start at least 8 units of time after the third operation starts. Job 5’s second operation must start at least 4 units of time after the first operation starts.\n\nMachine capacity constraints ensure that operations sharing the same machine do not overlap. For example, if Job 0’s second operation starts first on a shared machine, it must finish before Job 3’s fourth operation begins, or vice versa. A large constant (100,000) is used to enforce the order of operations on shared machines. Non-negativity constraints ensure that all operation start times are non-negative. Binary decision variables determine the order of operations on shared machines.\n\nThe processing times for each operation are fixed and provided. The precedence constraints specify the minimum time gaps between operations. The machine capacity constraints ensure that operations on shared machines do not overlap. The decisions to be made include determining the start time for each operation for all jobs, deciding the order of operations on shared machines using binary variables, and ensuring that all constraints are satisfied while minimizing the total makespan. The objective is to minimize the total time (makespan) required to complete all operations for all jobs, ensuring that all precedence and machine capacity constraints are met.",
    "ground_truth": 29
  },
  {
    "question": "The manufacturing facility produces custom parts for two jobs, Job 0 and Job 1, each consisting of operations performed on shared machines. The goal is to minimize the total completion time (makespan) by scheduling operations efficiently while respecting constraints.\n\nJob 0 has three operations: Operation 0 takes 2 hours, Operation 1 takes 8 hours, and Operation 2 takes 5 hours. Job 1 has two operations: Operation 0 takes 1 hour, and Operation 1 takes 7 hours.\n\nFor Job 0, Operation 1 cannot start until Operation 0 has finished, with at least 2 hours between the finish of Operation 0 and the start of Operation 1. Operation 2 cannot start until Operation 1 has finished, with at least 8 hours between the finish of Operation 1 and the start of Operation 2.\n\nFor Job 1, Operation 1 cannot start until Operation 0 has finished, with at least 1 hour between the finish of Operation 0 and the start of Operation 1.\n\nOperations on shared machines cannot overlap. If Operation 0 of Job 1 is scheduled before Operation 1 of Job 1, there must be at least 1 hour between the finish of Operation 0 and the start of Operation 1. If Operation 1 of Job 1 is scheduled before Operation 0 of Job 1, there must be at least 7 hours between the finish of Operation 1 and the start of Operation 0.\n\nFor Job 0, if Operation 0 is scheduled before Operation 1, there must be at least 8 hours between the finish of Operation 0 and the start of Operation 1. If Operation 0 is scheduled before Operation 2, there must be at least 5 hours between the finish of Operation 0 and the start of Operation 2. If Operation 1 is scheduled before Operation 2, there must be at least 5 hours between the finish of Operation 1 and the start of Operation 2.\n\nThe makespan must be at least as large as the completion time of every operation: Operation 0 of Job 0 contributes at least 2 hours, Operation 1 of Job 0 contributes at least 8 hours, Operation 2 of Job 0 contributes at least 5 hours, Operation 0 of Job 1 contributes at least 1 hour, and Operation 1 of Job 1 contributes at least 7 hours.\n\nBinary variables determine the order of operations on shared machines, ensuring no overlap. The objective is to determine the start times for all operations and their processing order on shared machines to minimize the makespan while satisfying all constraints.",
    "answer": 15,
    "ori": "13_optmath_bench",
    "index": 21,
    "description": "The manufacturing facility produces custom parts for two jobs, Job 0 and Job 1, each consisting of operations performed on shared machines. The goal is to minimize the total completion time (makespan) by scheduling operations efficiently while respecting constraints.\n\nJob 0 has three operations: Operation 0 takes 2 hours, Operation 1 takes 8 hours, and Operation 2 takes 5 hours. Job 1 has two operations: Operation 0 takes 1 hour, and Operation 1 takes 7 hours.\n\nFor Job 0, Operation 1 cannot start until Operation 0 has finished, with at least 2 hours between the finish of Operation 0 and the start of Operation 1. Operation 2 cannot start until Operation 1 has finished, with at least 8 hours between the finish of Operation 1 and the start of Operation 2.\n\nFor Job 1, Operation 1 cannot start until Operation 0 has finished, with at least 1 hour between the finish of Operation 0 and the start of Operation 1.\n\nOperations on shared machines cannot overlap. If Operation 0 of Job 1 is scheduled before Operation 1 of Job 1, there must be at least 1 hour between the finish of Operation 0 and the start of Operation 1. If Operation 1 of Job 1 is scheduled before Operation 0 of Job 1, there must be at least 7 hours between the finish of Operation 1 and the start of Operation 0.\n\nFor Job 0, if Operation 0 is scheduled before Operation 1, there must be at least 8 hours between the finish of Operation 0 and the start of Operation 1. If Operation 0 is scheduled before Operation 2, there must be at least 5 hours between the finish of Operation 0 and the start of Operation 2. If Operation 1 is scheduled before Operation 2, there must be at least 5 hours between the finish of Operation 1 and the start of Operation 2.\n\nThe makespan must be at least as large as the completion time of every operation: Operation 0 of Job 0 contributes at least 2 hours, Operation 1 of Job 0 contributes at least 8 hours, Operation 2 of Job 0 contributes at least 5 hours, Operation 0 of Job 1 contributes at least 1 hour, and Operation 1 of Job 1 contributes at least 7 hours.\n\nBinary variables determine the order of operations on shared machines, ensuring no overlap. The objective is to determine the start times for all operations and their processing order on shared machines to minimize the makespan while satisfying all constraints.",
    "ground_truth": 15
  },
  {
    "question": "The problem involves scheduling operations for three jobs (Job 0, Job 1, and Job 2) on a set of machines in a manufacturing facility to minimize the total completion time (makespan). Each job consists of a sequence of operations with specific processing times. Job 0 has 5 operations with processing times of 7, 9, 8, 3, and 9 hours. Job 1 has 6 operations with processing times of 1, 3, 4, 1, 2, and 9 hours. Job 2 has 7 operations with processing times of 9, 3, 1, 3, 3, 3, and 5 hours. Each operation must start only after the previous operation in the same job has been completed. For example, Operation 1 of Job 0 cannot start until Operation 0 has been completed (7 hours), and Operation 1 of Job 1 cannot start until Operation 0 has been completed (1 hour). Operations from different jobs that require the same machine must be scheduled in a specific order to avoid overlapping. Binary decision variables determine the order of operations on shared machines. For instance, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1, the binary variable is set to 1; otherwise, it is set to 0. A large constant (100,000) is used in the constraints to ensure they are only active when necessary. The makespan must be at least as long as the completion time of the last operation across all jobs. The start times for all operations must be non-negative, and the objective is to minimize the makespan while satisfying all precedence and machine capacity constraints. Specifically, the constraints include precedence constraints within each job, machine capacity constraints to prevent overlapping operations on the same machine, and makespan constraints to ensure the makespan is at least as large as the completion time of every operation. The binary variables are used to enforce the order of operations on shared machines, and the large constant ensures the constraints are only active when necessary. The start times and the makespan are continuous variables, and the binary variables are restricted to 0 or 1. The machine capacity constraints are formulated such that for each pair of operations assigned to the same machine, the start time of one operation plus its processing time must be less than or equal to the start time of the other operation plus the large constant multiplied by the complement of the binary variable. This ensures that the operations do not overlap on the same machine. The makespan constraints ensure that the makespan is at least as large as the completion time of every operation. The precedence constraints ensure that operations within the same job are scheduled in the correct order. The binary variables are used to determine the order of operations on shared machines, and the large constant is used to make the constraints active only when necessary. The start times for all operations must be non-negative, and the objective is to minimize the makespan while satisfying all constraints.",
    "answer": 36,
    "ori": "13_optmath_bench",
    "index": 22,
    "description": "The problem involves scheduling operations for three jobs (Job 0, Job 1, and Job 2) on a set of machines in a manufacturing facility to minimize the total completion time (makespan). Each job consists of a sequence of operations with specific processing times. Job 0 has 5 operations with processing times of 7, 9, 8, 3, and 9 hours. Job 1 has 6 operations with processing times of 1, 3, 4, 1, 2, and 9 hours. Job 2 has 7 operations with processing times of 9, 3, 1, 3, 3, 3, and 5 hours. Each operation must start only after the previous operation in the same job has been completed. For example, Operation 1 of Job 0 cannot start until Operation 0 has been completed (7 hours), and Operation 1 of Job 1 cannot start until Operation 0 has been completed (1 hour). Operations from different jobs that require the same machine must be scheduled in a specific order to avoid overlapping. Binary decision variables determine the order of operations on shared machines. For instance, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1, the binary variable is set to 1; otherwise, it is set to 0. A large constant (100,000) is used in the constraints to ensure they are only active when necessary. The makespan must be at least as long as the completion time of the last operation across all jobs. The start times for all operations must be non-negative, and the objective is to minimize the makespan while satisfying all precedence and machine capacity constraints. Specifically, the constraints include precedence constraints within each job, machine capacity constraints to prevent overlapping operations on the same machine, and makespan constraints to ensure the makespan is at least as large as the completion time of every operation. The binary variables are used to enforce the order of operations on shared machines, and the large constant ensures the constraints are only active when necessary. The start times and the makespan are continuous variables, and the binary variables are restricted to 0 or 1. The machine capacity constraints are formulated such that for each pair of operations assigned to the same machine, the start time of one operation plus its processing time must be less than or equal to the start time of the other operation plus the large constant multiplied by the complement of the binary variable. This ensures that the operations do not overlap on the same machine. The makespan constraints ensure that the makespan is at least as large as the completion time of every operation. The precedence constraints ensure that operations within the same job are scheduled in the correct order. The binary variables are used to determine the order of operations on shared machines, and the large constant is used to make the constraints active only when necessary. The start times for all operations must be non-negative, and the objective is to minimize the makespan while satisfying all constraints.",
    "ground_truth": 36
  },
  {
    "question": "The problem involves scheduling four jobs (Job 0, Job 1, Job 2, and Job 3) across multiple machines to minimize the total completion time (makespan). Each job consists of a sequence of operations that must be performed in a specific order, and each operation is assigned to a particular machine. The processing times for each operation are as follows: Job 0 has Operation 0 (6 units), Operation 1 (8 units), and Operation 2 (9 units); Job 1 has Operation 0 (3 units), Operation 1 (8 units), Operation 2 (5 units), Operation 3 (5 units), and Operation 4 (2 units); Job 2 has Operation 0 (8 units), Operation 1 (1 unit), and Operation 2 (6 units); Job 3 has Operation 0 (1 unit), Operation 1 (9 units), Operation 2 (4 units), and Operation 3 (5 units).\n\nEach machine can process only one operation at a time. If two operations are assigned to the same machine, they cannot overlap in time. The order of operations on the same machine is determined by binary decision variables. For example, if Operation 0 of Job 0 and Operation 3 of Job 1 are on the same machine, the binary variable determines whether Operation 0 of Job 0 is processed before Operation 3 of Job 1 or vice versa. Similar constraints apply to other operation pairs on the same machine, such as Operation 2 of Job 1 and Operation 4 of Job 1, Operation 2 of Job 0 and Operation 0 of Job 2, Operation 2 of Job 0 and Operation 3 of Job 3, Operation 0 of Job 2 and Operation 3 of Job 3, Operation 0 of Job 1 and Operation 1 of Job 2, Operation 0 of Job 1 and Operation 2 of Job 3, and Operation 1 of Job 2 and Operation 2 of Job 3.\n\nThe objective is to minimize the makespan, which must be at least as large as the completion time of every operation. For example, the completion time of Operation 0 of Job 0 is at least 6 units, so the makespan must be at least 6 units. Similarly, the completion time of Operation 1 of Job 0 is at least 8 units, so the makespan must be at least 8 units. This applies to all operations, with the final operation of Job 3 requiring at least 5 units.\n\nConstraints include precedence constraints within jobs, ensuring that each operation starts only after the previous operation in the same job has completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has completed, which takes at least 6 units. Machine capacity constraints ensure that operations assigned to the same machine do not overlap, with binary variables determining the order of operations on the same machine. The makespan must be at least as large as the completion time of every operation, and all start times for operations must be non-negative. Binary variables must be either 0 or 1, determining the order of operations on the same machine.\n\nThe goal is to find the optimal schedule that meets all these constraints while minimizing the total time required to complete all jobs.",
    "answer": 28,
    "ori": "13_optmath_bench",
    "index": 23,
    "description": "The problem involves scheduling four jobs (Job 0, Job 1, Job 2, and Job 3) across multiple machines to minimize the total completion time (makespan). Each job consists of a sequence of operations that must be performed in a specific order, and each operation is assigned to a particular machine. The processing times for each operation are as follows: Job 0 has Operation 0 (6 units), Operation 1 (8 units), and Operation 2 (9 units); Job 1 has Operation 0 (3 units), Operation 1 (8 units), Operation 2 (5 units), Operation 3 (5 units), and Operation 4 (2 units); Job 2 has Operation 0 (8 units), Operation 1 (1 unit), and Operation 2 (6 units); Job 3 has Operation 0 (1 unit), Operation 1 (9 units), Operation 2 (4 units), and Operation 3 (5 units).\n\nEach machine can process only one operation at a time. If two operations are assigned to the same machine, they cannot overlap in time. The order of operations on the same machine is determined by binary decision variables. For example, if Operation 0 of Job 0 and Operation 3 of Job 1 are on the same machine, the binary variable determines whether Operation 0 of Job 0 is processed before Operation 3 of Job 1 or vice versa. Similar constraints apply to other operation pairs on the same machine, such as Operation 2 of Job 1 and Operation 4 of Job 1, Operation 2 of Job 0 and Operation 0 of Job 2, Operation 2 of Job 0 and Operation 3 of Job 3, Operation 0 of Job 2 and Operation 3 of Job 3, Operation 0 of Job 1 and Operation 1 of Job 2, Operation 0 of Job 1 and Operation 2 of Job 3, and Operation 1 of Job 2 and Operation 2 of Job 3.\n\nThe objective is to minimize the makespan, which must be at least as large as the completion time of every operation. For example, the completion time of Operation 0 of Job 0 is at least 6 units, so the makespan must be at least 6 units. Similarly, the completion time of Operation 1 of Job 0 is at least 8 units, so the makespan must be at least 8 units. This applies to all operations, with the final operation of Job 3 requiring at least 5 units.\n\nConstraints include precedence constraints within jobs, ensuring that each operation starts only after the previous operation in the same job has completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has completed, which takes at least 6 units. Machine capacity constraints ensure that operations assigned to the same machine do not overlap, with binary variables determining the order of operations on the same machine. The makespan must be at least as large as the completion time of every operation, and all start times for operations must be non-negative. Binary variables must be either 0 or 1, determining the order of operations on the same machine.\n\nThe goal is to find the optimal schedule that meets all these constraints while minimizing the total time required to complete all jobs.",
    "ground_truth": 28
  },
  {
    "question": "Imagine you are managing a supply chain network for a company that operates across six key locations (nodes). Each location has specific supply and demand requirements, and your goal is to optimize the flow of goods between these locations while minimizing the total cost, which includes both fixed costs for establishing connections and variable costs for shipping goods.\n\n#### Supply and Demand:\n- **Location 0** has a demand of 116 units.\n- **Location 1** has a demand of 134 units.\n- **Location 2** has no net supply or demand (balance is 0).\n- **Location 3** has a demand of 141 units.\n- **Location 4** has a demand of 8 units.\n- **Location 5** has a demand of 101 units.\n\n#### Costs and Capacities:\nTo establish a connection between any two locations, there is a fixed cost. Additionally, shipping goods between locations incurs a variable cost per unit. Each connection also has a maximum capacity, limiting the amount of goods that can be shipped.\n\nHere are the specific costs and capacities for each possible connection:\n\n- **Fixed Costs (for establishing connections):**\n  - From Location 0: To Location 1 costs 1972, to Location 2 costs 2030, to Location 3 costs 2048, to Location 4 costs 1951, to Location 5 costs 2043.\n  - From Location 1: To Location 0 costs 1993, to Location 2 costs 2029, to Location 3 costs 1975, to Location 4 costs 1967, to Location 5 costs 2026.\n  - From Location 2: To Location 0 costs 2042, to Location 1 costs 1973, to Location 3 costs 2001, to Location 4 costs 2034, to Location 5 costs 2035.\n  - From Location 3: To Location 0 costs 2007, to Location 1 costs 1968, to Location 2 costs 2004, to Location 4 costs 1996, to Location 5 costs 1969.\n  - From Location 4: To Location 0 costs 1973, to Location 1 costs 1955, to Location 2 costs 2038, to Location 3 costs 1953, to Location 5 costs 2000.\n  - From Location 5: To Location 0 costs 1999, to Location 1 costs 2031, to Location 2 costs 2011, to Location 3 costs 1965, to Location 4 costs 1984.\n\n- **Variable Costs (per unit shipped):**\n  - From Location 0: To Location 1 costs 21, to Location 2 costs 19, to Location 3 costs 20, to Location 4 costs 21, to Location 5 costs 21.\n  - From Location 1: To Location 0 costs 21, to Location 2 costs 19, to Location 3 costs 21, to Location 4 costs 19, to Location 5 costs 20.\n  - From Location 2: To Location 0 costs 20, to Location 1 costs 20, to Location 3 costs 21, to Location 4 costs 21, to Location 5 costs 20.\n  - From Location 3: To Location 0 costs 19, to Location 1 costs 19, to Location 2 costs 20, to Location 4 costs 19, to Location 5 costs 20.\n  - From Location 4: To Location 0 costs 20, to Location 1 costs 19, to Location 2 costs 20, to Location 3 costs 20, to Location 5 costs 19.\n  - From Location 5: To Location 0 costs 21, to Location 1 costs 20, to Location 2 costs 20, to Location 3 costs 19, to Location 4 costs 21.\n\n- **Maximum Capacities (units that can be shipped):**\n  - From Location 0: To Location 1 can handle up to 137 units, to Location 2 up to 154 units, to Location 3 up to 189 units, to Location 4 up to 188 units, to Location 5 up to 247 units.\n  - From Location 1: To Location 0 up to 163 units, to Location 2 up to 197 units, to Location 3 up to 242 units, to Location 4 up to 191 units, to Location 5 up to 135 units.\n  - From Location 2: To Location 0 up to 226 units, to Location 1 up to 155 units, to Location 3 up to 182 units, to Location 4 up to 189 units, to Location 5 up to 160 units.\n  - From Location 3: To Location 0 up to 179 units, to Location 1 up to 232 units, to Location 2 up to 210 units, to Location 4 up to 146 units, to Location 5 up to 241 units.\n  - From Location 4: To Location 0 up to 238 units, to Location 1 up to 164 units, to Location 2 up to 238 units, to Location 3 up to 218 units, to Location 5 up to 195 units.\n  - From Location 5: To Location 0 up to 237 units, to Location 1 up to 191 units, to Location 2 up to 165 units, to Location 3 up to 133 units, to Location 4 up to 191 units.\n\n#### Objective:\nYour task is to determine which connections to establish and how much to ship between locations to meet all demand requirements while minimizing the total cost. The total cost includes both the fixed costs of establishing connections and the variable costs of shipping goods.\n\n#### Constraints:\n1. **Capacity Constraints:** The amount of goods shipped between any two locations cannot exceed the maximum capacity of that connection.\n2. **Flow Balance:** The total amount of goods entering a location minus the total amount leaving must equal the net supply or demand at that location.\n3. **Binary Decisions:** For each connection, you must decide whether to establish it (yes or no), which incurs the fixed cost.\n\nBy carefully analyzing these factors, you aim to find the most cost-effective way to manage the supply chain network, ensuring all locations receive the goods they need without exceeding capacity limits or incurring unnecessary costs.",
    "answer": 13033,
    "ori": "13_optmath_bench",
    "index": 24,
    "description": "Imagine you are managing a supply chain network for a company that operates across six key locations (nodes). Each location has specific supply and demand requirements, and your goal is to optimize the flow of goods between these locations while minimizing the total cost, which includes both fixed costs for establishing connections and variable costs for shipping goods.\n\n#### Supply and Demand:\n- **Location 0** has a demand of 116 units.\n- **Location 1** has a demand of 134 units.\n- **Location 2** has no net supply or demand (balance is 0).\n- **Location 3** has a demand of 141 units.\n- **Location 4** has a demand of 8 units.\n- **Location 5** has a demand of 101 units.\n\n#### Costs and Capacities:\nTo establish a connection between any two locations, there is a fixed cost. Additionally, shipping goods between locations incurs a variable cost per unit. Each connection also has a maximum capacity, limiting the amount of goods that can be shipped.\n\nHere are the specific costs and capacities for each possible connection:\n\n- **Fixed Costs (for establishing connections):**\n  - From Location 0: To Location 1 costs 1972, to Location 2 costs 2030, to Location 3 costs 2048, to Location 4 costs 1951, to Location 5 costs 2043.\n  - From Location 1: To Location 0 costs 1993, to Location 2 costs 2029, to Location 3 costs 1975, to Location 4 costs 1967, to Location 5 costs 2026.\n  - From Location 2: To Location 0 costs 2042, to Location 1 costs 1973, to Location 3 costs 2001, to Location 4 costs 2034, to Location 5 costs 2035.\n  - From Location 3: To Location 0 costs 2007, to Location 1 costs 1968, to Location 2 costs 2004, to Location 4 costs 1996, to Location 5 costs 1969.\n  - From Location 4: To Location 0 costs 1973, to Location 1 costs 1955, to Location 2 costs 2038, to Location 3 costs 1953, to Location 5 costs 2000.\n  - From Location 5: To Location 0 costs 1999, to Location 1 costs 2031, to Location 2 costs 2011, to Location 3 costs 1965, to Location 4 costs 1984.\n\n- **Variable Costs (per unit shipped):**\n  - From Location 0: To Location 1 costs 21, to Location 2 costs 19, to Location 3 costs 20, to Location 4 costs 21, to Location 5 costs 21.\n  - From Location 1: To Location 0 costs 21, to Location 2 costs 19, to Location 3 costs 21, to Location 4 costs 19, to Location 5 costs 20.\n  - From Location 2: To Location 0 costs 20, to Location 1 costs 20, to Location 3 costs 21, to Location 4 costs 21, to Location 5 costs 20.\n  - From Location 3: To Location 0 costs 19, to Location 1 costs 19, to Location 2 costs 20, to Location 4 costs 19, to Location 5 costs 20.\n  - From Location 4: To Location 0 costs 20, to Location 1 costs 19, to Location 2 costs 20, to Location 3 costs 20, to Location 5 costs 19.\n  - From Location 5: To Location 0 costs 21, to Location 1 costs 20, to Location 2 costs 20, to Location 3 costs 19, to Location 4 costs 21.\n\n- **Maximum Capacities (units that can be shipped):**\n  - From Location 0: To Location 1 can handle up to 137 units, to Location 2 up to 154 units, to Location 3 up to 189 units, to Location 4 up to 188 units, to Location 5 up to 247 units.\n  - From Location 1: To Location 0 up to 163 units, to Location 2 up to 197 units, to Location 3 up to 242 units, to Location 4 up to 191 units, to Location 5 up to 135 units.\n  - From Location 2: To Location 0 up to 226 units, to Location 1 up to 155 units, to Location 3 up to 182 units, to Location 4 up to 189 units, to Location 5 up to 160 units.\n  - From Location 3: To Location 0 up to 179 units, to Location 1 up to 232 units, to Location 2 up to 210 units, to Location 4 up to 146 units, to Location 5 up to 241 units.\n  - From Location 4: To Location 0 up to 238 units, to Location 1 up to 164 units, to Location 2 up to 238 units, to Location 3 up to 218 units, to Location 5 up to 195 units.\n  - From Location 5: To Location 0 up to 237 units, to Location 1 up to 191 units, to Location 2 up to 165 units, to Location 3 up to 133 units, to Location 4 up to 191 units.\n\n#### Objective:\nYour task is to determine which connections to establish and how much to ship between locations to meet all demand requirements while minimizing the total cost. The total cost includes both the fixed costs of establishing connections and the variable costs of shipping goods.\n\n#### Constraints:\n1. **Capacity Constraints:** The amount of goods shipped between any two locations cannot exceed the maximum capacity of that connection.\n2. **Flow Balance:** The total amount of goods entering a location minus the total amount leaving must equal the net supply or demand at that location.\n3. **Binary Decisions:** For each connection, you must decide whether to establish it (yes or no), which incurs the fixed cost.\n\nBy carefully analyzing these factors, you aim to find the most cost-effective way to manage the supply chain network, ensuring all locations receive the goods they need without exceeding capacity limits or incurring unnecessary costs.",
    "ground_truth": 13033
  },
  {
    "question": "You are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 33 distinct areas, each with a specific population size that needs to be covered by cell tower signals. The goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\nFor each of the 29 available cell tower locations (tower_0 to tower_28), you must decide whether to build the tower (a binary decision: build or not build). For each of the 33 regions (region_0 to region_32), you must decide whether the region will be covered by at least one active cell tower (a binary decision: cover or not cover).\n\nThe objective is to maximize the total population covered by the deployed cell towers. The population sizes for the regions are as follows: Region 0: 4,901; Region 1: 2,727; Region 2: 2,994; Region 3: 2,984; Region 4: 3,693; Region 5: 2,615; Region 6: 3,354; Region 7: 4,965; Region 8: 4,223; Region 9: 4,738; Region 10: 2,345; Region 11: 3,915; Region 12: 4,068; Region 13: 2,613; Region 14: 3,140; Region 15: 4,894; Region 16: 3,503; Region 17: 3,733; Region 18: 4,275; Region 19: 3,795; Region 20: 3,803; Region 21: 3,497; Region 22: 2,403; Region 23: 3,441; Region 24: 3,116; Region 25: 2,091; Region 26: 4,494; Region 27: 3,593; Region 28: 2,090; Region 29: 3,397; Region 30: 3,973; Region 31: 2,362; Region 32: 2,068.\n\nEach region can only be considered covered if at least one of the cell towers that can serve it is built. For example, Region 0 can be covered if any of the following towers are built: Tower 1, Tower 2, Tower 3, Tower 4, Tower 5, Tower 6, Tower 9, Tower 12, Tower 14, Tower 15, Tower 16, Tower 17, Tower 19, or Tower 26. Similar constraints apply to all 33 regions, with each region having a specific set of towers that can provide coverage.\n\nThe total cost of building the selected cell towers must not exceed the available budget of 2,996 units. The costs for building each tower are as follows: Tower 0: 227; Tower 1: 355; Tower 2: 287; Tower 3: 487; Tower 4: 497; Tower 5: 412; Tower 6: 495; Tower 7: 294; Tower 8: 212; Tower 9: 290; Tower 10: 427; Tower 11: 399; Tower 12: 361; Tower 13: 253; Tower 14: 350; Tower 15: 314; Tower 16: 234; Tower 17: 203; Tower 18: 257; Tower 19: 248; Tower 20: 406; Tower 21: 264; Tower 22: 277; Tower 23: 419; Tower 24: 426; Tower 25: 297; Tower 26: 474; Tower 27: 333; Tower 28: 491.\n\nYour task is to select which cell towers to build and which regions to cover, ensuring that the total population covered is maximized while staying within the budget. Each region can only be covered if at least one of its associated towers is built, and the total cost of building the selected towers must not exceed 2,996 units. The solution must balance the trade-off between coverage and cost to achieve the best possible outcome.",
    "answer": 113803,
    "ori": "13_optmath_bench",
    "index": 25,
    "description": "You are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 33 distinct areas, each with a specific population size that needs to be covered by cell tower signals. The goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\nFor each of the 29 available cell tower locations (tower_0 to tower_28), you must decide whether to build the tower (a binary decision: build or not build). For each of the 33 regions (region_0 to region_32), you must decide whether the region will be covered by at least one active cell tower (a binary decision: cover or not cover).\n\nThe objective is to maximize the total population covered by the deployed cell towers. The population sizes for the regions are as follows: Region 0: 4,901; Region 1: 2,727; Region 2: 2,994; Region 3: 2,984; Region 4: 3,693; Region 5: 2,615; Region 6: 3,354; Region 7: 4,965; Region 8: 4,223; Region 9: 4,738; Region 10: 2,345; Region 11: 3,915; Region 12: 4,068; Region 13: 2,613; Region 14: 3,140; Region 15: 4,894; Region 16: 3,503; Region 17: 3,733; Region 18: 4,275; Region 19: 3,795; Region 20: 3,803; Region 21: 3,497; Region 22: 2,403; Region 23: 3,441; Region 24: 3,116; Region 25: 2,091; Region 26: 4,494; Region 27: 3,593; Region 28: 2,090; Region 29: 3,397; Region 30: 3,973; Region 31: 2,362; Region 32: 2,068.\n\nEach region can only be considered covered if at least one of the cell towers that can serve it is built. For example, Region 0 can be covered if any of the following towers are built: Tower 1, Tower 2, Tower 3, Tower 4, Tower 5, Tower 6, Tower 9, Tower 12, Tower 14, Tower 15, Tower 16, Tower 17, Tower 19, or Tower 26. Similar constraints apply to all 33 regions, with each region having a specific set of towers that can provide coverage.\n\nThe total cost of building the selected cell towers must not exceed the available budget of 2,996 units. The costs for building each tower are as follows: Tower 0: 227; Tower 1: 355; Tower 2: 287; Tower 3: 487; Tower 4: 497; Tower 5: 412; Tower 6: 495; Tower 7: 294; Tower 8: 212; Tower 9: 290; Tower 10: 427; Tower 11: 399; Tower 12: 361; Tower 13: 253; Tower 14: 350; Tower 15: 314; Tower 16: 234; Tower 17: 203; Tower 18: 257; Tower 19: 248; Tower 20: 406; Tower 21: 264; Tower 22: 277; Tower 23: 419; Tower 24: 426; Tower 25: 297; Tower 26: 474; Tower 27: 333; Tower 28: 491.\n\nYour task is to select which cell towers to build and which regions to cover, ensuring that the total population covered is maximized while staying within the budget. Each region can only be covered if at least one of its associated towers is built, and the total cost of building the selected towers must not exceed 2,996 units. The solution must balance the trade-off between coverage and cost to achieve the best possible outcome.",
    "ground_truth": 113803
  },
  {
    "question": "You are tasked with managing the distribution of resources across a network of nine cities. Each city has a specific supply or demand for resources, and your goal is to ensure that all cities meet their requirements while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit for resource shipments.\n\n#### City Requirements:\n- **City 0** has a net demand of **41 units**.\n- **City 1** has a net demand of **23 units**.\n- **City 2** has a net supply of **15 units** (indicated by a negative demand of -15).\n- **City 3** has a net demand of **2 units**.\n- **City 4** has a net supply of **13 units** (indicated by a negative demand of -13).\n- **City 5** has a net supply of **4 units** (indicated by a negative demand of -4).\n- **City 6** has a net supply of **7 units** (indicated by a negative demand of -7).\n- **City 7** has a net supply of **2 units** (indicated by a negative demand of -2).\n- **City 8** has a net supply of **25 units** (indicated by a negative demand of -25).\n\n#### Transportation Costs and Capacities:\nThe cost of shipping resources between cities varies, and each route has a maximum capacity. Below are the costs and capacities for each possible route:\n\n- **From City 0**:  \n  - To City 1: Cost = 7, Capacity = 35  \n  - To City 2: Cost = 9, Capacity = 60  \n  - To City 3: Cost = 8, Capacity = 48  \n  - To City 4: Cost = 8, Capacity = 58  \n  - To City 5: Cost = 10, Capacity = 39  \n  - To City 6: Cost = 8, Capacity = 60  \n  - To City 7: Cost = 6, Capacity = 54  \n  - To City 8: Cost = 9, Capacity = 31  \n\n- **From City 1**:  \n  - To City 0: Cost = 10, Capacity = 39  \n  - To City 2: Cost = 8, Capacity = 31  \n  - To City 3: Cost = 9, Capacity = 56  \n  - To City 4: Cost = 8, Capacity = 60  \n  - To City 5: Cost = 9, Capacity = 37  \n  - To City 6: Cost = 10, Capacity = 54  \n  - To City 7: Cost = 9, Capacity = 39  \n  - To City 8: Cost = 7, Capacity = 50  \n\n- **From City 2**:  \n  - To City 0: Cost = 10, Capacity = 31  \n  - To City 1: Cost = 6, Capacity = 35  \n  - To City 3: Cost = 7, Capacity = 50  \n  - To City 4: Cost = 7, Capacity = 53  \n  - To City 5: Cost = 9, Capacity = 36  \n  - To City 6: Cost = 10, Capacity = 48  \n  - To City 7: Cost = 8, Capacity = 46  \n  - To City 8: Cost = 10, Capacity = 60  \n\n- **From City 3**:  \n  - To City 0: Cost = 7, Capacity = 50  \n  - To City 1: Cost = 6, Capacity = 38  \n  - To City 2: Cost = 7, Capacity = 39  \n  - To City 4: Cost = 10, Capacity = 47  \n  - To City 5: Cost = 10, Capacity = 37  \n  - To City 6: Cost = 6, Capacity = 54  \n  - To City 7: Cost = 7, Capacity = 44  \n  - To City 8: Cost = 10, Capacity = 55  \n\n- **From City 4**:  \n  - To City 0: Cost = 9, Capacity = 31  \n  - To City 1: Cost = 8, Capacity = 31  \n  - To City 2: Cost = 7, Capacity = 30  \n  - To City 3: Cost = 7, Capacity = 40  \n  - To City 5: Cost = 6, Capacity = 60  \n  - To City 6: Cost = 6, Capacity = 46  \n  - To City 7: Cost = 7, Capacity = 31  \n  - To City 8: Cost = 9, Capacity = 49  \n\n- **From City 5**:  \n  - To City 0: Cost = 7, Capacity = 34  \n  - To City 1: Cost = 7, Capacity = 30  \n  - To City 2: Cost = 6, Capacity = 51  \n  - To City 3: Cost = 8, Capacity = 32  \n  - To City 4: Cost = 9, Capacity = 33  \n  - To City 6: Cost = 7, Capacity = 47  \n  - To City 7: Cost = 7, Capacity = 42  \n  - To City 8: Cost = 8, Capacity = 43  \n\n- **From City 6**:  \n  - To City 0: Cost = 8, Capacity = 55  \n  - To City 1: Cost = 7, Capacity = 48  \n  - To City 2: Cost = 7, Capacity = 35  \n  - To City 3: Cost = 7, Capacity = 31  \n  - To City 4: Cost = 8, Capacity = 43  \n  - To City 5: Cost = 8, Capacity = 56  \n  - To City 7: Cost = 6, Capacity = 41  \n  - To City 8: Cost = 6, Capacity = 55  \n\n- **From City 7**:  \n  - To City 0: Cost = 7, Capacity = 31  \n  - To City 1: Cost = 6, Capacity = 31  \n  - To City 2: Cost = 9, Capacity = 38  \n  - To City 3: Cost = 8, Capacity = 34  \n  - To City 4: Cost = 7, Capacity = 31  \n  - To City 5: Cost = 8, Capacity = 40  \n  - To City 6: Cost = 9, Capacity = 39  \n  - To City 8: Cost = 6, Capacity = 42  \n\n- **From City 8**:  \n  - To City 0: Cost = 8, Capacity = 48  \n  - To City 1: Cost = 8, Capacity = 60  \n  - To City 2: Cost = 8, Capacity = 36  \n  - To City 3: Cost = 10, Capacity = 47  \n  - To City 4: Cost = 8, Capacity = 32  \n  - To City 5: Cost = 7, Capacity = 36  \n  - To City 6: Cost = 6, Capacity = 57  \n  - To City 7: Cost = 10, Capacity = 35  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to ship between cities to meet all demands and supplies while minimizing the total transportation cost. The shipments must respect the capacity limits of each route, and the total flow of resources into and out of each city must balance according to their respective requirements.\n\n#### Constraints:\n1. **Flow Balance**: For each city, the total resources shipped into the city plus its supply must equal the total resources shipped out of the city plus its demand.\n2. **Capacity Limits**: The amount of resources shipped on any route cannot exceed the maximum capacity for that route.\n3. **Non-Negativity**: All shipments must be non-negative.\n\nBy carefully planning the shipments, you aim to achieve the lowest possible total cost while ensuring all cities receive the resources they need.",
    "answer": 493,
    "ori": "13_optmath_bench",
    "index": 26,
    "description": "You are tasked with managing the distribution of resources across a network of nine cities. Each city has a specific supply or demand for resources, and your goal is to ensure that all cities meet their requirements while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit for resource shipments.\n\n#### City Requirements:\n- **City 0** has a net demand of **41 units**.\n- **City 1** has a net demand of **23 units**.\n- **City 2** has a net supply of **15 units** (indicated by a negative demand of -15).\n- **City 3** has a net demand of **2 units**.\n- **City 4** has a net supply of **13 units** (indicated by a negative demand of -13).\n- **City 5** has a net supply of **4 units** (indicated by a negative demand of -4).\n- **City 6** has a net supply of **7 units** (indicated by a negative demand of -7).\n- **City 7** has a net supply of **2 units** (indicated by a negative demand of -2).\n- **City 8** has a net supply of **25 units** (indicated by a negative demand of -25).\n\n#### Transportation Costs and Capacities:\nThe cost of shipping resources between cities varies, and each route has a maximum capacity. Below are the costs and capacities for each possible route:\n\n- **From City 0**:  \n  - To City 1: Cost = 7, Capacity = 35  \n  - To City 2: Cost = 9, Capacity = 60  \n  - To City 3: Cost = 8, Capacity = 48  \n  - To City 4: Cost = 8, Capacity = 58  \n  - To City 5: Cost = 10, Capacity = 39  \n  - To City 6: Cost = 8, Capacity = 60  \n  - To City 7: Cost = 6, Capacity = 54  \n  - To City 8: Cost = 9, Capacity = 31  \n\n- **From City 1**:  \n  - To City 0: Cost = 10, Capacity = 39  \n  - To City 2: Cost = 8, Capacity = 31  \n  - To City 3: Cost = 9, Capacity = 56  \n  - To City 4: Cost = 8, Capacity = 60  \n  - To City 5: Cost = 9, Capacity = 37  \n  - To City 6: Cost = 10, Capacity = 54  \n  - To City 7: Cost = 9, Capacity = 39  \n  - To City 8: Cost = 7, Capacity = 50  \n\n- **From City 2**:  \n  - To City 0: Cost = 10, Capacity = 31  \n  - To City 1: Cost = 6, Capacity = 35  \n  - To City 3: Cost = 7, Capacity = 50  \n  - To City 4: Cost = 7, Capacity = 53  \n  - To City 5: Cost = 9, Capacity = 36  \n  - To City 6: Cost = 10, Capacity = 48  \n  - To City 7: Cost = 8, Capacity = 46  \n  - To City 8: Cost = 10, Capacity = 60  \n\n- **From City 3**:  \n  - To City 0: Cost = 7, Capacity = 50  \n  - To City 1: Cost = 6, Capacity = 38  \n  - To City 2: Cost = 7, Capacity = 39  \n  - To City 4: Cost = 10, Capacity = 47  \n  - To City 5: Cost = 10, Capacity = 37  \n  - To City 6: Cost = 6, Capacity = 54  \n  - To City 7: Cost = 7, Capacity = 44  \n  - To City 8: Cost = 10, Capacity = 55  \n\n- **From City 4**:  \n  - To City 0: Cost = 9, Capacity = 31  \n  - To City 1: Cost = 8, Capacity = 31  \n  - To City 2: Cost = 7, Capacity = 30  \n  - To City 3: Cost = 7, Capacity = 40  \n  - To City 5: Cost = 6, Capacity = 60  \n  - To City 6: Cost = 6, Capacity = 46  \n  - To City 7: Cost = 7, Capacity = 31  \n  - To City 8: Cost = 9, Capacity = 49  \n\n- **From City 5**:  \n  - To City 0: Cost = 7, Capacity = 34  \n  - To City 1: Cost = 7, Capacity = 30  \n  - To City 2: Cost = 6, Capacity = 51  \n  - To City 3: Cost = 8, Capacity = 32  \n  - To City 4: Cost = 9, Capacity = 33  \n  - To City 6: Cost = 7, Capacity = 47  \n  - To City 7: Cost = 7, Capacity = 42  \n  - To City 8: Cost = 8, Capacity = 43  \n\n- **From City 6**:  \n  - To City 0: Cost = 8, Capacity = 55  \n  - To City 1: Cost = 7, Capacity = 48  \n  - To City 2: Cost = 7, Capacity = 35  \n  - To City 3: Cost = 7, Capacity = 31  \n  - To City 4: Cost = 8, Capacity = 43  \n  - To City 5: Cost = 8, Capacity = 56  \n  - To City 7: Cost = 6, Capacity = 41  \n  - To City 8: Cost = 6, Capacity = 55  \n\n- **From City 7**:  \n  - To City 0: Cost = 7, Capacity = 31  \n  - To City 1: Cost = 6, Capacity = 31  \n  - To City 2: Cost = 9, Capacity = 38  \n  - To City 3: Cost = 8, Capacity = 34  \n  - To City 4: Cost = 7, Capacity = 31  \n  - To City 5: Cost = 8, Capacity = 40  \n  - To City 6: Cost = 9, Capacity = 39  \n  - To City 8: Cost = 6, Capacity = 42  \n\n- **From City 8**:  \n  - To City 0: Cost = 8, Capacity = 48  \n  - To City 1: Cost = 8, Capacity = 60  \n  - To City 2: Cost = 8, Capacity = 36  \n  - To City 3: Cost = 10, Capacity = 47  \n  - To City 4: Cost = 8, Capacity = 32  \n  - To City 5: Cost = 7, Capacity = 36  \n  - To City 6: Cost = 6, Capacity = 57  \n  - To City 7: Cost = 10, Capacity = 35  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to ship between cities to meet all demands and supplies while minimizing the total transportation cost. The shipments must respect the capacity limits of each route, and the total flow of resources into and out of each city must balance according to their respective requirements.\n\n#### Constraints:\n1. **Flow Balance**: For each city, the total resources shipped into the city plus its supply must equal the total resources shipped out of the city plus its demand.\n2. **Capacity Limits**: The amount of resources shipped on any route cannot exceed the maximum capacity for that route.\n3. **Non-Negativity**: All shipments must be non-negative.\n\nBy carefully planning the shipments, you aim to achieve the lowest possible total cost while ensuring all cities receive the resources they need.",
    "ground_truth": 493
  },
  {
    "question": "Imagine you are managing the distribution of goods across a network of eight cities. Each city has a specific supply or demand for goods, and your goal is to ensure that all cities receive the goods they need while minimizing the total transportation costs. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity for the amount of goods that can be shipped.\n\n#### **Cities and Their Requirements:**\n- **City 0** has a net demand of **86 units** of goods.\n- **City 1** has a net demand of **19 units** of goods.\n- **City 2** has a net supply of **23 units** of goods (meaning it can send out 23 units).\n- **City 3** has a net supply of **37 units** of goods.\n- **City 4** has a net supply of **24 units** of goods.\n- **City 5** has a balanced supply and demand, meaning it neither supplies nor demands goods.\n- **City 6** has a net demand of **4 units** of goods.\n- **City 7** has a net supply of **25 units** of goods.\n\n#### **Transportation Costs and Capacities:**\nThe cost of shipping goods between cities varies, and each route has a maximum capacity. Below are the costs and capacities for each possible route:\n\n- **From City 0:**\n  - To City 1: Cost = **9**, Capacity = **44**\n  - To City 2: Cost = **6**, Capacity = **47**\n  - To City 3: Cost = **8**, Capacity = **60**\n  - To City 4: Cost = **7**, Capacity = **40**\n  - To City 5: Cost = **7**, Capacity = **39**\n  - To City 6: Cost = **10**, Capacity = **40**\n  - To City 7: Cost = **7**, Capacity = **52**\n\n- **From City 1:**\n  - To City 0: Cost = **6**, Capacity = **32**\n  - To City 2: Cost = **7**, Capacity = **59**\n  - To City 3: Cost = **6**, Capacity = **58**\n  - To City 4: Cost = **8**, Capacity = **58**\n  - To City 5: Cost = **7**, Capacity = **51**\n  - To City 6: Cost = **6**, Capacity = **31**\n  - To City 7: Cost = **6**, Capacity = **34**\n\n- **From City 2:**\n  - To City 0: Cost = **10**, Capacity = **59**\n  - To City 1: Cost = **10**, Capacity = **49**\n  - To City 3: Cost = **9**, Capacity = **51**\n  - To City 4: Cost = **9**, Capacity = **39**\n  - To City 5: Cost = **10**, Capacity = **34**\n  - To City 6: Cost = **6**, Capacity = **47**\n  - To City 7: Cost = **6**, Capacity = **55**\n\n- **From City 3:**\n  - To City 0: Cost = **9**, Capacity = **60**\n  - To City 1: Cost = **7**, Capacity = **34**\n  - To City 2: Cost = **7**, Capacity = **30**\n  - To City 4: Cost = **7**, Capacity = **32**\n  - To City 5: Cost = **9**, Capacity = **43**\n  - To City 6: Cost = **7**, Capacity = **30**\n  - To City 7: Cost = **10**, Capacity = **43**\n\n- **From City 4:**\n  - To City 0: Cost = **9**, Capacity = **57**\n  - To City 1: Cost = **9**, Capacity = **38**\n  - To City 2: Cost = **6**, Capacity = **54**\n  - To City 3: Cost = **10**, Capacity = **46**\n  - To City 5: Cost = **6**, Capacity = **30**\n  - To City 6: Cost = **9**, Capacity = **48**\n  - To City 7: Cost = **7**, Capacity = **43**\n\n- **From City 5:**\n  - To City 0: Cost = **9**, Capacity = **44**\n  - To City 1: Cost = **6**, Capacity = **35**\n  - To City 2: Cost = **8**, Capacity = **32**\n  - To City 3: Cost = **7**, Capacity = **58**\n  - To City 4: Cost = **8**, Capacity = **56**\n  - To City 6: Cost = **6**, Capacity = **48**\n  - To City 7: Cost = **8**, Capacity = **49**\n\n- **From City 6:**\n  - To City 0: Cost = **9**, Capacity = **52**\n  - To City 1: Cost = **10**, Capacity = **48**\n  - To City 2: Cost = **7**, Capacity = **33**\n  - To City 3: Cost = **8**, Capacity = **39**\n  - To City 4: Cost = **10**, Capacity = **36**\n  - To City 5: Cost = **10**, Capacity = **47**\n  - To City 7: Cost = **9**, Capacity = **49**\n\n- **From City 7:**\n  - To City 0: Cost = **6**, Capacity = **38**\n  - To City 1: Cost = **8**, Capacity = **44**\n  - To City 2: Cost = **10**, Capacity = **33**\n  - To City 3: Cost = **6**, Capacity = **30**\n  - To City 4: Cost = **10**, Capacity = **60**\n  - To City 5: Cost = **7**, Capacity = **39**\n  - To City 6: Cost = **8**, Capacity = **55**\n\n#### **Objective:**\nYour task is to determine the optimal amount of goods to ship between each pair of cities to meet all demands and supplies while minimizing the total transportation cost. The total cost is calculated by summing the cost of shipping goods across all routes, weighted by the amount shipped on each route.\n\n#### **Constraints:**\n1. **Flow Balance:** For each city, the total amount of goods shipped into the city plus its own supply must equal the total amount shipped out of the city plus its demand.\n2. **Capacity Limits:** The amount of goods shipped on any route cannot exceed the maximum capacity of that route.\n3. **Non-Negativity:** The amount of goods shipped on any route must be zero or positive.\n\nBy carefully planning the shipments, you aim to ensure that all cities receive the goods they need while keeping the total transportation costs as low as possible.",
    "answer": 875,
    "ori": "13_optmath_bench",
    "index": 27,
    "description": "Imagine you are managing the distribution of goods across a network of eight cities. Each city has a specific supply or demand for goods, and your goal is to ensure that all cities receive the goods they need while minimizing the total transportation costs. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity for the amount of goods that can be shipped.\n\n#### **Cities and Their Requirements:**\n- **City 0** has a net demand of **86 units** of goods.\n- **City 1** has a net demand of **19 units** of goods.\n- **City 2** has a net supply of **23 units** of goods (meaning it can send out 23 units).\n- **City 3** has a net supply of **37 units** of goods.\n- **City 4** has a net supply of **24 units** of goods.\n- **City 5** has a balanced supply and demand, meaning it neither supplies nor demands goods.\n- **City 6** has a net demand of **4 units** of goods.\n- **City 7** has a net supply of **25 units** of goods.\n\n#### **Transportation Costs and Capacities:**\nThe cost of shipping goods between cities varies, and each route has a maximum capacity. Below are the costs and capacities for each possible route:\n\n- **From City 0:**\n  - To City 1: Cost = **9**, Capacity = **44**\n  - To City 2: Cost = **6**, Capacity = **47**\n  - To City 3: Cost = **8**, Capacity = **60**\n  - To City 4: Cost = **7**, Capacity = **40**\n  - To City 5: Cost = **7**, Capacity = **39**\n  - To City 6: Cost = **10**, Capacity = **40**\n  - To City 7: Cost = **7**, Capacity = **52**\n\n- **From City 1:**\n  - To City 0: Cost = **6**, Capacity = **32**\n  - To City 2: Cost = **7**, Capacity = **59**\n  - To City 3: Cost = **6**, Capacity = **58**\n  - To City 4: Cost = **8**, Capacity = **58**\n  - To City 5: Cost = **7**, Capacity = **51**\n  - To City 6: Cost = **6**, Capacity = **31**\n  - To City 7: Cost = **6**, Capacity = **34**\n\n- **From City 2:**\n  - To City 0: Cost = **10**, Capacity = **59**\n  - To City 1: Cost = **10**, Capacity = **49**\n  - To City 3: Cost = **9**, Capacity = **51**\n  - To City 4: Cost = **9**, Capacity = **39**\n  - To City 5: Cost = **10**, Capacity = **34**\n  - To City 6: Cost = **6**, Capacity = **47**\n  - To City 7: Cost = **6**, Capacity = **55**\n\n- **From City 3:**\n  - To City 0: Cost = **9**, Capacity = **60**\n  - To City 1: Cost = **7**, Capacity = **34**\n  - To City 2: Cost = **7**, Capacity = **30**\n  - To City 4: Cost = **7**, Capacity = **32**\n  - To City 5: Cost = **9**, Capacity = **43**\n  - To City 6: Cost = **7**, Capacity = **30**\n  - To City 7: Cost = **10**, Capacity = **43**\n\n- **From City 4:**\n  - To City 0: Cost = **9**, Capacity = **57**\n  - To City 1: Cost = **9**, Capacity = **38**\n  - To City 2: Cost = **6**, Capacity = **54**\n  - To City 3: Cost = **10**, Capacity = **46**\n  - To City 5: Cost = **6**, Capacity = **30**\n  - To City 6: Cost = **9**, Capacity = **48**\n  - To City 7: Cost = **7**, Capacity = **43**\n\n- **From City 5:**\n  - To City 0: Cost = **9**, Capacity = **44**\n  - To City 1: Cost = **6**, Capacity = **35**\n  - To City 2: Cost = **8**, Capacity = **32**\n  - To City 3: Cost = **7**, Capacity = **58**\n  - To City 4: Cost = **8**, Capacity = **56**\n  - To City 6: Cost = **6**, Capacity = **48**\n  - To City 7: Cost = **8**, Capacity = **49**\n\n- **From City 6:**\n  - To City 0: Cost = **9**, Capacity = **52**\n  - To City 1: Cost = **10**, Capacity = **48**\n  - To City 2: Cost = **7**, Capacity = **33**\n  - To City 3: Cost = **8**, Capacity = **39**\n  - To City 4: Cost = **10**, Capacity = **36**\n  - To City 5: Cost = **10**, Capacity = **47**\n  - To City 7: Cost = **9**, Capacity = **49**\n\n- **From City 7:**\n  - To City 0: Cost = **6**, Capacity = **38**\n  - To City 1: Cost = **8**, Capacity = **44**\n  - To City 2: Cost = **10**, Capacity = **33**\n  - To City 3: Cost = **6**, Capacity = **30**\n  - To City 4: Cost = **10**, Capacity = **60**\n  - To City 5: Cost = **7**, Capacity = **39**\n  - To City 6: Cost = **8**, Capacity = **55**\n\n#### **Objective:**\nYour task is to determine the optimal amount of goods to ship between each pair of cities to meet all demands and supplies while minimizing the total transportation cost. The total cost is calculated by summing the cost of shipping goods across all routes, weighted by the amount shipped on each route.\n\n#### **Constraints:**\n1. **Flow Balance:** For each city, the total amount of goods shipped into the city plus its own supply must equal the total amount shipped out of the city plus its demand.\n2. **Capacity Limits:** The amount of goods shipped on any route cannot exceed the maximum capacity of that route.\n3. **Non-Negativity:** The amount of goods shipped on any route must be zero or positive.\n\nBy carefully planning the shipments, you aim to ensure that all cities receive the goods they need while keeping the total transportation costs as low as possible.",
    "ground_truth": 875
  },
  {
    "question": "Assign seven staff members (Person 0 to Person 6) to three projects (Project 0, Project 1, and Project 2) such that each staff member is assigned to exactly one project. Each project has specific skill requirements: Project 0 requires a skill level of 8 for Skill 0 and 8 for Skill 1, Project 1 requires a skill level of 7 for Skill 0 and 9 for Skill 1, and Project 2 requires a skill level of 9 for Skill 0 and 7 for Skill 1. Each staff member has specific skill levels: Person 0 has Skill 0 level 5 and Skill 1 level 7, Person 1 has Skill 0 level 6 and Skill 1 level 7, Person 2 has Skill 0 level 5 and Skill 1 level 7, Person 3 has Skill 0 level 6 and Skill 1 level 7, Person 4 has Skill 0 level 5 and Skill 1 level 6, Person 5 has Skill 0 level 5 and Skill 1 level 6, and Person 6 has Skill 0 level 5 and Skill 1 level 7. The attained skill level for each project is the sum of the skill levels of the assigned staff members. The skill shortage for each project is the difference between the required skill level and the attained skill level. The goal is to minimize the maximum skill shortage across all projects and skills. Constraints include ensuring that each staff member is assigned to exactly one project, and that the skill shortages for Project 0, Skill 0 must be less than or equal to -8, for Project 0, Skill 1 must be less than or equal to -8, for Project 1, Skill 0 must be less than or equal to -7, for Project 1, Skill 1 must be less than or equal to -9, for Project 2, Skill 0 must be less than or equal to -9, and for Project 2, Skill 1 must be less than or equal to -7.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 28,
    "description": "Assign seven staff members (Person 0 to Person 6) to three projects (Project 0, Project 1, and Project 2) such that each staff member is assigned to exactly one project. Each project has specific skill requirements: Project 0 requires a skill level of 8 for Skill 0 and 8 for Skill 1, Project 1 requires a skill level of 7 for Skill 0 and 9 for Skill 1, and Project 2 requires a skill level of 9 for Skill 0 and 7 for Skill 1. Each staff member has specific skill levels: Person 0 has Skill 0 level 5 and Skill 1 level 7, Person 1 has Skill 0 level 6 and Skill 1 level 7, Person 2 has Skill 0 level 5 and Skill 1 level 7, Person 3 has Skill 0 level 6 and Skill 1 level 7, Person 4 has Skill 0 level 5 and Skill 1 level 6, Person 5 has Skill 0 level 5 and Skill 1 level 6, and Person 6 has Skill 0 level 5 and Skill 1 level 7. The attained skill level for each project is the sum of the skill levels of the assigned staff members. The skill shortage for each project is the difference between the required skill level and the attained skill level. The goal is to minimize the maximum skill shortage across all projects and skills. Constraints include ensuring that each staff member is assigned to exactly one project, and that the skill shortages for Project 0, Skill 0 must be less than or equal to -8, for Project 0, Skill 1 must be less than or equal to -8, for Project 1, Skill 0 must be less than or equal to -7, for Project 1, Skill 1 must be less than or equal to -9, for Project 2, Skill 0 must be less than or equal to -9, and for Project 2, Skill 1 must be less than or equal to -7.",
    "ground_truth": 0
  },
  {
    "question": "The problem involves scheduling six jobs, labeled Job 0 through Job 5, in a manufacturing facility. Each job consists of two operations that must be performed in a specific sequence. The goal is to minimize the total completion time, known as the makespan, by determining the start times for all operations and the order of operations on shared machines. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a strict sequence, meaning the second operation cannot start until the first operation has completed. Certain operations are assigned to the same machine, and these operations cannot overlap in time. To enforce this, binary decision variables are used to determine the order of operations on shared machines. For example, if Operation 1 of Job 1 is scheduled before Operation 1 of Job 3 on the same machine, the start time of Operation 1 of Job 3 must be at least 1 unit of time after the completion of Operation 1 of Job 1. The makespan is defined as the maximum completion time across all operations, and it must be at least as large as the completion time of every operation. The constraints include precedence constraints within jobs, ensuring that each operation starts only after the previous operation in the same job has completed; machine capacity constraints, ensuring that operations assigned to the same machine do not overlap; and non-negativity constraints, ensuring that all start times are non-negative. The objective is to minimize the makespan, ensuring that all jobs are completed as quickly as possible. The binary decision variables, such as those determining the order of Operation 1 of Job 1 and Operation 1 of Job 3, are critical in enforcing the machine capacity constraints. The numerical parameters include a large constant (100000) used in the constraints involving binary variables to ensure the correct sequencing of operations on shared machines. The start times and the makespan are general variables that can take on any real value within the bounds defined by the constraints.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 29,
    "description": "The problem involves scheduling six jobs, labeled Job 0 through Job 5, in a manufacturing facility. Each job consists of two operations that must be performed in a specific sequence. The goal is to minimize the total completion time, known as the makespan, by determining the start times for all operations and the order of operations on shared machines. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a strict sequence, meaning the second operation cannot start until the first operation has completed. Certain operations are assigned to the same machine, and these operations cannot overlap in time. To enforce this, binary decision variables are used to determine the order of operations on shared machines. For example, if Operation 1 of Job 1 is scheduled before Operation 1 of Job 3 on the same machine, the start time of Operation 1 of Job 3 must be at least 1 unit of time after the completion of Operation 1 of Job 1. The makespan is defined as the maximum completion time across all operations, and it must be at least as large as the completion time of every operation. The constraints include precedence constraints within jobs, ensuring that each operation starts only after the previous operation in the same job has completed; machine capacity constraints, ensuring that operations assigned to the same machine do not overlap; and non-negativity constraints, ensuring that all start times are non-negative. The objective is to minimize the makespan, ensuring that all jobs are completed as quickly as possible. The binary decision variables, such as those determining the order of Operation 1 of Job 1 and Operation 1 of Job 3, are critical in enforcing the machine capacity constraints. The numerical parameters include a large constant (100000) used in the constraints involving binary variables to ensure the correct sequencing of operations on shared machines. The start times and the makespan are general variables that can take on any real value within the bounds defined by the constraints.",
    "ground_truth": 5
  },
  {
    "question": "You are tasked with planning the most efficient route for a delivery service that must visit seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total travel cost while ensuring that each city is visited exactly once and that the delivery route forms a complete loop, starting and ending at the same city. The travel costs between each pair of cities are as follows: From City 0 to City 1 costs 285, to City 2 costs 275, to City 3 costs 303, to City 4 costs 282, to City 5 costs 308, and to City 6 costs 290. From City 1 to City 0 costs 293, to City 2 costs 291, to City 3 costs 319, to City 4 costs 295, to City 5 costs 294, and to City 6 costs 324. From City 2 to City 0 costs 309, to City 1 costs 325, to City 3 costs 313, to City 4 costs 292, to City 5 costs 275, and to City 6 costs 320. From City 3 to City 0 costs 307, to City 1 costs 286, to City 2 costs 305, to City 4 costs 297, to City 5 costs 299, and to City 6 costs 278. From City 4 to City 0 costs 320, to City 1 costs 313, to City 2 costs 278, to City 3 costs 300, to City 5 costs 318, and to City 6 costs 325. From City 5 to City 0 costs 281, to City 1 costs 291, to City 2 costs 305, to City 3 costs 285, to City 4 costs 298, and to City 6 costs 292. From City 6 to City 0 costs 323, to City 1 costs 296, to City 2 costs 307, to City 3 costs 295, to City 4 costs 293, and to City 5 costs 301. Each city must be visited by exactly one incoming route and must have exactly one outgoing route. To ensure the route forms a single loop and does not break into smaller disconnected cycles, the position of each city in the tour is tracked. The position of each city must be an integer between 0 and 6, and if a route from City i to City j is taken, the position of City i must be at least one less than the position of City j. The objective is to minimize the total travel cost across all routes while ensuring all constraints are satisfied.",
    "answer": 1987,
    "ori": "13_optmath_bench",
    "index": 30,
    "description": "You are tasked with planning the most efficient route for a delivery service that must visit seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total travel cost while ensuring that each city is visited exactly once and that the delivery route forms a complete loop, starting and ending at the same city. The travel costs between each pair of cities are as follows: From City 0 to City 1 costs 285, to City 2 costs 275, to City 3 costs 303, to City 4 costs 282, to City 5 costs 308, and to City 6 costs 290. From City 1 to City 0 costs 293, to City 2 costs 291, to City 3 costs 319, to City 4 costs 295, to City 5 costs 294, and to City 6 costs 324. From City 2 to City 0 costs 309, to City 1 costs 325, to City 3 costs 313, to City 4 costs 292, to City 5 costs 275, and to City 6 costs 320. From City 3 to City 0 costs 307, to City 1 costs 286, to City 2 costs 305, to City 4 costs 297, to City 5 costs 299, and to City 6 costs 278. From City 4 to City 0 costs 320, to City 1 costs 313, to City 2 costs 278, to City 3 costs 300, to City 5 costs 318, and to City 6 costs 325. From City 5 to City 0 costs 281, to City 1 costs 291, to City 2 costs 305, to City 3 costs 285, to City 4 costs 298, and to City 6 costs 292. From City 6 to City 0 costs 323, to City 1 costs 296, to City 2 costs 307, to City 3 costs 295, to City 4 costs 293, and to City 5 costs 301. Each city must be visited by exactly one incoming route and must have exactly one outgoing route. To ensure the route forms a single loop and does not break into smaller disconnected cycles, the position of each city in the tour is tracked. The position of each city must be an integer between 0 and 6, and if a route from City i to City j is taken, the position of City i must be at least one less than the position of City j. The objective is to minimize the total travel cost across all routes while ensuring all constraints are satisfied.",
    "ground_truth": 1987
  },
  {
    "question": "There are six jobs, each consisting of two operations that must be performed in a specific order. Each operation takes 1 unit of time to complete. Operations are assigned to shared machines, and each machine can handle only one operation at a time. The goal is to schedule the operations to minimize the total completion time, known as the makespan, which is the latest completion time of all operations.\n\nFor each job, the second operation cannot start until the first operation is completed. If two operations are assigned to the same machine, they must be scheduled in a specific order, determined by binary decision variables. These variables indicate whether one operation starts before or after the other on the same machine. A large constant, 100,000, is used to enforce the sequencing logic in the constraints.\n\nThe start times of all operations must be non-negative, and the makespan must be at least as large as the completion time of every operation. The objective is to determine the start times for all operations and the order in which they are processed on shared machines, ensuring that all precedence constraints are satisfied, overlaps on shared machines are avoided, and the makespan is minimized.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 31,
    "description": "There are six jobs, each consisting of two operations that must be performed in a specific order. Each operation takes 1 unit of time to complete. Operations are assigned to shared machines, and each machine can handle only one operation at a time. The goal is to schedule the operations to minimize the total completion time, known as the makespan, which is the latest completion time of all operations.\n\nFor each job, the second operation cannot start until the first operation is completed. If two operations are assigned to the same machine, they must be scheduled in a specific order, determined by binary decision variables. These variables indicate whether one operation starts before or after the other on the same machine. A large constant, 100,000, is used to enforce the sequencing logic in the constraints.\n\nThe start times of all operations must be non-negative, and the makespan must be at least as large as the completion time of every operation. The objective is to determine the start times for all operations and the order in which they are processed on shared machines, ensuring that all precedence constraints are satisfied, overlaps on shared machines are avoided, and the makespan is minimized.",
    "ground_truth": 5
  },
  {
    "question": "There are five jobs, each consisting of two operations that must be performed in a specific order. The first operation of each job must finish before the second operation of the same job can start. All operations are assigned to shared machines, and no two operations on the same machine can overlap in time. The goal is to schedule the operations such that the total completion time, or makespan, is minimized. \n\nEach operation has a processing time of 1 unit. For each job, the start time of the second operation must be at least 1 unit after the start time of the first operation. For every pair of operations assigned to the same machine, one operation must finish before the other can start, enforced by binary decision variables that determine the order of operations on the machine. A large constant (100,000) is used in the constraints to ensure that operations do not overlap on the same machine. The makespan must be at least as large as the completion time of every operation. \n\nThe decision variables include the start time of each operation and the binary variables that determine the order of operations on shared machines. The objective is to minimize the makespan while satisfying all precedence and machine constraints.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 32,
    "description": "There are five jobs, each consisting of two operations that must be performed in a specific order. The first operation of each job must finish before the second operation of the same job can start. All operations are assigned to shared machines, and no two operations on the same machine can overlap in time. The goal is to schedule the operations such that the total completion time, or makespan, is minimized. \n\nEach operation has a processing time of 1 unit. For each job, the start time of the second operation must be at least 1 unit after the start time of the first operation. For every pair of operations assigned to the same machine, one operation must finish before the other can start, enforced by binary decision variables that determine the order of operations on the machine. A large constant (100,000) is used in the constraints to ensure that operations do not overlap on the same machine. The makespan must be at least as large as the completion time of every operation. \n\nThe decision variables include the start time of each operation and the binary variables that determine the order of operations on shared machines. The objective is to minimize the makespan while satisfying all precedence and machine constraints.",
    "ground_truth": 3
  },
  {
    "question": "You are tasked with managing the logistics of a supply chain network involving seven key facilities (nodes) that produce and distribute goods. Each facility has specific supply and demand requirements, and the goal is to minimize the total cost of establishing connections between facilities and transporting goods while ensuring all demands are met.\n\nFacility 0 has a net demand of 106 units, Facility 1 has a net demand of 144 units, Facility 2 has no net supply or demand, Facility 3 has no net supply or demand, Facility 4 has a net demand of 202 units, Facility 5 has a net demand of 40 units, and Facility 6 has a net demand of 8 units.\n\nEstablishing a connection between any two facilities incurs a fixed cost, and transporting goods between them incurs a variable cost per unit. Each connection has a maximum capacity for goods that can be transported. The fixed costs, variable costs, and maximum capacities for each possible connection are as follows:\n\n- Fixed Costs (for establishing connections):\n  - Facility 0 to Facility 1: 1985 units\n  - Facility 0 to Facility 2: 1968 units\n  - Facility 0 to Facility 3: 2043 units\n  - Facility 0 to Facility 4: 2035 units\n  - Facility 0 to Facility 5: 2043 units\n  - Facility 0 to Facility 6: 1987 units\n  - Facility 1 to Facility 0: 2035 units\n  - Facility 1 to Facility 2: 2044 units\n  - Facility 1 to Facility 3: 1985 units\n  - Facility 1 to Facility 4: 2047 units\n  - Facility 1 to Facility 5: 2003 units\n  - Facility 1 to Facility 6: 2005 units\n  - Facility 2 to Facility 0: 2000 units\n  - Facility 2 to Facility 1: 1991 units\n  - Facility 2 to Facility 3: 2005 units\n  - Facility 2 to Facility 4: 1969 units\n  - Facility 2 to Facility 5: 2010 units\n  - Facility 2 to Facility 6: 1965 units\n  - Facility 3 to Facility 0: 1962 units\n  - Facility 3 to Facility 1: 2024 units\n  - Facility 3 to Facility 2: 2025 units\n  - Facility 3 to Facility 4: 2043 units\n  - Facility 3 to Facility 5: 2034 units\n  - Facility 3 to Facility 6: 2017 units\n  - Facility 4 to Facility 0: 1974 units\n  - Facility 4 to Facility 1: 2012 units\n  - Facility 4 to Facility 2: 2009 units\n  - Facility 4 to Facility 3: 1993 units\n  - Facility 4 to Facility 5: 1991 units\n  - Facility 4 to Facility 6: 2040 units\n  - Facility 5 to Facility 0: 2044 units\n  - Facility 5 to Facility 1: 2022 units\n  - Facility 5 to Facility 2: 2025 units\n  - Facility 5 to Facility 3: 1955 units\n  - Facility 5 to Facility 4: 2001 units\n  - Facility 5 to Facility 6: 2029 units\n  - Facility 6 to Facility 0: 1968 units\n  - Facility 6 to Facility 1: 1956 units\n  - Facility 6 to Facility 2: 1986 units\n  - Facility 6 to Facility 3: 2030 units\n  - Facility 6 to Facility 4: 2001 units\n  - Facility 6 to Facility 5: 1961 units\n\n- Variable Costs (per unit transported):\n  - Facility 0 to Facility 1: 19 units\n  - Facility 0 to Facility 2: 19 units\n  - Facility 0 to Facility 3: 19 units\n  - Facility 0 to Facility 4: 19 units\n  - Facility 0 to Facility 5: 21 units\n  - Facility 0 to Facility 6: 21 units\n  - Facility 1 to Facility 0: 21 units\n  - Facility 1 to Facility 2: 19 units\n  - Facility 1 to Facility 3: 20 units\n  - Facility 1 to Facility 4: 20 units\n  - Facility 1 to Facility 5: 21 units\n  - Facility 1 to Facility 6: 21 units\n  - Facility 2 to Facility 0: 21 units\n  - Facility 2 to Facility 1: 19 units\n  - Facility 2 to Facility 3: 21 units\n  - Facility 2 to Facility 4: 21 units\n  - Facility 2 to Facility 5: 21 units\n  - Facility 2 to Facility 6: 20 units\n  - Facility 3 to Facility 0: 21 units\n  - Facility 3 to Facility 1: 19 units\n  - Facility 3 to Facility 2: 21 units\n  - Facility 3 to Facility 4: 19 units\n  - Facility 3 to Facility 5: 19 units\n  - Facility 3 to Facility 6: 20 units\n  - Facility 4 to Facility 0: 21 units\n  - Facility 4 to Facility 1: 21 units\n  - Facility 4 to Facility 2: 21 units\n  - Facility 4 to Facility 3: 20 units\n  - Facility 4 to Facility 5: 20 units\n  - Facility 4 to Facility 6: 19 units\n  - Facility 5 to Facility 0: 21 units\n  - Facility 5 to Facility 1: 19 units\n  - Facility 5 to Facility 2: 20 units\n  - Facility 5 to Facility 3: 20 units\n  - Facility 5 to Facility 4: 20 units\n  - Facility 5 to Facility 6: 21 units\n  - Facility 6 to Facility 0: 19 units\n  - Facility 6 to Facility 1: 21 units\n  - Facility 6 to Facility 2: 19 units\n  - Facility 6 to Facility 3: 20 units\n  - Facility 6 to Facility 4: 21 units\n  - Facility 6 to Facility 5: 21 units\n\n- Maximum Capacities (for goods transported):\n  - Facility 0 to Facility 1: 153 units\n  - Facility 0 to Facility 2: 202 units\n  - Facility 0 to Facility 3: 185 units\n  - Facility 0 to Facility 4: 134 units\n  - Facility 0 to Facility 5: 248 units\n  - Facility 0 to Facility 6: 170 units\n  - Facility 1 to Facility 0: 214 units\n  - Facility 1 to Facility 2: 184 units\n  - Facility 1 to Facility 3: 193 units\n  - Facility 1 to Facility 4: 181 units\n  - Facility 1 to Facility 5: 153 units\n  - Facility 1 to Facility 6: 139 units\n  - Facility 2 to Facility 0: 217 units\n  - Facility 2 to Facility 1: 238 units\n  - Facility 2 to Facility 3: 231 units\n  - Facility 2 to Facility 4: 130 units\n  - Facility 2 to Facility 5: 203 units\n  - Facility 2 to Facility 6: 232 units\n  - Facility 3 to Facility 0: 147 units\n  - Facility 3 to Facility 1: 222 units\n  - Facility 3 to Facility 2: 129 units\n  - Facility 3 to Facility 4: 206 units\n  - Facility 3 to Facility 5: 202 units\n  - Facility 3 to Facility 6: 134 units\n  - Facility 4 to Facility 0: 183 units\n  - Facility 4 to Facility 1: 210 units\n  - Facility 4 to Facility 2: 238 units\n  - Facility 4 to Facility 3: 193 units\n  - Facility 4 to Facility 5: 157 units\n  - Facility 4 to Facility 6: 137 units\n  - Facility 5 to Facility 0: 134 units\n  - Facility 5 to Facility 1: 128 units\n  - Facility 5 to Facility 2: 241 units\n  - Facility 5 to Facility 3: 143 units\n  - Facility 5 to Facility 4: 198 units\n  - Facility 5 to Facility 6: 213 units\n  - Facility 6 to Facility 0: 213 units\n  - Facility 6 to Facility 1: 206 units\n  - Facility 6 to Facility 2: 184 units\n  - Facility 6 to Facility 3: 231 units\n  - Facility 6 to Facility 4: 207 units\n  - Facility 6 to Facility 5: 165 units\n\nDecide whether to establish a connection between each pair of facilities, where establishing a connection incurs a fixed cost. Determine the amount of goods to transport between connected facilities, ensuring that the total flow does not exceed the connection's capacity. The total incoming goods minus the total outgoing goods must equal the facility's net demand for each facility. The decision to establish a connection is binary. The goal is to minimize the total cost, which includes both the fixed costs of establishing connections and the variable costs of transporting goods.",
    "answer": 13022,
    "ori": "13_optmath_bench",
    "index": 33,
    "description": "You are tasked with managing the logistics of a supply chain network involving seven key facilities (nodes) that produce and distribute goods. Each facility has specific supply and demand requirements, and the goal is to minimize the total cost of establishing connections between facilities and transporting goods while ensuring all demands are met.\n\nFacility 0 has a net demand of 106 units, Facility 1 has a net demand of 144 units, Facility 2 has no net supply or demand, Facility 3 has no net supply or demand, Facility 4 has a net demand of 202 units, Facility 5 has a net demand of 40 units, and Facility 6 has a net demand of 8 units.\n\nEstablishing a connection between any two facilities incurs a fixed cost, and transporting goods between them incurs a variable cost per unit. Each connection has a maximum capacity for goods that can be transported. The fixed costs, variable costs, and maximum capacities for each possible connection are as follows:\n\n- Fixed Costs (for establishing connections):\n  - Facility 0 to Facility 1: 1985 units\n  - Facility 0 to Facility 2: 1968 units\n  - Facility 0 to Facility 3: 2043 units\n  - Facility 0 to Facility 4: 2035 units\n  - Facility 0 to Facility 5: 2043 units\n  - Facility 0 to Facility 6: 1987 units\n  - Facility 1 to Facility 0: 2035 units\n  - Facility 1 to Facility 2: 2044 units\n  - Facility 1 to Facility 3: 1985 units\n  - Facility 1 to Facility 4: 2047 units\n  - Facility 1 to Facility 5: 2003 units\n  - Facility 1 to Facility 6: 2005 units\n  - Facility 2 to Facility 0: 2000 units\n  - Facility 2 to Facility 1: 1991 units\n  - Facility 2 to Facility 3: 2005 units\n  - Facility 2 to Facility 4: 1969 units\n  - Facility 2 to Facility 5: 2010 units\n  - Facility 2 to Facility 6: 1965 units\n  - Facility 3 to Facility 0: 1962 units\n  - Facility 3 to Facility 1: 2024 units\n  - Facility 3 to Facility 2: 2025 units\n  - Facility 3 to Facility 4: 2043 units\n  - Facility 3 to Facility 5: 2034 units\n  - Facility 3 to Facility 6: 2017 units\n  - Facility 4 to Facility 0: 1974 units\n  - Facility 4 to Facility 1: 2012 units\n  - Facility 4 to Facility 2: 2009 units\n  - Facility 4 to Facility 3: 1993 units\n  - Facility 4 to Facility 5: 1991 units\n  - Facility 4 to Facility 6: 2040 units\n  - Facility 5 to Facility 0: 2044 units\n  - Facility 5 to Facility 1: 2022 units\n  - Facility 5 to Facility 2: 2025 units\n  - Facility 5 to Facility 3: 1955 units\n  - Facility 5 to Facility 4: 2001 units\n  - Facility 5 to Facility 6: 2029 units\n  - Facility 6 to Facility 0: 1968 units\n  - Facility 6 to Facility 1: 1956 units\n  - Facility 6 to Facility 2: 1986 units\n  - Facility 6 to Facility 3: 2030 units\n  - Facility 6 to Facility 4: 2001 units\n  - Facility 6 to Facility 5: 1961 units\n\n- Variable Costs (per unit transported):\n  - Facility 0 to Facility 1: 19 units\n  - Facility 0 to Facility 2: 19 units\n  - Facility 0 to Facility 3: 19 units\n  - Facility 0 to Facility 4: 19 units\n  - Facility 0 to Facility 5: 21 units\n  - Facility 0 to Facility 6: 21 units\n  - Facility 1 to Facility 0: 21 units\n  - Facility 1 to Facility 2: 19 units\n  - Facility 1 to Facility 3: 20 units\n  - Facility 1 to Facility 4: 20 units\n  - Facility 1 to Facility 5: 21 units\n  - Facility 1 to Facility 6: 21 units\n  - Facility 2 to Facility 0: 21 units\n  - Facility 2 to Facility 1: 19 units\n  - Facility 2 to Facility 3: 21 units\n  - Facility 2 to Facility 4: 21 units\n  - Facility 2 to Facility 5: 21 units\n  - Facility 2 to Facility 6: 20 units\n  - Facility 3 to Facility 0: 21 units\n  - Facility 3 to Facility 1: 19 units\n  - Facility 3 to Facility 2: 21 units\n  - Facility 3 to Facility 4: 19 units\n  - Facility 3 to Facility 5: 19 units\n  - Facility 3 to Facility 6: 20 units\n  - Facility 4 to Facility 0: 21 units\n  - Facility 4 to Facility 1: 21 units\n  - Facility 4 to Facility 2: 21 units\n  - Facility 4 to Facility 3: 20 units\n  - Facility 4 to Facility 5: 20 units\n  - Facility 4 to Facility 6: 19 units\n  - Facility 5 to Facility 0: 21 units\n  - Facility 5 to Facility 1: 19 units\n  - Facility 5 to Facility 2: 20 units\n  - Facility 5 to Facility 3: 20 units\n  - Facility 5 to Facility 4: 20 units\n  - Facility 5 to Facility 6: 21 units\n  - Facility 6 to Facility 0: 19 units\n  - Facility 6 to Facility 1: 21 units\n  - Facility 6 to Facility 2: 19 units\n  - Facility 6 to Facility 3: 20 units\n  - Facility 6 to Facility 4: 21 units\n  - Facility 6 to Facility 5: 21 units\n\n- Maximum Capacities (for goods transported):\n  - Facility 0 to Facility 1: 153 units\n  - Facility 0 to Facility 2: 202 units\n  - Facility 0 to Facility 3: 185 units\n  - Facility 0 to Facility 4: 134 units\n  - Facility 0 to Facility 5: 248 units\n  - Facility 0 to Facility 6: 170 units\n  - Facility 1 to Facility 0: 214 units\n  - Facility 1 to Facility 2: 184 units\n  - Facility 1 to Facility 3: 193 units\n  - Facility 1 to Facility 4: 181 units\n  - Facility 1 to Facility 5: 153 units\n  - Facility 1 to Facility 6: 139 units\n  - Facility 2 to Facility 0: 217 units\n  - Facility 2 to Facility 1: 238 units\n  - Facility 2 to Facility 3: 231 units\n  - Facility 2 to Facility 4: 130 units\n  - Facility 2 to Facility 5: 203 units\n  - Facility 2 to Facility 6: 232 units\n  - Facility 3 to Facility 0: 147 units\n  - Facility 3 to Facility 1: 222 units\n  - Facility 3 to Facility 2: 129 units\n  - Facility 3 to Facility 4: 206 units\n  - Facility 3 to Facility 5: 202 units\n  - Facility 3 to Facility 6: 134 units\n  - Facility 4 to Facility 0: 183 units\n  - Facility 4 to Facility 1: 210 units\n  - Facility 4 to Facility 2: 238 units\n  - Facility 4 to Facility 3: 193 units\n  - Facility 4 to Facility 5: 157 units\n  - Facility 4 to Facility 6: 137 units\n  - Facility 5 to Facility 0: 134 units\n  - Facility 5 to Facility 1: 128 units\n  - Facility 5 to Facility 2: 241 units\n  - Facility 5 to Facility 3: 143 units\n  - Facility 5 to Facility 4: 198 units\n  - Facility 5 to Facility 6: 213 units\n  - Facility 6 to Facility 0: 213 units\n  - Facility 6 to Facility 1: 206 units\n  - Facility 6 to Facility 2: 184 units\n  - Facility 6 to Facility 3: 231 units\n  - Facility 6 to Facility 4: 207 units\n  - Facility 6 to Facility 5: 165 units\n\nDecide whether to establish a connection between each pair of facilities, where establishing a connection incurs a fixed cost. Determine the amount of goods to transport between connected facilities, ensuring that the total flow does not exceed the connection's capacity. The total incoming goods minus the total outgoing goods must equal the facility's net demand for each facility. The decision to establish a connection is binary. The goal is to minimize the total cost, which includes both the fixed costs of establishing connections and the variable costs of transporting goods.",
    "ground_truth": 13022
  },
  {
    "question": "A logistics company must deliver packages to six cities: City 0, City 1, City 2, City 3, City 4, and City 5. Each city must be visited exactly once, and each city must be departed exactly once, ensuring the route forms a continuous loop. The goal is to minimize the total delivery cost, which is the sum of the costs of traveling between the cities. The costs between cities are as follows:  \n\n- From City 0: To City 1 costs 321, to City 2 costs 294, to City 3 costs 323, to City 4 costs 286, and to City 5 costs 325.  \n- From City 1: To City 0 costs 290, to City 2 costs 319, to City 3 costs 321, to City 4 costs 280, and to City 5 costs 324.  \n- From City 2: To City 0 costs 304, to City 1 costs 317, to City 3 costs 322, to City 4 costs 313, and to City 5 costs 300.  \n- From City 3: To City 0 costs 312, to City 1 costs 324, to City 2 costs 280, to City 4 costs 318, and to City 5 costs 284.  \n- From City 4: To City 0 costs 289, to City 1 costs 279, to City 2 costs 278, to City 3 costs 301, and to City 5 costs 324.  \n- From City 5: To City 0 costs 325, to City 1 costs 309, to City 2 costs 304, to City 3 costs 305, and to City 4 costs 310.  \n\nTo prevent smaller loops that do not include all cities, the company uses position variables for each city. These variables represent the order in which the cities are visited. The position variables for City 1 to City 5 must be between 0 and 5, while the position variable for City 0 has no specified bounds. Additionally, constraints ensure that if a route is taken from one city to another, the position of the first city must be less than the position of the second city, adjusted by a factor to eliminate subtours. The objective is to minimize the total delivery cost, including the sum of all route costs, while satisfying all constraints.",
    "answer": 1766,
    "ori": "13_optmath_bench",
    "index": 34,
    "description": "A logistics company must deliver packages to six cities: City 0, City 1, City 2, City 3, City 4, and City 5. Each city must be visited exactly once, and each city must be departed exactly once, ensuring the route forms a continuous loop. The goal is to minimize the total delivery cost, which is the sum of the costs of traveling between the cities. The costs between cities are as follows:  \n\n- From City 0: To City 1 costs 321, to City 2 costs 294, to City 3 costs 323, to City 4 costs 286, and to City 5 costs 325.  \n- From City 1: To City 0 costs 290, to City 2 costs 319, to City 3 costs 321, to City 4 costs 280, and to City 5 costs 324.  \n- From City 2: To City 0 costs 304, to City 1 costs 317, to City 3 costs 322, to City 4 costs 313, and to City 5 costs 300.  \n- From City 3: To City 0 costs 312, to City 1 costs 324, to City 2 costs 280, to City 4 costs 318, and to City 5 costs 284.  \n- From City 4: To City 0 costs 289, to City 1 costs 279, to City 2 costs 278, to City 3 costs 301, and to City 5 costs 324.  \n- From City 5: To City 0 costs 325, to City 1 costs 309, to City 2 costs 304, to City 3 costs 305, and to City 4 costs 310.  \n\nTo prevent smaller loops that do not include all cities, the company uses position variables for each city. These variables represent the order in which the cities are visited. The position variables for City 1 to City 5 must be between 0 and 5, while the position variable for City 0 has no specified bounds. Additionally, constraints ensure that if a route is taken from one city to another, the position of the first city must be less than the position of the second city, adjusted by a factor to eliminate subtours. The objective is to minimize the total delivery cost, including the sum of all route costs, while satisfying all constraints.",
    "ground_truth": 1766
  },
  {
    "question": "Maximize the total population covered by deploying cell towers across 35 distinct areas, ensuring that the total cost of building the towers does not exceed the available budget of 2,697 units. The population of each area is as follows: Area 0 has 3,870 people, Area 1 has 4,020 people, Area 2 has 2,440 people, Area 3 has 4,263 people, Area 4 has 2,727 people, Area 5 has 3,650 people, Area 6 has 3,155 people, Area 7 has 4,805 people, Area 8 has 2,213 people, Area 9 has 3,635 people, Area 10 has 3,262 people, Area 11 has 4,015 people, Area 12 has 4,991 people, Area 13 has 2,657 people, Area 14 has 2,150 people, Area 15 has 3,655 people, Area 16 has 2,141 people, Area 17 has 2,108 people, Area 18 has 4,200 people, Area 19 has 3,137 people, Area 20 has 4,255 people, Area 21 has 3,452 people, Area 22 has 2,155 people, Area 23 has 3,142 people, Area 24 has 4,909 people, Area 25 has 2,865 people, Area 26 has 3,204 people, Area 27 has 4,244 people, Area 28 has 4,975 people, Area 29 has 2,131 people, Area 30 has 4,710 people, Area 31 has 4,721 people, Area 32 has 4,061 people, Area 33 has 3,162 people, and Area 34 has 3,377 people.\n\nFor each of the 27 potential cell tower locations, decide whether to build the tower, where building a tower incurs a specific cost: Tower 0 costs 233 units, Tower 1 costs 216 units, Tower 2 costs 366 units, Tower 3 costs 264 units, Tower 4 costs 413 units, Tower 5 costs 332 units, Tower 6 costs 414 units, Tower 7 costs 233 units, Tower 8 costs 432 units, Tower 9 costs 461 units, Tower 10 costs 465 units, Tower 11 costs 248 units, Tower 12 costs 392 units, Tower 13 costs 244 units, Tower 14 costs 416 units, Tower 15 costs 399 units, Tower 16 costs 448 units, Tower 17 costs 212 units, Tower 18 costs 216 units, Tower 19 costs 224 units, Tower 20 costs 489 units, Tower 21 costs 288 units, Tower 22 costs 256 units, Tower 23 costs 308 units, Tower 24 costs 325 units, Tower 25 costs 359 units, and Tower 26 costs 339 units.\n\nEach area must be covered by at least one of the built towers. For example, Area 0 can be covered by Towers 0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, or 26; Area 1 can be covered by Towers 0, 4, 5, 7, 9, 12, 13, 17, 18, 19, 20, 21, 23, or 26; and similar coverage relationships apply to all 35 areas. The decisions to build towers and cover areas are binary, meaning you cannot partially build a tower or partially cover an area. The goal is to maximize the total population covered while ensuring the total cost of building the selected towers does not exceed the budget.",
    "answer": 122457,
    "ori": "13_optmath_bench",
    "index": 35,
    "description": "Maximize the total population covered by deploying cell towers across 35 distinct areas, ensuring that the total cost of building the towers does not exceed the available budget of 2,697 units. The population of each area is as follows: Area 0 has 3,870 people, Area 1 has 4,020 people, Area 2 has 2,440 people, Area 3 has 4,263 people, Area 4 has 2,727 people, Area 5 has 3,650 people, Area 6 has 3,155 people, Area 7 has 4,805 people, Area 8 has 2,213 people, Area 9 has 3,635 people, Area 10 has 3,262 people, Area 11 has 4,015 people, Area 12 has 4,991 people, Area 13 has 2,657 people, Area 14 has 2,150 people, Area 15 has 3,655 people, Area 16 has 2,141 people, Area 17 has 2,108 people, Area 18 has 4,200 people, Area 19 has 3,137 people, Area 20 has 4,255 people, Area 21 has 3,452 people, Area 22 has 2,155 people, Area 23 has 3,142 people, Area 24 has 4,909 people, Area 25 has 2,865 people, Area 26 has 3,204 people, Area 27 has 4,244 people, Area 28 has 4,975 people, Area 29 has 2,131 people, Area 30 has 4,710 people, Area 31 has 4,721 people, Area 32 has 4,061 people, Area 33 has 3,162 people, and Area 34 has 3,377 people.\n\nFor each of the 27 potential cell tower locations, decide whether to build the tower, where building a tower incurs a specific cost: Tower 0 costs 233 units, Tower 1 costs 216 units, Tower 2 costs 366 units, Tower 3 costs 264 units, Tower 4 costs 413 units, Tower 5 costs 332 units, Tower 6 costs 414 units, Tower 7 costs 233 units, Tower 8 costs 432 units, Tower 9 costs 461 units, Tower 10 costs 465 units, Tower 11 costs 248 units, Tower 12 costs 392 units, Tower 13 costs 244 units, Tower 14 costs 416 units, Tower 15 costs 399 units, Tower 16 costs 448 units, Tower 17 costs 212 units, Tower 18 costs 216 units, Tower 19 costs 224 units, Tower 20 costs 489 units, Tower 21 costs 288 units, Tower 22 costs 256 units, Tower 23 costs 308 units, Tower 24 costs 325 units, Tower 25 costs 359 units, and Tower 26 costs 339 units.\n\nEach area must be covered by at least one of the built towers. For example, Area 0 can be covered by Towers 0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, or 26; Area 1 can be covered by Towers 0, 4, 5, 7, 9, 12, 13, 17, 18, 19, 20, 21, 23, or 26; and similar coverage relationships apply to all 35 areas. The decisions to build towers and cover areas are binary, meaning you cannot partially build a tower or partially cover an area. The goal is to maximize the total population covered while ensuring the total cost of building the selected towers does not exceed the budget.",
    "ground_truth": 122457
  },
  {
    "question": "The problem involves scheduling 7 jobs, each consisting of 2 operations, on a set of machines to minimize the total production time, or makespan. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a specific sequence: operation 0 must be completed before operation 1 can begin. Some operations from different jobs are assigned to the same machine, and the machine can only process one operation at a time. The order in which operations are scheduled on a shared machine is determined by binary decision variables, which take a value of 1 if one operation is scheduled before another and 0 otherwise. A large constant of 100,000 is used to enforce that operations on the same machine do not overlap in time. The makespan must be at least as large as the completion time of every operation, ensuring it accounts for the longest-running job. Start times for all operations must be non-negative, and the binary variables must be either 0 or 1. Specific machine assignments include operations (4,1), (5,0), and (6,0) on one machine; (0,1) and (3,0) on another; (0,0), (2,0), and (4,0) on another; and (1,0), (1,1), (2,1), (3,1), and (5,1) on another. The objective is to determine the start times for all operations and the order in which operations are processed on shared machines to minimize the makespan while respecting the sequence of operations within each job and ensuring no overlaps on shared machines.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 36,
    "description": "The problem involves scheduling 7 jobs, each consisting of 2 operations, on a set of machines to minimize the total production time, or makespan. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a specific sequence: operation 0 must be completed before operation 1 can begin. Some operations from different jobs are assigned to the same machine, and the machine can only process one operation at a time. The order in which operations are scheduled on a shared machine is determined by binary decision variables, which take a value of 1 if one operation is scheduled before another and 0 otherwise. A large constant of 100,000 is used to enforce that operations on the same machine do not overlap in time. The makespan must be at least as large as the completion time of every operation, ensuring it accounts for the longest-running job. Start times for all operations must be non-negative, and the binary variables must be either 0 or 1. Specific machine assignments include operations (4,1), (5,0), and (6,0) on one machine; (0,1) and (3,0) on another; (0,0), (2,0), and (4,0) on another; and (1,0), (1,1), (2,1), (3,1), and (5,1) on another. The objective is to determine the start times for all operations and the order in which operations are processed on shared machines to minimize the makespan while respecting the sequence of operations within each job and ensuring no overlaps on shared machines.",
    "ground_truth": 3
  },
  {
    "question": "The problem involves managing the distribution of a critical resource across seven interconnected cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total cost of transporting resources between cities while ensuring that all demands are met and all operational constraints are satisfied. The cost of transporting resources from City 0 to City 1 is 2 units, from City 0 to City 2 is 1 unit, from City 0 to City 3 is 1 unit, from City 0 to City 4 is 3 units, from City 0 to City 5 is 3 units, and from City 0 to City 6 is 3 units. The cost of transporting resources from City 1 to City 0 is 2 units, from City 1 to City 2 is 1 unit, from City 1 to City 3 is 1 unit, from City 1 to City 4 is 1 unit, from City 1 to City 5 is 1 unit, and from City 1 to City 6 is 3 units. The cost of transporting resources from City 2 to City 0 is 2 units, from City 2 to City 1 is 2 units, from City 2 to City 3 is 3 units, from City 2 to City 4 is 2 units, from City 2 to City 5 is 1 unit, and from City 2 to City 6 is 3 units. The cost of transporting resources from City 3 to City 0 is 2 units, from City 3 to City 1 is 2 units, from City 3 to City 2 is 3 units, from City 3 to City 4 is 2 units, from City 3 to City 5 is 3 units, and from City 3 to City 6 is 1 unit. The cost of transporting resources from City 4 to City 0 is 1 unit, from City 4 to City 1 is 3 units, from City 4 to City 2 is 2 units, from City 4 to City 3 is 2 units, from City 4 to City 5 is 3 units, and from City 4 to City 6 is 2 units. The cost of transporting resources from City 5 to City 0 is 3 units, from City 5 to City 1 is 1 unit, from City 5 to City 2 is 1 unit, from City 5 to City 3 is 1 unit, from City 5 to City 4 is 2 units, and from City 5 to City 6 is 1 unit. The cost of transporting resources from City 6 to City 0 is 3 units, from City 6 to City 1 is 2 units, from City 6 to City 2 is 2 units, from City 6 to City 3 is 2 units, from City 6 to City 4 is 3 units, and from City 6 to City 5 is 1 unit.\n\nEach city must maintain a balance between incoming and outgoing resources. City 0 must ensure that the total resources it sends out are balanced by the resources it receives from other cities. City 1 has a net demand of 1 unit, City 2 has a net surplus of 2 units, City 3 has a net demand of 2 units, City 4 has a net surplus of 2 units, City 5 has a net demand of 1 unit, and City 6 has no net demand or surplus. The route from City 0 to City 1 can handle up to 7 units of resources, from City 0 to City 2 up to 8 units, from City 0 to City 3 up to 9 units, from City 0 to City 4 up to 9 units, from City 0 to City 5 up to 9 units, and from City 0 to City 6 up to 8 units. The route from City 1 to City 0 can handle up to 8 units, from City 1 to City 2 up to 8 units, from City 1 to City 3 up to 8 units, from City 1 to City 4 up to 8 units, from City 1 to City 5 up to 7 units, and from City 1 to City 6 up to 8 units. The route from City 2 to City 0 can handle up to 8 units, from City 2 to City 1 up to 8 units, from City 2 to City 3 up to 8 units, from City 2 to City 4 up to 8 units, from City 2 to City 5 up to 7 units, and from City 2 to City 6 up to 9 units. The route from City 3 to City 0 can handle up to 8 units, from City 3 to City 1 up to 9 units, from City 3 to City 2 up to 8 units, from City 3 to City 4 up to 9 units, from City 3 to City 5 up to 9 units, and from City 3 to City 6 up to 8 units. The route from City 4 to City 0 can handle up to 7 units, from City 4 to City 1 up to 7 units, from City 4 to City 2 up to 9 units, from City 4 to City 3 up to 7 units, from City 4 to City 5 up to 8 units, and from City 4 to City 6 up to 7 units. The route from City 5 to City 0 can handle up to 9 units, from City 5 to City 1 up to 8 units, from City 5 to City 2 up to 7 units, from City 5 to City 3 up to 9 units, from City 5 to City 4 up to 9 units, and from City 5 to City 6 up to 9 units. The route from City 6 to City 0 can handle up to 7 units, from City 6 to City 1 up to 9 units, from City 6 to City 2 up to 9 units, from City 6 to City 3 up to 9 units, from City 6 to City 4 up to 9 units, and from City 6 to City 5 up to 7 units.\n\nEach city has a maximum capacity for handling incoming resources. City 0 can receive up to 16 units, City 1 up to 15 units, City 2 up to 12 units, City 3 up to 15 units, City 4 up to 15 units, City 5 up to 15 units, and City 6 up to 17 units. The amount of resources transported between any two cities cannot be negative. The objective is to determine the optimal amount of resources to transport between cities to minimize the total transportation cost while ensuring that all cities meet their resource demands or surpluses, no transportation route exceeds its capacity, and no city exceeds its capacity for receiving resources.",
    "answer": 7,
    "ori": "13_optmath_bench",
    "index": 37,
    "description": "The problem involves managing the distribution of a critical resource across seven interconnected cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total cost of transporting resources between cities while ensuring that all demands are met and all operational constraints are satisfied. The cost of transporting resources from City 0 to City 1 is 2 units, from City 0 to City 2 is 1 unit, from City 0 to City 3 is 1 unit, from City 0 to City 4 is 3 units, from City 0 to City 5 is 3 units, and from City 0 to City 6 is 3 units. The cost of transporting resources from City 1 to City 0 is 2 units, from City 1 to City 2 is 1 unit, from City 1 to City 3 is 1 unit, from City 1 to City 4 is 1 unit, from City 1 to City 5 is 1 unit, and from City 1 to City 6 is 3 units. The cost of transporting resources from City 2 to City 0 is 2 units, from City 2 to City 1 is 2 units, from City 2 to City 3 is 3 units, from City 2 to City 4 is 2 units, from City 2 to City 5 is 1 unit, and from City 2 to City 6 is 3 units. The cost of transporting resources from City 3 to City 0 is 2 units, from City 3 to City 1 is 2 units, from City 3 to City 2 is 3 units, from City 3 to City 4 is 2 units, from City 3 to City 5 is 3 units, and from City 3 to City 6 is 1 unit. The cost of transporting resources from City 4 to City 0 is 1 unit, from City 4 to City 1 is 3 units, from City 4 to City 2 is 2 units, from City 4 to City 3 is 2 units, from City 4 to City 5 is 3 units, and from City 4 to City 6 is 2 units. The cost of transporting resources from City 5 to City 0 is 3 units, from City 5 to City 1 is 1 unit, from City 5 to City 2 is 1 unit, from City 5 to City 3 is 1 unit, from City 5 to City 4 is 2 units, and from City 5 to City 6 is 1 unit. The cost of transporting resources from City 6 to City 0 is 3 units, from City 6 to City 1 is 2 units, from City 6 to City 2 is 2 units, from City 6 to City 3 is 2 units, from City 6 to City 4 is 3 units, and from City 6 to City 5 is 1 unit.\n\nEach city must maintain a balance between incoming and outgoing resources. City 0 must ensure that the total resources it sends out are balanced by the resources it receives from other cities. City 1 has a net demand of 1 unit, City 2 has a net surplus of 2 units, City 3 has a net demand of 2 units, City 4 has a net surplus of 2 units, City 5 has a net demand of 1 unit, and City 6 has no net demand or surplus. The route from City 0 to City 1 can handle up to 7 units of resources, from City 0 to City 2 up to 8 units, from City 0 to City 3 up to 9 units, from City 0 to City 4 up to 9 units, from City 0 to City 5 up to 9 units, and from City 0 to City 6 up to 8 units. The route from City 1 to City 0 can handle up to 8 units, from City 1 to City 2 up to 8 units, from City 1 to City 3 up to 8 units, from City 1 to City 4 up to 8 units, from City 1 to City 5 up to 7 units, and from City 1 to City 6 up to 8 units. The route from City 2 to City 0 can handle up to 8 units, from City 2 to City 1 up to 8 units, from City 2 to City 3 up to 8 units, from City 2 to City 4 up to 8 units, from City 2 to City 5 up to 7 units, and from City 2 to City 6 up to 9 units. The route from City 3 to City 0 can handle up to 8 units, from City 3 to City 1 up to 9 units, from City 3 to City 2 up to 8 units, from City 3 to City 4 up to 9 units, from City 3 to City 5 up to 9 units, and from City 3 to City 6 up to 8 units. The route from City 4 to City 0 can handle up to 7 units, from City 4 to City 1 up to 7 units, from City 4 to City 2 up to 9 units, from City 4 to City 3 up to 7 units, from City 4 to City 5 up to 8 units, and from City 4 to City 6 up to 7 units. The route from City 5 to City 0 can handle up to 9 units, from City 5 to City 1 up to 8 units, from City 5 to City 2 up to 7 units, from City 5 to City 3 up to 9 units, from City 5 to City 4 up to 9 units, and from City 5 to City 6 up to 9 units. The route from City 6 to City 0 can handle up to 7 units, from City 6 to City 1 up to 9 units, from City 6 to City 2 up to 9 units, from City 6 to City 3 up to 9 units, from City 6 to City 4 up to 9 units, and from City 6 to City 5 up to 7 units.\n\nEach city has a maximum capacity for handling incoming resources. City 0 can receive up to 16 units, City 1 up to 15 units, City 2 up to 12 units, City 3 up to 15 units, City 4 up to 15 units, City 5 up to 15 units, and City 6 up to 17 units. The amount of resources transported between any two cities cannot be negative. The objective is to determine the optimal amount of resources to transport between cities to minimize the total transportation cost while ensuring that all cities meet their resource demands or surpluses, no transportation route exceeds its capacity, and no city exceeds its capacity for receiving resources.",
    "ground_truth": 7
  },
  {
    "question": "The manufacturing facility produces three products over a six-month period, aiming to minimize total costs, including production, setup, and inventory holding costs, while meeting customer demand and adhering to resource constraints. Product 0 has cumulative demands of 75, 141, 241, 315, 386, and 469 units over the six months. Product 1 has cumulative demands of 65, 151, 228, 286, 338, and 390 units. Product 2 has cumulative demands of 57, 143, 193, 263, 363, and 428 units. Production costs per unit for Product 0 are $42, $47, $41, $40, $43, and $47 across the six months. For Product 1, they are $43, $50, $41, $50, $49, and $46. For Product 2, they are $42, $49, $40, $47, $49, and $45. Setup costs for Product 0 are $1,282, $1,493, $1,006, $1,286, $1,305, and $1,360. For Product 1, they are $1,402, $1,498, $1,296, $1,366, $1,376, and $1,172. For Product 2, they are $1,362, $1,094, $1,283, $1,279, $1,430, and $1,146. Inventory holding costs per unit for Product 0 are $4, $5, $4, $5, $4, and $4. For Product 1, they are $5, $5, $5, $4, $4, and $4. For Product 2, they are $5, $5, $4, $5, $5, and $4. The facility has monthly resource capacities of 1,173, 1,102, 1,018, 1,077, 1,190, and 1,132 units. Each unit of Product 0 consumes 1.778 resource units, Product 1 consumes 1.502, and Product 2 consumes 1.556. If a product is produced in a month, a setup cost is incurred, and production quantities are limited by setup decisions: Product 0 can produce up to 469, 394, 328, 228, 154, and 83 units; Product 1 up to 390, 325, 239, 162, 104, and 52 units; and Product 2 up to 428, 371, 285, 235, 165, and 65 units. Inventory at the end of each month must satisfy demand, and no initial or final inventory is allowed. The objective is to determine optimal production quantities, setup decisions, and inventory levels to minimize total costs while meeting demand and resource constraints.",
    "answer": 67501,
    "ori": "13_optmath_bench",
    "index": 38,
    "description": "The manufacturing facility produces three products over a six-month period, aiming to minimize total costs, including production, setup, and inventory holding costs, while meeting customer demand and adhering to resource constraints. Product 0 has cumulative demands of 75, 141, 241, 315, 386, and 469 units over the six months. Product 1 has cumulative demands of 65, 151, 228, 286, 338, and 390 units. Product 2 has cumulative demands of 57, 143, 193, 263, 363, and 428 units. Production costs per unit for Product 0 are $42, $47, $41, $40, $43, and $47 across the six months. For Product 1, they are $43, $50, $41, $50, $49, and $46. For Product 2, they are $42, $49, $40, $47, $49, and $45. Setup costs for Product 0 are $1,282, $1,493, $1,006, $1,286, $1,305, and $1,360. For Product 1, they are $1,402, $1,498, $1,296, $1,366, $1,376, and $1,172. For Product 2, they are $1,362, $1,094, $1,283, $1,279, $1,430, and $1,146. Inventory holding costs per unit for Product 0 are $4, $5, $4, $5, $4, and $4. For Product 1, they are $5, $5, $5, $4, $4, and $4. For Product 2, they are $5, $5, $4, $5, $5, and $4. The facility has monthly resource capacities of 1,173, 1,102, 1,018, 1,077, 1,190, and 1,132 units. Each unit of Product 0 consumes 1.778 resource units, Product 1 consumes 1.502, and Product 2 consumes 1.556. If a product is produced in a month, a setup cost is incurred, and production quantities are limited by setup decisions: Product 0 can produce up to 469, 394, 328, 228, 154, and 83 units; Product 1 up to 390, 325, 239, 162, 104, and 52 units; and Product 2 up to 428, 371, 285, 235, 165, and 65 units. Inventory at the end of each month must satisfy demand, and no initial or final inventory is allowed. The objective is to determine optimal production quantities, setup decisions, and inventory levels to minimize total costs while meeting demand and resource constraints.",
    "ground_truth": 67501
  },
  {
    "question": "There are five clients, labeled Client 0 to Client 4, each requiring two operations to be performed in sequence. Each operation takes exactly 1 unit of time to complete. The operations for each client must follow a strict sequence: the second operation cannot start until the first operation is completed, with a minimum gap of 1 unit of time between them. Operations from different clients may need to be performed on the same machine, and no two operations can overlap on the same machine. To enforce this, binary decision variables determine the order of operations on shared machines. The goal is to minimize the total production time, known as the makespan, which is the time when the last operation across all clients is completed. The makespan must be at least as long as the completion time of every operation. Start times for all operations are continuous variables, and the binary variables ensure that operations on the same machine do not overlap. A large number (100,000) is used in the constraints to enforce the scheduling logic, ensuring that one operation finishes before another starts on the same machine. The problem involves determining the optimal start times for all operations and the sequence of operations on shared machines to minimize the total production time while satisfying all constraints.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 39,
    "description": "There are five clients, labeled Client 0 to Client 4, each requiring two operations to be performed in sequence. Each operation takes exactly 1 unit of time to complete. The operations for each client must follow a strict sequence: the second operation cannot start until the first operation is completed, with a minimum gap of 1 unit of time between them. Operations from different clients may need to be performed on the same machine, and no two operations can overlap on the same machine. To enforce this, binary decision variables determine the order of operations on shared machines. The goal is to minimize the total production time, known as the makespan, which is the time when the last operation across all clients is completed. The makespan must be at least as long as the completion time of every operation. Start times for all operations are continuous variables, and the binary variables ensure that operations on the same machine do not overlap. A large number (100,000) is used in the constraints to enforce the scheduling logic, ensuring that one operation finishes before another starts on the same machine. The problem involves determining the optimal start times for all operations and the sequence of operations on shared machines to minimize the total production time while satisfying all constraints.",
    "ground_truth": 4
  },
  {
    "question": "You are responsible for managing the distribution of resources across a network of eight cities. Each city has a specific supply of resources and a demand that must be met. The goal is to minimize the total transportation cost while ensuring that all cities receive the resources they need, without exceeding the capacity of the transportation links or the storage capacity of the cities.\n\nCity 0 has a net demand of 2 units, City 1 has a balanced supply and demand, City 2 has a net supply of 1 unit, City 3 has a net demand of 2 units, City 4 has a net supply of 2 units, City 5 has a balanced supply and demand, City 6 has a net demand of 1 unit, and City 7 has a net supply of 2 units.\n\nThe cost of transporting resources from City 0 to City 1 is 1 unit, to City 2 is 1 unit, to City 3 is 1 unit, to City 4 is 1 unit, to City 5 is 3 units, to City 6 is 3 units, and to City 7 is 3 units. From City 1 to City 0 is 1 unit, to City 2 is 2 units, to City 3 is 2 units, to City 4 is 2 units, to City 5 is 3 units, to City 6 is 2 units, and to City 7 is 1 unit. From City 2 to City 0 is 2 units, to City 1 is 3 units, to City 3 is 3 units, to City 4 is 2 units, to City 5 is 2 units, to City 6 is 3 units, and to City 7 is 3 units. From City 3 to City 0 is 2 units, to City 1 is 3 units, to City 2 is 1 unit, to City 4 is 3 units, to City 5 is 1 unit, to City 6 is 3 units, and to City 7 is 3 units. From City 4 to City 0 is 3 units, to City 1 is 1 unit, to City 2 is 3 units, to City 3 is 1 unit, to City 5 is 1 unit, to City 6 is 2 units, and to City 7 is 1 unit. From City 5 to City 0 is 1 unit, to City 1 is 1 unit, to City 2 is 3 units, to City 3 is 2 units, to City 4 is 1 unit, to City 6 is 3 units, and to City 7 is 3 units. From City 6 to City 0 is 2 units, to City 1 is 3 units, to City 2 is 3 units, to City 3 is 2 units, to City 4 is 3 units, to City 5 is 1 unit, and to City 7 is 1 unit. From City 7 to City 0 is 2 units, to City 1 is 1 unit, to City 2 is 2 units, to City 3 is 2 units, to City 4 is 1 unit, to City 5 is 1 unit, and to City 6 is 1 unit.\n\nThe maximum capacity for transporting resources from City 0 to City 1 is 7 units, to City 2 is 9 units, to City 3 is 7 units, to City 4 is 8 units, to City 5 is 9 units, to City 6 is 7 units, and to City 7 is 7 units. From City 1 to City 0 is 8 units, to City 2 is 8 units, to City 3 is 8 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 8 units, and to City 7 is 9 units. From City 2 to City 0 is 7 units, to City 1 is 9 units, to City 3 is 9 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 8 units, and to City 7 is 9 units. From City 3 to City 0 is 8 units, to City 1 is 8 units, to City 2 is 9 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 7 units, and to City 7 is 8 units. From City 4 to City 0 is 7 units, to City 1 is 7 units, to City 2 is 7 units, to City 3 is 9 units, to City 5 is 8 units, to City 6 is 7 units, and to City 7 is 7 units. From City 5 to City 0 is 9 units, to City 1 is 9 units, to City 2 is 9 units, to City 3 is 9 units, to City 4 is 7 units, to City 6 is 7 units, and to City 7 is 7 units. From City 6 to City 0 is 8 units, to City 1 is 9 units, to City 2 is 7 units, to City 3 is 9 units, to City 4 is 9 units, to City 5 is 7 units, and to City 7 is 9 units. From City 7 to City 0 is 9 units, to City 1 is 7 units, to City 2 is 8 units, to City 3 is 8 units, to City 4 is 8 units, to City 5 is 9 units, and to City 6 is 8 units.\n\nThe maximum storage capacity for City 0 is 16 units, City 1 is 16 units, City 2 is 18 units, City 3 is 12 units, City 4 is 14 units, City 5 is 16 units, City 6 is 12 units, and City 7 is 14 units.\n\nYour task is to determine the optimal amount of resources to transport between cities to minimize the total transportation cost while ensuring that each city's net demand or supply is satisfied, the transportation links are not overloaded, and the storage capacities of the cities are not exceeded.",
    "answer": 7,
    "ori": "13_optmath_bench",
    "index": 40,
    "description": "You are responsible for managing the distribution of resources across a network of eight cities. Each city has a specific supply of resources and a demand that must be met. The goal is to minimize the total transportation cost while ensuring that all cities receive the resources they need, without exceeding the capacity of the transportation links or the storage capacity of the cities.\n\nCity 0 has a net demand of 2 units, City 1 has a balanced supply and demand, City 2 has a net supply of 1 unit, City 3 has a net demand of 2 units, City 4 has a net supply of 2 units, City 5 has a balanced supply and demand, City 6 has a net demand of 1 unit, and City 7 has a net supply of 2 units.\n\nThe cost of transporting resources from City 0 to City 1 is 1 unit, to City 2 is 1 unit, to City 3 is 1 unit, to City 4 is 1 unit, to City 5 is 3 units, to City 6 is 3 units, and to City 7 is 3 units. From City 1 to City 0 is 1 unit, to City 2 is 2 units, to City 3 is 2 units, to City 4 is 2 units, to City 5 is 3 units, to City 6 is 2 units, and to City 7 is 1 unit. From City 2 to City 0 is 2 units, to City 1 is 3 units, to City 3 is 3 units, to City 4 is 2 units, to City 5 is 2 units, to City 6 is 3 units, and to City 7 is 3 units. From City 3 to City 0 is 2 units, to City 1 is 3 units, to City 2 is 1 unit, to City 4 is 3 units, to City 5 is 1 unit, to City 6 is 3 units, and to City 7 is 3 units. From City 4 to City 0 is 3 units, to City 1 is 1 unit, to City 2 is 3 units, to City 3 is 1 unit, to City 5 is 1 unit, to City 6 is 2 units, and to City 7 is 1 unit. From City 5 to City 0 is 1 unit, to City 1 is 1 unit, to City 2 is 3 units, to City 3 is 2 units, to City 4 is 1 unit, to City 6 is 3 units, and to City 7 is 3 units. From City 6 to City 0 is 2 units, to City 1 is 3 units, to City 2 is 3 units, to City 3 is 2 units, to City 4 is 3 units, to City 5 is 1 unit, and to City 7 is 1 unit. From City 7 to City 0 is 2 units, to City 1 is 1 unit, to City 2 is 2 units, to City 3 is 2 units, to City 4 is 1 unit, to City 5 is 1 unit, and to City 6 is 1 unit.\n\nThe maximum capacity for transporting resources from City 0 to City 1 is 7 units, to City 2 is 9 units, to City 3 is 7 units, to City 4 is 8 units, to City 5 is 9 units, to City 6 is 7 units, and to City 7 is 7 units. From City 1 to City 0 is 8 units, to City 2 is 8 units, to City 3 is 8 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 8 units, and to City 7 is 9 units. From City 2 to City 0 is 7 units, to City 1 is 9 units, to City 3 is 9 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 8 units, and to City 7 is 9 units. From City 3 to City 0 is 8 units, to City 1 is 8 units, to City 2 is 9 units, to City 4 is 7 units, to City 5 is 9 units, to City 6 is 7 units, and to City 7 is 8 units. From City 4 to City 0 is 7 units, to City 1 is 7 units, to City 2 is 7 units, to City 3 is 9 units, to City 5 is 8 units, to City 6 is 7 units, and to City 7 is 7 units. From City 5 to City 0 is 9 units, to City 1 is 9 units, to City 2 is 9 units, to City 3 is 9 units, to City 4 is 7 units, to City 6 is 7 units, and to City 7 is 7 units. From City 6 to City 0 is 8 units, to City 1 is 9 units, to City 2 is 7 units, to City 3 is 9 units, to City 4 is 9 units, to City 5 is 7 units, and to City 7 is 9 units. From City 7 to City 0 is 9 units, to City 1 is 7 units, to City 2 is 8 units, to City 3 is 8 units, to City 4 is 8 units, to City 5 is 9 units, and to City 6 is 8 units.\n\nThe maximum storage capacity for City 0 is 16 units, City 1 is 16 units, City 2 is 18 units, City 3 is 12 units, City 4 is 14 units, City 5 is 16 units, City 6 is 12 units, and City 7 is 14 units.\n\nYour task is to determine the optimal amount of resources to transport between cities to minimize the total transportation cost while ensuring that each city's net demand or supply is satisfied, the transportation links are not overloaded, and the storage capacities of the cities are not exceeded.",
    "ground_truth": 7
  },
  {
    "question": "Minimize the total penalty costs for landing five aircraft, where penalties are incurred for landing earlier or later than the target times. The target landing times are 89, 63, 64, 97, and 85 for aircraft 0, 1, 2, 3, and 4, respectively. Each aircraft must land within its specified time window: aircraft 0 between 60 and 100, aircraft 1 between 60 and 93, aircraft 2 between 60 and 94, aircraft 3 between 67 and 100, and aircraft 4 between 60 and 100. The penalty costs per unit time for landing early are 19, 10, 14, 12, and 19 for aircraft 0, 1, 2, 3, and 4, respectively. The penalty costs per unit time for landing late are 14, 13, 15, 15, and 14 for aircraft 0, 1, 2, 3, and 4, respectively. \n\nTo ensure safety, a minimum separation time must be maintained between consecutive landings. The required separation times between aircraft pairs are as follows: between aircraft 0 and 1, 7 units if aircraft 0 lands first or 8 units if aircraft 1 lands first; between aircraft 0 and 2, 6 units if aircraft 0 lands first or 7 units if aircraft 2 lands first; between aircraft 0 and 3, 5 units if aircraft 0 lands first or 8 units if aircraft 3 lands first; between aircraft 0 and 4, 5 units if aircraft 0 lands first or 7 units if aircraft 4 lands first; between aircraft 1 and 2, 5 units if aircraft 1 lands first or 6 units if aircraft 2 lands first; between aircraft 1 and 3, 5 units if aircraft 1 lands first or 7 units if aircraft 3 lands first; between aircraft 1 and 4, 6 units if aircraft 1 lands first or 5 units if aircraft 4 lands first; between aircraft 2 and 3, 5 units if aircraft 2 lands first or 6 units if aircraft 3 lands first; between aircraft 2 and 4, 5 units if aircraft 2 lands first or 7 units if aircraft 4 lands first; between aircraft 3 and 4, 6 units if aircraft 3 lands first or 6 units if aircraft 4 lands first.\n\nThe order in which aircraft land must be determined, and for each pair of aircraft, one must land before the other. The separation time must be enforced based on the landing order. The actual landing times for each aircraft must be determined, and the penalties for landing early or late must be calculated based on the deviations from the target landing times. The objective is to minimize the total penalty costs while ensuring that all constraints are satisfied.",
    "answer": 87,
    "ori": "13_optmath_bench",
    "index": 41,
    "description": "Minimize the total penalty costs for landing five aircraft, where penalties are incurred for landing earlier or later than the target times. The target landing times are 89, 63, 64, 97, and 85 for aircraft 0, 1, 2, 3, and 4, respectively. Each aircraft must land within its specified time window: aircraft 0 between 60 and 100, aircraft 1 between 60 and 93, aircraft 2 between 60 and 94, aircraft 3 between 67 and 100, and aircraft 4 between 60 and 100. The penalty costs per unit time for landing early are 19, 10, 14, 12, and 19 for aircraft 0, 1, 2, 3, and 4, respectively. The penalty costs per unit time for landing late are 14, 13, 15, 15, and 14 for aircraft 0, 1, 2, 3, and 4, respectively. \n\nTo ensure safety, a minimum separation time must be maintained between consecutive landings. The required separation times between aircraft pairs are as follows: between aircraft 0 and 1, 7 units if aircraft 0 lands first or 8 units if aircraft 1 lands first; between aircraft 0 and 2, 6 units if aircraft 0 lands first or 7 units if aircraft 2 lands first; between aircraft 0 and 3, 5 units if aircraft 0 lands first or 8 units if aircraft 3 lands first; between aircraft 0 and 4, 5 units if aircraft 0 lands first or 7 units if aircraft 4 lands first; between aircraft 1 and 2, 5 units if aircraft 1 lands first or 6 units if aircraft 2 lands first; between aircraft 1 and 3, 5 units if aircraft 1 lands first or 7 units if aircraft 3 lands first; between aircraft 1 and 4, 6 units if aircraft 1 lands first or 5 units if aircraft 4 lands first; between aircraft 2 and 3, 5 units if aircraft 2 lands first or 6 units if aircraft 3 lands first; between aircraft 2 and 4, 5 units if aircraft 2 lands first or 7 units if aircraft 4 lands first; between aircraft 3 and 4, 6 units if aircraft 3 lands first or 6 units if aircraft 4 lands first.\n\nThe order in which aircraft land must be determined, and for each pair of aircraft, one must land before the other. The separation time must be enforced based on the landing order. The actual landing times for each aircraft must be determined, and the penalties for landing early or late must be calculated based on the deviations from the target landing times. The objective is to minimize the total penalty costs while ensuring that all constraints are satisfied.",
    "ground_truth": 87
  },
  {
    "question": " Facility Location for Maximum Dispersion\n\nYou are tasked with selecting a set of facilities from a network of five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the weighted distances between pairs of facilities, where higher weights indicate greater desirability for separation. The goal is to ensure that the selected facilities are as spread out as possible, given the constraints.\n\n#### Key Decisions:\n1. **Facility Selection**: Decide which facilities to open. Each facility can either be selected (1) or not selected (0). Specifically, you must select exactly 2 facilities out of the 5 available.\n2. **Pairwise Dispersion**: Determine whether a pair of facilities contributes to the dispersion score. A pair contributes only if both facilities in the pair are selected.\n\n#### Objective:\nMaximize the total dispersion score, which is the sum of the weighted distances between all pairs of selected facilities. The weights for each pair are as follows:\n- Node 0 and Node 1: 22  \n- Node 0 and Node 2: 19  \n- Node 0 and Node 3: 24  \n- Node 0 and Node 4: 22  \n- Node 1 and Node 0: 19  \n- Node 1 and Node 2: 23  \n- Node 1 and Node 3: 16  \n- Node 1 and Node 4: 25  \n- Node 2 and Node 0: 19  \n- Node 2 and Node 1: 16  \n- Node 2 and Node 3: 19  \n- Node 2 and Node 4: 21  \n- Node 3 and Node 0: 25  \n- Node 3 and Node 1: 19  \n- Node 3 and Node 2: 21  \n- Node 3 and Node 4: 17  \n- Node 4 and Node 0: 19  \n- Node 4 and Node 1: 22  \n- Node 4 and Node 2: 19  \n- Node 4 and Node 3: 21  \n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected from the 5 available. This means the sum of the selection decisions for all facilities must equal 2.\n2. **Pairwise Contribution Rules**:\n   - A pair of facilities can only contribute to the dispersion score if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, the pair cannot contribute to the dispersion score.\n   - If both facilities in a pair are selected, the pair must contribute to the dispersion score.\n\n#### Numerical Parameters:\n- The weights for each pair of facilities are explicitly provided in the objective section above.\n- The total number of facilities to select is fixed at 2.\n\n#### Summary:\nYour task is to select 2 facilities out of 5 such that the total dispersion score, calculated as the sum of the weighted distances between all selected pairs, is maximized. The selection must adhere to the constraints that ensure only valid pairs contribute to the dispersion score and that exactly 2 facilities are chosen.",
    "answer": 49,
    "ori": "13_optmath_bench",
    "index": 42,
    "description": " Facility Location for Maximum Dispersion\n\nYou are tasked with selecting a set of facilities from a network of five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the weighted distances between pairs of facilities, where higher weights indicate greater desirability for separation. The goal is to ensure that the selected facilities are as spread out as possible, given the constraints.\n\n#### Key Decisions:\n1. **Facility Selection**: Decide which facilities to open. Each facility can either be selected (1) or not selected (0). Specifically, you must select exactly 2 facilities out of the 5 available.\n2. **Pairwise Dispersion**: Determine whether a pair of facilities contributes to the dispersion score. A pair contributes only if both facilities in the pair are selected.\n\n#### Objective:\nMaximize the total dispersion score, which is the sum of the weighted distances between all pairs of selected facilities. The weights for each pair are as follows:\n- Node 0 and Node 1: 22  \n- Node 0 and Node 2: 19  \n- Node 0 and Node 3: 24  \n- Node 0 and Node 4: 22  \n- Node 1 and Node 0: 19  \n- Node 1 and Node 2: 23  \n- Node 1 and Node 3: 16  \n- Node 1 and Node 4: 25  \n- Node 2 and Node 0: 19  \n- Node 2 and Node 1: 16  \n- Node 2 and Node 3: 19  \n- Node 2 and Node 4: 21  \n- Node 3 and Node 0: 25  \n- Node 3 and Node 1: 19  \n- Node 3 and Node 2: 21  \n- Node 3 and Node 4: 17  \n- Node 4 and Node 0: 19  \n- Node 4 and Node 1: 22  \n- Node 4 and Node 2: 19  \n- Node 4 and Node 3: 21  \n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected from the 5 available. This means the sum of the selection decisions for all facilities must equal 2.\n2. **Pairwise Contribution Rules**:\n   - A pair of facilities can only contribute to the dispersion score if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, the pair cannot contribute to the dispersion score.\n   - If both facilities in a pair are selected, the pair must contribute to the dispersion score.\n\n#### Numerical Parameters:\n- The weights for each pair of facilities are explicitly provided in the objective section above.\n- The total number of facilities to select is fixed at 2.\n\n#### Summary:\nYour task is to select 2 facilities out of 5 such that the total dispersion score, calculated as the sum of the weighted distances between all selected pairs, is maximized. The selection must adhere to the constraints that ensure only valid pairs contribute to the dispersion score and that exactly 2 facilities are chosen.",
    "ground_truth": 49
  },
  {
    "question": "The problem involves scheduling production tasks for five jobs (Job 0 through Job 4) in a manufacturing facility. Each job consists of a sequence of operations that must be performed in a specific order, with each operation taking exactly 1 unit of time to complete. The facility has a limited number of machines, and certain operations from different jobs may require the same machine. The goal is to minimize the total production time, known as the makespan, while ensuring that all operational constraints are satisfied.\n\nEach operation within a job must start only after the previous operation in the same job is completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 is finished. Operations that require the same machine cannot overlap in time. To enforce this, binary decision variables are used to determine the order of operations on each machine. For instance, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1 on Machine 1, the binary variable \\( X_{(0,0),(1,0)} \\) is set to 1; otherwise, it is set to 0. A large constant (100000) is used in the constraints to ensure that the sequencing is properly enforced.\n\nThe makespan must be at least as long as the completion time of the last operation across all jobs. For example, if Operation 1 of Job 4 finishes at time 10, the makespan must be at least 10. All operation start times must be non-negative, and the binary decision variables can only take values of 0 or 1.\n\nThe objective is to determine the start times for all operations and the sequence of operations on shared machines such that the total production time is minimized. This must be done while ensuring that all precedence constraints, machine capacity constraints, and non-negativity constraints are satisfied. The processing time for each operation is fixed at 1 unit of time, and the binary decision variables are used to enforce the order of operations on shared machines.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 43,
    "description": "The problem involves scheduling production tasks for five jobs (Job 0 through Job 4) in a manufacturing facility. Each job consists of a sequence of operations that must be performed in a specific order, with each operation taking exactly 1 unit of time to complete. The facility has a limited number of machines, and certain operations from different jobs may require the same machine. The goal is to minimize the total production time, known as the makespan, while ensuring that all operational constraints are satisfied.\n\nEach operation within a job must start only after the previous operation in the same job is completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 is finished. Operations that require the same machine cannot overlap in time. To enforce this, binary decision variables are used to determine the order of operations on each machine. For instance, if Operation 0 of Job 0 is scheduled before Operation 0 of Job 1 on Machine 1, the binary variable \\( X_{(0,0),(1,0)} \\) is set to 1; otherwise, it is set to 0. A large constant (100000) is used in the constraints to ensure that the sequencing is properly enforced.\n\nThe makespan must be at least as long as the completion time of the last operation across all jobs. For example, if Operation 1 of Job 4 finishes at time 10, the makespan must be at least 10. All operation start times must be non-negative, and the binary decision variables can only take values of 0 or 1.\n\nThe objective is to determine the start times for all operations and the sequence of operations on shared machines such that the total production time is minimized. This must be done while ensuring that all precedence constraints, machine capacity constraints, and non-negativity constraints are satisfied. The processing time for each operation is fixed at 1 unit of time, and the binary decision variables are used to enforce the order of operations on shared machines.",
    "ground_truth": 5
  },
  {
    "question": " Managing Resource Distribution Across Cities\n\nImagine you are responsible for managing the distribution of a critical resource (e.g., medical supplies, food, or energy) across seven interconnected cities. Each city has a specific supply of the resource, a demand that must be met, and limited capacity to store or process incoming resources. Your goal is to minimize the total cost of transporting the resource between cities while ensuring that all demands are satisfied and no capacity limits are exceeded.\n\n#### City Details:\n- **City 0** has a net demand of 2 units (it requires 2 more units than it currently has).\n- **City 1** has a net demand of 2 units.\n- **City 2** has a net supply of 1 unit (it has 1 more unit than it needs).\n- **City 3** has a net supply of 2 units.\n- **City 4** is balanced, with no net demand or supply.\n- **City 5** has a net supply of 1 unit.\n- **City 6** is balanced, with no net demand or supply.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies depending on the route. Below are the costs per unit transported:\n- From **City 0**:  \n  - To City 1: 1 unit cost  \n  - To City 2: 2 units cost  \n  - To City 3: 3 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 1**:  \n  - To City 0: 2 units cost  \n  - To City 2: 3 units cost  \n  - To City 3: 2 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 2**:  \n  - To City 0: 2 units cost  \n  - To City 1: 1 unit cost  \n  - To City 3: 3 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 2 units cost  \n- From **City 3**:  \n  - To City 0: 2 units cost  \n  - To City 1: 2 units cost  \n  - To City 2: 2 units cost  \n  - To City 4: 3 units cost  \n  - To City 5: 1 unit cost  \n  - To City 6: 1 unit cost  \n- From **City 4**:  \n  - To City 0: 1 unit cost  \n  - To City 1: 1 unit cost  \n  - To City 2: 1 unit cost  \n  - To City 3: 1 unit cost  \n  - To City 5: 1 unit cost  \n  - To City 6: 1 unit cost  \n- From **City 5**:  \n  - To City 0: 3 units cost  \n  - To City 1: 2 units cost  \n  - To City 2: 3 units cost  \n  - To City 3: 2 units cost  \n  - To City 4: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 6**:  \n  - To City 0: 3 units cost  \n  - To City 1: 3 units cost  \n  - To City 2: 2 units cost  \n  - To City 3: 3 units cost  \n  - To City 4: 3 units cost  \n  - To City 5: 3 units cost  \n\n#### Transportation Constraints:\nEach route between cities has a maximum capacity for resource transportation:\n- **City 0**:  \n  - To City 1: Maximum 8 units  \n  - To City 2: Maximum 7 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 8 units  \n  - To City 5: Maximum 7 units  \n  - To City 6: Maximum 8 units  \n- **City 1**:  \n  - To City 0: Maximum 8 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 8 units  \n  - To City 4: Maximum 7 units  \n  - To City 5: Maximum 7 units  \n  - To City 6: Maximum 8 units  \n- **City 2**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 9 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 9 units  \n  - To City 6: Maximum 9 units  \n- **City 3**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 7 units  \n  - To City 2: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n  - To City 6: Maximum 9 units  \n- **City 4**:  \n  - To City 0: Maximum 8 units  \n  - To City 1: Maximum 9 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n  - To City 6: Maximum 8 units  \n- **City 5**:  \n  - To City 0: Maximum 8 units  \n  - To City 1: Maximum 7 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 8 units  \n  - To City 4: Maximum 8 units  \n  - To City 6: Maximum 8 units  \n- **City 6**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 8 units  \n  - To City 2: Maximum 8 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n\n#### City Capacity Constraints:\nEach city has a maximum capacity for incoming resources:\n- **City 0**: Maximum 18 units  \n- **City 1**: Maximum 13 units  \n- **City 2**: Maximum 14 units  \n- **City 3**: Maximum 16 units  \n- **City 4**: Maximum 15 units  \n- **City 5**: Maximum 18 units  \n- **City 6**: Maximum 14 units  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that:\n1. All net demands and supplies are balanced.\n2. No transportation route exceeds its capacity.\n3. No city exceeds its capacity for incoming resources.\n4. All transportation amounts are non-negative.\n\nBy solving this problem, you will ensure efficient resource distribution across the cities at the lowest possible cost.",
    "answer": 9,
    "ori": "13_optmath_bench",
    "index": 44,
    "description": " Managing Resource Distribution Across Cities\n\nImagine you are responsible for managing the distribution of a critical resource (e.g., medical supplies, food, or energy) across seven interconnected cities. Each city has a specific supply of the resource, a demand that must be met, and limited capacity to store or process incoming resources. Your goal is to minimize the total cost of transporting the resource between cities while ensuring that all demands are satisfied and no capacity limits are exceeded.\n\n#### City Details:\n- **City 0** has a net demand of 2 units (it requires 2 more units than it currently has).\n- **City 1** has a net demand of 2 units.\n- **City 2** has a net supply of 1 unit (it has 1 more unit than it needs).\n- **City 3** has a net supply of 2 units.\n- **City 4** is balanced, with no net demand or supply.\n- **City 5** has a net supply of 1 unit.\n- **City 6** is balanced, with no net demand or supply.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies depending on the route. Below are the costs per unit transported:\n- From **City 0**:  \n  - To City 1: 1 unit cost  \n  - To City 2: 2 units cost  \n  - To City 3: 3 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 1**:  \n  - To City 0: 2 units cost  \n  - To City 2: 3 units cost  \n  - To City 3: 2 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 2**:  \n  - To City 0: 2 units cost  \n  - To City 1: 1 unit cost  \n  - To City 3: 3 units cost  \n  - To City 4: 2 units cost  \n  - To City 5: 3 units cost  \n  - To City 6: 2 units cost  \n- From **City 3**:  \n  - To City 0: 2 units cost  \n  - To City 1: 2 units cost  \n  - To City 2: 2 units cost  \n  - To City 4: 3 units cost  \n  - To City 5: 1 unit cost  \n  - To City 6: 1 unit cost  \n- From **City 4**:  \n  - To City 0: 1 unit cost  \n  - To City 1: 1 unit cost  \n  - To City 2: 1 unit cost  \n  - To City 3: 1 unit cost  \n  - To City 5: 1 unit cost  \n  - To City 6: 1 unit cost  \n- From **City 5**:  \n  - To City 0: 3 units cost  \n  - To City 1: 2 units cost  \n  - To City 2: 3 units cost  \n  - To City 3: 2 units cost  \n  - To City 4: 3 units cost  \n  - To City 6: 3 units cost  \n- From **City 6**:  \n  - To City 0: 3 units cost  \n  - To City 1: 3 units cost  \n  - To City 2: 2 units cost  \n  - To City 3: 3 units cost  \n  - To City 4: 3 units cost  \n  - To City 5: 3 units cost  \n\n#### Transportation Constraints:\nEach route between cities has a maximum capacity for resource transportation:\n- **City 0**:  \n  - To City 1: Maximum 8 units  \n  - To City 2: Maximum 7 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 8 units  \n  - To City 5: Maximum 7 units  \n  - To City 6: Maximum 8 units  \n- **City 1**:  \n  - To City 0: Maximum 8 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 8 units  \n  - To City 4: Maximum 7 units  \n  - To City 5: Maximum 7 units  \n  - To City 6: Maximum 8 units  \n- **City 2**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 9 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 9 units  \n  - To City 6: Maximum 9 units  \n- **City 3**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 7 units  \n  - To City 2: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n  - To City 6: Maximum 9 units  \n- **City 4**:  \n  - To City 0: Maximum 8 units  \n  - To City 1: Maximum 9 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n  - To City 6: Maximum 8 units  \n- **City 5**:  \n  - To City 0: Maximum 8 units  \n  - To City 1: Maximum 7 units  \n  - To City 2: Maximum 9 units  \n  - To City 3: Maximum 8 units  \n  - To City 4: Maximum 8 units  \n  - To City 6: Maximum 8 units  \n- **City 6**:  \n  - To City 0: Maximum 9 units  \n  - To City 1: Maximum 8 units  \n  - To City 2: Maximum 8 units  \n  - To City 3: Maximum 7 units  \n  - To City 4: Maximum 9 units  \n  - To City 5: Maximum 8 units  \n\n#### City Capacity Constraints:\nEach city has a maximum capacity for incoming resources:\n- **City 0**: Maximum 18 units  \n- **City 1**: Maximum 13 units  \n- **City 2**: Maximum 14 units  \n- **City 3**: Maximum 16 units  \n- **City 4**: Maximum 15 units  \n- **City 5**: Maximum 18 units  \n- **City 6**: Maximum 14 units  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that:\n1. All net demands and supplies are balanced.\n2. No transportation route exceeds its capacity.\n3. No city exceeds its capacity for incoming resources.\n4. All transportation amounts are non-negative.\n\nBy solving this problem, you will ensure efficient resource distribution across the cities at the lowest possible cost.",
    "ground_truth": 9
  },
  {
    "question": "You are responsible for assigning 8 employees to 7 projects to minimize the total cost while meeting all project requirements and respecting employee availability and capacity limits. Each employee has a fixed total number of hours they must contribute, and each project requires a specific number of hours to be completed. The decision variables are binary, indicating whether an employee is assigned to a project or not. \n\nEmployee 0 must contribute exactly 1 hour in total, Employee 1 must contribute exactly 18 hours, Employee 2 must contribute exactly 15 hours, Employee 3 must contribute exactly 19 hours, Employee 4 must contribute exactly 18 hours, Employee 5 must contribute exactly 17 hours, Employee 6 must contribute exactly 15 hours, and Employee 7 must contribute exactly 19 hours. \n\nProject 0 requires exactly 15 hours, Project 1 requires exactly 19 hours, Project 2 requires exactly 16 hours, Project 3 requires exactly 20 hours, Project 4 requires exactly 17 hours, Project 5 requires exactly 16 hours, and Project 6 requires exactly 19 hours. \n\nEach employee has a maximum number of hours they can contribute to each project: Employee 0 can contribute up to 8 hours to Project 0, 9 hours to Project 1, 5 hours to Project 2, 10 hours to Project 3, 7 hours to Project 4, 10 hours to Project 5, and 10 hours to Project 6. Employee 1 can contribute up to 8 hours to Project 0, 10 hours to Project 1, 6 hours to Project 2, 6 hours to Project 3, 6 hours to Project 4, 8 hours to Project 5, and 5 hours to Project 6. Employee 2 can contribute up to 5 hours to Project 0, 7 hours to Project 1, 9 hours to Project 2, 7 hours to Project 3, 8 hours to Project 4, 9 hours to Project 5, and 7 hours to Project 6. Employee 3 can contribute up to 5 hours to Project 0, 6 hours to Project 1, 7 hours to Project 2, 7 hours to Project 3, 6 hours to Project 4, 8 hours to Project 5, and 9 hours to Project 6. Employee 4 can contribute up to 7 hours to Project 0, 10 hours to Project 1, 7 hours to Project 2, 6 hours to Project 3, 9 hours to Project 4, 5 hours to Project 5, and 8 hours to Project 6. Employee 5 can contribute up to 6 hours to Project 0, 10 hours to Project 1, 5 hours to Project 2, 9 hours to Project 3, 9 hours to Project 4, 6 hours to Project 5, and 10 hours to Project 6. Employee 6 can contribute up to 7 hours to Project 0, 8 hours to Project 1, 10 hours to Project 2, 5 hours to Project 3, 10 hours to Project 4, 10 hours to Project 5, and 6 hours to Project 6. Employee 7 can contribute up to 10 hours to Project 0, 7 hours to Project 1, 6 hours to Project 2, 9 hours to Project 3, 10 hours to Project 4, 5 hours to Project 5, and 7 hours to Project 6. \n\nThe cost of assigning Employee 0 to Project 0 is 29, to Project 1 is 30, to Project 2 is 32, to Project 3 is 34, to Project 4 is 26, to Project 5 is 35, and to Project 6 is 27. The cost of assigning Employee 1 to Project 0 is 32, to Project 1 is 25, to Project 2 is 35, to Project 3 is 25, to Project 4 is 28, to Project 5 is 26, and to Project 6 is 33. The cost of assigning Employee 2 to Project 0 is 31, to Project 1 is 29, to Project 2 is 35, to Project 3 is 29, to Project 4 is 32, to Project 5 is 25, and to Project 6 is 27. The cost of assigning Employee 3 to Project 0 is 30, to Project 1 is 29, to Project 2 is 28, to Project 3 is 35, to Project 4 is 29, to Project 5 is 27, and to Project 6 is 28. The cost of assigning Employee 4 to Project 0 is 33, to Project 1 is 28, to Project 2 is 26, to Project 3 is 31, to Project 4 is 26, to Project 5 is 29, and to Project 6 is 32. The cost of assigning Employee 5 to Project 0 is 35, to Project 1 is 34, to Project 2 is 29, to Project 3 is 32, to Project 4 is 33, to Project 5 is 31, and to Project 6 is 28. The cost of assigning Employee 6 to Project 0 is 27, to Project 1 is 30, to Project 2 is 27, to Project 3 is 30, to Project 4 is 32, to Project 5 is 32, and to Project 6 is 26. The cost of assigning Employee 7 to Project 0 is 30, to Project 1 is 27, to Project 2 is 31, to Project 3 is 32, to Project 4 is 34, to Project 5 is 32, and to Project 6 is 26. \n\nThe objective is to assign employees to projects such that all project requirements are met, no employee exceeds their total available hours, no employee exceeds their maximum contribution limit for any specific project, and the total cost of all assignments is minimized.",
    "answer": 3320,
    "ori": "13_optmath_bench",
    "index": 45,
    "description": "You are responsible for assigning 8 employees to 7 projects to minimize the total cost while meeting all project requirements and respecting employee availability and capacity limits. Each employee has a fixed total number of hours they must contribute, and each project requires a specific number of hours to be completed. The decision variables are binary, indicating whether an employee is assigned to a project or not. \n\nEmployee 0 must contribute exactly 1 hour in total, Employee 1 must contribute exactly 18 hours, Employee 2 must contribute exactly 15 hours, Employee 3 must contribute exactly 19 hours, Employee 4 must contribute exactly 18 hours, Employee 5 must contribute exactly 17 hours, Employee 6 must contribute exactly 15 hours, and Employee 7 must contribute exactly 19 hours. \n\nProject 0 requires exactly 15 hours, Project 1 requires exactly 19 hours, Project 2 requires exactly 16 hours, Project 3 requires exactly 20 hours, Project 4 requires exactly 17 hours, Project 5 requires exactly 16 hours, and Project 6 requires exactly 19 hours. \n\nEach employee has a maximum number of hours they can contribute to each project: Employee 0 can contribute up to 8 hours to Project 0, 9 hours to Project 1, 5 hours to Project 2, 10 hours to Project 3, 7 hours to Project 4, 10 hours to Project 5, and 10 hours to Project 6. Employee 1 can contribute up to 8 hours to Project 0, 10 hours to Project 1, 6 hours to Project 2, 6 hours to Project 3, 6 hours to Project 4, 8 hours to Project 5, and 5 hours to Project 6. Employee 2 can contribute up to 5 hours to Project 0, 7 hours to Project 1, 9 hours to Project 2, 7 hours to Project 3, 8 hours to Project 4, 9 hours to Project 5, and 7 hours to Project 6. Employee 3 can contribute up to 5 hours to Project 0, 6 hours to Project 1, 7 hours to Project 2, 7 hours to Project 3, 6 hours to Project 4, 8 hours to Project 5, and 9 hours to Project 6. Employee 4 can contribute up to 7 hours to Project 0, 10 hours to Project 1, 7 hours to Project 2, 6 hours to Project 3, 9 hours to Project 4, 5 hours to Project 5, and 8 hours to Project 6. Employee 5 can contribute up to 6 hours to Project 0, 10 hours to Project 1, 5 hours to Project 2, 9 hours to Project 3, 9 hours to Project 4, 6 hours to Project 5, and 10 hours to Project 6. Employee 6 can contribute up to 7 hours to Project 0, 8 hours to Project 1, 10 hours to Project 2, 5 hours to Project 3, 10 hours to Project 4, 10 hours to Project 5, and 6 hours to Project 6. Employee 7 can contribute up to 10 hours to Project 0, 7 hours to Project 1, 6 hours to Project 2, 9 hours to Project 3, 10 hours to Project 4, 5 hours to Project 5, and 7 hours to Project 6. \n\nThe cost of assigning Employee 0 to Project 0 is 29, to Project 1 is 30, to Project 2 is 32, to Project 3 is 34, to Project 4 is 26, to Project 5 is 35, and to Project 6 is 27. The cost of assigning Employee 1 to Project 0 is 32, to Project 1 is 25, to Project 2 is 35, to Project 3 is 25, to Project 4 is 28, to Project 5 is 26, and to Project 6 is 33. The cost of assigning Employee 2 to Project 0 is 31, to Project 1 is 29, to Project 2 is 35, to Project 3 is 29, to Project 4 is 32, to Project 5 is 25, and to Project 6 is 27. The cost of assigning Employee 3 to Project 0 is 30, to Project 1 is 29, to Project 2 is 28, to Project 3 is 35, to Project 4 is 29, to Project 5 is 27, and to Project 6 is 28. The cost of assigning Employee 4 to Project 0 is 33, to Project 1 is 28, to Project 2 is 26, to Project 3 is 31, to Project 4 is 26, to Project 5 is 29, and to Project 6 is 32. The cost of assigning Employee 5 to Project 0 is 35, to Project 1 is 34, to Project 2 is 29, to Project 3 is 32, to Project 4 is 33, to Project 5 is 31, and to Project 6 is 28. The cost of assigning Employee 6 to Project 0 is 27, to Project 1 is 30, to Project 2 is 27, to Project 3 is 30, to Project 4 is 32, to Project 5 is 32, and to Project 6 is 26. The cost of assigning Employee 7 to Project 0 is 30, to Project 1 is 27, to Project 2 is 31, to Project 3 is 32, to Project 4 is 34, to Project 5 is 32, and to Project 6 is 26. \n\nThe objective is to assign employees to projects such that all project requirements are met, no employee exceeds their total available hours, no employee exceeds their maximum contribution limit for any specific project, and the total cost of all assignments is minimized.",
    "ground_truth": 3320
  },
  {
    "question": "You are tasked with optimizing the placement of facilities across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall benefit derived from their interactions. Each location has the potential to host a facility, but due to budget constraints, you can only select **exactly 3 locations** to establish facilities. The goal is to maximize the total benefit generated by the interactions between the selected facilities.\n\n#### Key Details:\n1. **Facility Selection**: You must choose exactly 3 out of the 5 locations to establish facilities. Each location can either be selected (1) or not selected (0).\n2. **Interaction Benefits**: The benefit of interaction between any two facilities depends on the specific pair of locations. For example:\n   - If facilities are placed at Node 0 and Node 1, the interaction benefit is **16**.\n   - If facilities are placed at Node 0 and Node 2, the interaction benefit is **20**.\n   - Similarly, the interaction benefits for all other pairs are provided in the table below.\n\n3. **Interaction Rules**:\n   - An interaction benefit is only counted if **both facilities in the pair are selected**. For example, if Node 0 and Node 1 are both selected, the interaction benefit of 16 is added to the total.\n   - If only one facility in a pair is selected, no interaction benefit is counted for that pair.\n\n4. **Interaction Benefit Table**:\n   | Pair of Nodes | Interaction Benefit |\n   |---------------|---------------------|\n   | Node 0 & Node 1 | 16                  |\n   | Node 0 & Node 2 | 20                  |\n   | Node 0 & Node 3 | 18                  |\n   | Node 0 & Node 4 | 22                  |\n   | Node 1 & Node 0 | 25                  |\n   | Node 1 & Node 2 | 24                  |\n   | Node 1 & Node 3 | 17                  |\n   | Node 1 & Node 4 | 16                  |\n   | Node 2 & Node 0 | 19                  |\n   | Node 2 & Node 1 | 22                  |\n   | Node 2 & Node 3 | 18                  |\n   | Node 2 & Node 4 | 23                  |\n   | Node 3 & Node 0 | 21                  |\n   | Node 3 & Node 1 | 21                  |\n   | Node 3 & Node 2 | 25                  |\n   | Node 3 & Node 4 | 17                  |\n   | Node 4 & Node 0 | 20                  |\n   | Node 4 & Node 1 | 19                  |\n   | Node 4 & Node 2 | 22                  |\n   | Node 4 & Node 3 | 16                  |\n\n5. **Constraints**:\n   - **Facility Selection Constraint**: Exactly 3 facilities must be selected out of the 5 locations.\n   - **Interaction Constraints**: For each pair of locations, the interaction benefit is only counted if both facilities in the pair are selected. This is enforced by ensuring that:\n     - If either facility in a pair is not selected, the interaction benefit for that pair is not counted.\n     - If both facilities in a pair are selected, the interaction benefit is fully counted.\n\n6. **Objective**:\n   - Maximize the total interaction benefit across all selected facility pairs.\n\n#### Example:\nSuppose you select facilities at Node 0, Node 1, and Node 2. The total interaction benefit would be calculated as follows:\n- Node 0 & Node 1: 16\n- Node 0 & Node 2: 20\n- Node 1 & Node 2: 24  \nTotal Benefit = 16 + 20 + 24 = **60**\n\nYour task is to determine the optimal selection of 3 facilities that maximizes the total interaction benefit, considering all the constraints and interaction rules provided.",
    "answer": 127,
    "ori": "13_optmath_bench",
    "index": 46,
    "description": "You are tasked with optimizing the placement of facilities across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall benefit derived from their interactions. Each location has the potential to host a facility, but due to budget constraints, you can only select **exactly 3 locations** to establish facilities. The goal is to maximize the total benefit generated by the interactions between the selected facilities.\n\n#### Key Details:\n1. **Facility Selection**: You must choose exactly 3 out of the 5 locations to establish facilities. Each location can either be selected (1) or not selected (0).\n2. **Interaction Benefits**: The benefit of interaction between any two facilities depends on the specific pair of locations. For example:\n   - If facilities are placed at Node 0 and Node 1, the interaction benefit is **16**.\n   - If facilities are placed at Node 0 and Node 2, the interaction benefit is **20**.\n   - Similarly, the interaction benefits for all other pairs are provided in the table below.\n\n3. **Interaction Rules**:\n   - An interaction benefit is only counted if **both facilities in the pair are selected**. For example, if Node 0 and Node 1 are both selected, the interaction benefit of 16 is added to the total.\n   - If only one facility in a pair is selected, no interaction benefit is counted for that pair.\n\n4. **Interaction Benefit Table**:\n   | Pair of Nodes | Interaction Benefit |\n   |---------------|---------------------|\n   | Node 0 & Node 1 | 16                  |\n   | Node 0 & Node 2 | 20                  |\n   | Node 0 & Node 3 | 18                  |\n   | Node 0 & Node 4 | 22                  |\n   | Node 1 & Node 0 | 25                  |\n   | Node 1 & Node 2 | 24                  |\n   | Node 1 & Node 3 | 17                  |\n   | Node 1 & Node 4 | 16                  |\n   | Node 2 & Node 0 | 19                  |\n   | Node 2 & Node 1 | 22                  |\n   | Node 2 & Node 3 | 18                  |\n   | Node 2 & Node 4 | 23                  |\n   | Node 3 & Node 0 | 21                  |\n   | Node 3 & Node 1 | 21                  |\n   | Node 3 & Node 2 | 25                  |\n   | Node 3 & Node 4 | 17                  |\n   | Node 4 & Node 0 | 20                  |\n   | Node 4 & Node 1 | 19                  |\n   | Node 4 & Node 2 | 22                  |\n   | Node 4 & Node 3 | 16                  |\n\n5. **Constraints**:\n   - **Facility Selection Constraint**: Exactly 3 facilities must be selected out of the 5 locations.\n   - **Interaction Constraints**: For each pair of locations, the interaction benefit is only counted if both facilities in the pair are selected. This is enforced by ensuring that:\n     - If either facility in a pair is not selected, the interaction benefit for that pair is not counted.\n     - If both facilities in a pair are selected, the interaction benefit is fully counted.\n\n6. **Objective**:\n   - Maximize the total interaction benefit across all selected facility pairs.\n\n#### Example:\nSuppose you select facilities at Node 0, Node 1, and Node 2. The total interaction benefit would be calculated as follows:\n- Node 0 & Node 1: 16\n- Node 0 & Node 2: 20\n- Node 1 & Node 2: 24  \nTotal Benefit = 16 + 20 + 24 = **60**\n\nYour task is to determine the optimal selection of 3 facilities that maximizes the total interaction benefit, considering all the constraints and interaction rules provided.",
    "ground_truth": 127
  },
  {
    "question": "There are 5 jobs labeled Job 0 to Job 4, each requiring processing on 4 machines labeled Machine 0 to Machine 3. Each job has a specific processing time on each machine: Job 0 takes 5 hours on Machine 0, 9 hours on Machine 1, 7 hours on Machine 2, and 7 hours on Machine 3; Job 1 takes 10 hours on Machine 0, 8 hours on Machine 1, 8 hours on Machine 2, and 9 hours on Machine 3; Job 2 takes 6 hours on Machine 0, 8 hours on Machine 1, 9 hours on Machine 2, and 7 hours on Machine 3; Job 3 takes 7 hours on Machine 0, 7 hours on Machine 1, 8 hours on Machine 2, and 8 hours on Machine 3; Job 4 takes 9 hours on Machine 0, 5 hours on Machine 1, 5 hours on Machine 2, and 9 hours on Machine 3. Each job must be assigned to exactly one position in the schedule, and each position must be assigned exactly one job. A job cannot start on a machine until it has completed processing on the previous machine in the sequence. Additionally, a job in a later position in the schedule cannot start on a machine until the job in the previous position has completed processing on that machine. The objective is to minimize the total completion time, which includes the start time of the last job on the last machine (Machine 3) and the processing time of the last job on Machine 3. The start times for each job on each machine must be non-negative, and all constraints must be satisfied to avoid delays and resource conflicts.",
    "answer": 62,
    "ori": "13_optmath_bench",
    "index": 47,
    "description": "There are 5 jobs labeled Job 0 to Job 4, each requiring processing on 4 machines labeled Machine 0 to Machine 3. Each job has a specific processing time on each machine: Job 0 takes 5 hours on Machine 0, 9 hours on Machine 1, 7 hours on Machine 2, and 7 hours on Machine 3; Job 1 takes 10 hours on Machine 0, 8 hours on Machine 1, 8 hours on Machine 2, and 9 hours on Machine 3; Job 2 takes 6 hours on Machine 0, 8 hours on Machine 1, 9 hours on Machine 2, and 7 hours on Machine 3; Job 3 takes 7 hours on Machine 0, 7 hours on Machine 1, 8 hours on Machine 2, and 8 hours on Machine 3; Job 4 takes 9 hours on Machine 0, 5 hours on Machine 1, 5 hours on Machine 2, and 9 hours on Machine 3. Each job must be assigned to exactly one position in the schedule, and each position must be assigned exactly one job. A job cannot start on a machine until it has completed processing on the previous machine in the sequence. Additionally, a job in a later position in the schedule cannot start on a machine until the job in the previous position has completed processing on that machine. The objective is to minimize the total completion time, which includes the start time of the last job on the last machine (Machine 3) and the processing time of the last job on Machine 3. The start times for each job on each machine must be non-negative, and all constraints must be satisfied to avoid delays and resource conflicts.",
    "ground_truth": 62
  },
  {
    "question": "Minimize the total operational cost of a power generation system over six periods, consisting of Type 0 and Type 1 generators. The cost includes a fixed base cost of 80 units per generator per period, a power generation cost of 4 units per MW produced, and startup costs of 354 units for Type 0 generators and 347 units for Type 1 generators. The system must meet the following demand in each period: 201 MW in period 0, 191 MW in period 1, 182 MW in period 2, 190 MW in period 3, 194 MW in period 4, and 168 MW in period 5. Each Type 0 generator can produce between 34 MW and 127 MW, and no more than 4 Type 0 generators can operate in any period. Each Type 1 generator can produce between 35 MW and 129 MW, and no more than 1 Type 1 generator can operate in any period. The total maximum power output of all generators in each period must be at least 15% higher than the demand for that period, ensuring a reserve margin. For Type 0 generators, the number of operational generators in any period cannot exceed the number from the previous period plus the number started in the current period, and the same applies to Type 1 generators. The number of generators and startup decisions must be integers. The goal is to determine the optimal number of generators to operate, their power output levels, and startup decisions to minimize total costs while satisfying all constraints.",
    "answer": 5464,
    "ori": "13_optmath_bench",
    "index": 48,
    "description": "Minimize the total operational cost of a power generation system over six periods, consisting of Type 0 and Type 1 generators. The cost includes a fixed base cost of 80 units per generator per period, a power generation cost of 4 units per MW produced, and startup costs of 354 units for Type 0 generators and 347 units for Type 1 generators. The system must meet the following demand in each period: 201 MW in period 0, 191 MW in period 1, 182 MW in period 2, 190 MW in period 3, 194 MW in period 4, and 168 MW in period 5. Each Type 0 generator can produce between 34 MW and 127 MW, and no more than 4 Type 0 generators can operate in any period. Each Type 1 generator can produce between 35 MW and 129 MW, and no more than 1 Type 1 generator can operate in any period. The total maximum power output of all generators in each period must be at least 15% higher than the demand for that period, ensuring a reserve margin. For Type 0 generators, the number of operational generators in any period cannot exceed the number from the previous period plus the number started in the current period, and the same applies to Type 1 generators. The number of generators and startup decisions must be integers. The goal is to determine the optimal number of generators to operate, their power output levels, and startup decisions to minimize total costs while satisfying all constraints.",
    "ground_truth": 5464
  },
  {
    "question": "You are tasked with managing the distribution of resources across a network of eight cities. Each city has a specific supply of resources and a demand that must be met. The goal is to minimize the total cost of transporting resources between cities while ensuring that all demands are satisfied and all constraints are respected.\n\n#### City Details:\n- **City 0** has a net supply of 4 units.\n- **City 1** has a net demand of 1 unit.\n- **City 2** has a net demand of 2 units.\n- **City 3** has a net supply of 1 unit.\n- **City 4** has a net demand of 1 unit.\n- **City 5** has a net demand of 1 unit.\n- **City 6** and **City 7** are balanced, with no net supply or demand.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies. Here are the costs for each possible route:\n- From **City 0** to **City 1**: 3 units\n- From **City 0** to **City 2**: 3 units\n- From **City 0** to **City 3**: 3 units\n- From **City 0** to **City 4**: 3 units\n- From **City 0** to **City 5**: 1 unit\n- From **City 0** to **City 6**: 3 units\n- From **City 0** to **City 7**: 2 units\n- From **City 1** to **City 0**: 3 units\n- From **City 1** to **City 2**: 2 units\n- From **City 1** to **City 3**: 2 units\n- From **City 1** to **City 4**: 3 units\n- From **City 1** to **City 5**: 2 units\n- From **City 1** to **City 6**: 2 units\n- From **City 1** to **City 7**: 1 unit\n- From **City 2** to **City 0**: 1 unit\n- From **City 2** to **City 1**: 1 unit\n- From **City 2** to **City 3**: 3 units\n- From **City 2** to **City 4**: 1 unit\n- From **City 2** to **City 5**: 2 units\n- From **City 2** to **City 6**: 2 units\n- From **City 2** to **City 7**: 3 units\n- From **City 3** to **City 0**: 1 unit\n- From **City 3** to **City 1**: 3 units\n- From **City 3** to **City 2**: 1 unit\n- From **City 3** to **City 4**: 1 unit\n- From **City 3** to **City 5**: 1 unit\n- From **City 3** to **City 6**: 2 units\n- From **City 3** to **City 7**: 3 units\n- From **City 4** to **City 0**: 3 units\n- From **City 4** to **City 1**: 2 units\n- From **City 4** to **City 2**: 1 unit\n- From **City 4** to **City 3**: 2 units\n- From **City 4** to **City 5**: 3 units\n- From **City 4** to **City 6**: 2 units\n- From **City 4** to **City 7**: 3 units\n- From **City 5** to **City 0**: 1 unit\n- From **City 5** to **City 1**: 2 units\n- From **City 5** to **City 2**: 3 units\n- From **City 5** to **City 3**: 2 units\n- From **City 5** to **City 4**: 1 unit\n- From **City 5** to **City 6**: 3 units\n- From **City 5** to **City 7**: 3 units\n- From **City 6** to **City 0**: 3 units\n- From **City 6** to **City 1**: 1 unit\n- From **City 6** to **City 2**: 1 unit\n- From **City 6** to **City 3**: 3 units\n- From **City 6** to **City 4**: 2 units\n- From **City 6** to **City 5**: 1 unit\n- From **City 6** to **City 7**: 3 units\n- From **City 7** to **City 0**: 3 units\n- From **City 7** to **City 1**: 3 units\n- From **City 7** to **City 2**: 1 unit\n- From **City 7** to **City 3**: 2 units\n- From **City 7** to **City 4**: 2 units\n- From **City 7** to **City 5**: 1 unit\n- From **City 7** to **City 6**: 3 units\n\n#### Constraints:\n1. **Flow Balance**: The total resources entering a city must equal the total resources leaving that city, adjusted for its supply or demand.\n2. **Link Capacity**: The amount of resources transported between any two cities cannot exceed the capacity of the link:\n   - **City 0** to **City 1**: 9 units\n   - **City 0** to **City 2**: 7 units\n   - **City 0** to **City 3**: 9 units\n   - **City 0** to **City 4**: 7 units\n   - **City 0** to **City 5**: 8 units\n   - **City 0** to **City 6**: 9 units\n   - **City 0** to **City 7**: 9 units\n   - **City 1** to **City 0**: 9 units\n   - **City 1** to **City 2**: 7 units\n   - **City 1** to **City 3**: 9 units\n   - **City 1** to **City 4**: 7 units\n   - **City 1** to **City 5**: 9 units\n   - **City 1** to **City 6**: 8 units\n   - **City 1** to **City 7**: 7 units\n   - **City 2** to **City 0**: 8 units\n   - **City 2** to **City 1**: 7 units\n   - **City 2** to **City 3**: 8 units\n   - **City 2** to **City 4**: 9 units\n   - **City 2** to **City 5**: 9 units\n   - **City 2** to **City 6**: 7 units\n   - **City 2** to **City 7**: 8 units\n   - **City 3** to **City 0**: 7 units\n   - **City 3** to **City 1**: 7 units\n   - **City 3** to **City 2**: 9 units\n   - **City 3** to **City 4**: 9 units\n   - **City 3** to **City 5**: 9 units\n   - **City 3** to **City 6**: 7 units\n   - **City 3** to **City 7**: 9 units\n   - **City 4** to **City 0**: 8 units\n   - **City 4** to **City 1**: 8 units\n   - **City 4** to **City 2**: 8 units\n   - **City 4** to **City 3**: 8 units\n   - **City 4** to **City 5**: 8 units\n   - **City 4** to **City 6**: 8 units\n   - **City 4** to **City 7**: 9 units\n   - **City 5** to **City 0**: 7 units\n   - **City 5** to **City 1**: 9 units\n   - **City 5** to **City 2**: 8 units\n   - **City 5** to **City 3**: 7 units\n   - **City 5** to **City 4**: 7 units\n   - **City 5** to **City 6**: 9 units\n   - **City 5** to **City 7**: 7 units\n   - **City 6** to **City 0**: 9 units\n   - **City 6** to **City 1**: 8 units\n   - **City 6** to **City 2**: 8 units\n   - **City 6** to **City 3**: 7 units\n   - **City 6** to **City 4**: 7 units\n   - **City 6** to **City 5**: 8 units\n   - **City 6** to **City 7**: 8 units\n   - **City 7** to **City 0**: 9 units\n   - **City 7** to **City 1**: 9 units\n   - **City 7** to **City 2**: 7 units\n   - **City 7** to **City 3**: 8 units\n   - **City 7** to **City 4**: 8 units\n   - **City 7** to **City 5**: 8 units\n   - **City 7** to **City 6**: 8 units\n\n3. **City Capacity**: The total resources entering a city cannot exceed its capacity:\n   - **City 0**: 19 units\n   - **City 1**: 17 units\n   - **City 2**: 15 units\n   - **City 3**: 16 units\n   - **City 4**: 14 units\n   - **City 5**: 15 units\n   - **City 6**: 14 units\n   - **City 7**: 13 units\n\n#### Objective:\nYour objective is to determine the optimal amount of resources to transport between each pair of cities to minimize the total transportation cost while ensuring that all demands are met and all constraints are satisfied.\n\nThis problem requires careful planning to balance the supply and demand across the network, respecting the capacity limits of both the transportation links and the cities themselves. The solution will provide the most cost-effective way to distribute resources across the cities.",
    "answer": 7,
    "ori": "13_optmath_bench",
    "index": 49,
    "description": "You are tasked with managing the distribution of resources across a network of eight cities. Each city has a specific supply of resources and a demand that must be met. The goal is to minimize the total cost of transporting resources between cities while ensuring that all demands are satisfied and all constraints are respected.\n\n#### City Details:\n- **City 0** has a net supply of 4 units.\n- **City 1** has a net demand of 1 unit.\n- **City 2** has a net demand of 2 units.\n- **City 3** has a net supply of 1 unit.\n- **City 4** has a net demand of 1 unit.\n- **City 5** has a net demand of 1 unit.\n- **City 6** and **City 7** are balanced, with no net supply or demand.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies. Here are the costs for each possible route:\n- From **City 0** to **City 1**: 3 units\n- From **City 0** to **City 2**: 3 units\n- From **City 0** to **City 3**: 3 units\n- From **City 0** to **City 4**: 3 units\n- From **City 0** to **City 5**: 1 unit\n- From **City 0** to **City 6**: 3 units\n- From **City 0** to **City 7**: 2 units\n- From **City 1** to **City 0**: 3 units\n- From **City 1** to **City 2**: 2 units\n- From **City 1** to **City 3**: 2 units\n- From **City 1** to **City 4**: 3 units\n- From **City 1** to **City 5**: 2 units\n- From **City 1** to **City 6**: 2 units\n- From **City 1** to **City 7**: 1 unit\n- From **City 2** to **City 0**: 1 unit\n- From **City 2** to **City 1**: 1 unit\n- From **City 2** to **City 3**: 3 units\n- From **City 2** to **City 4**: 1 unit\n- From **City 2** to **City 5**: 2 units\n- From **City 2** to **City 6**: 2 units\n- From **City 2** to **City 7**: 3 units\n- From **City 3** to **City 0**: 1 unit\n- From **City 3** to **City 1**: 3 units\n- From **City 3** to **City 2**: 1 unit\n- From **City 3** to **City 4**: 1 unit\n- From **City 3** to **City 5**: 1 unit\n- From **City 3** to **City 6**: 2 units\n- From **City 3** to **City 7**: 3 units\n- From **City 4** to **City 0**: 3 units\n- From **City 4** to **City 1**: 2 units\n- From **City 4** to **City 2**: 1 unit\n- From **City 4** to **City 3**: 2 units\n- From **City 4** to **City 5**: 3 units\n- From **City 4** to **City 6**: 2 units\n- From **City 4** to **City 7**: 3 units\n- From **City 5** to **City 0**: 1 unit\n- From **City 5** to **City 1**: 2 units\n- From **City 5** to **City 2**: 3 units\n- From **City 5** to **City 3**: 2 units\n- From **City 5** to **City 4**: 1 unit\n- From **City 5** to **City 6**: 3 units\n- From **City 5** to **City 7**: 3 units\n- From **City 6** to **City 0**: 3 units\n- From **City 6** to **City 1**: 1 unit\n- From **City 6** to **City 2**: 1 unit\n- From **City 6** to **City 3**: 3 units\n- From **City 6** to **City 4**: 2 units\n- From **City 6** to **City 5**: 1 unit\n- From **City 6** to **City 7**: 3 units\n- From **City 7** to **City 0**: 3 units\n- From **City 7** to **City 1**: 3 units\n- From **City 7** to **City 2**: 1 unit\n- From **City 7** to **City 3**: 2 units\n- From **City 7** to **City 4**: 2 units\n- From **City 7** to **City 5**: 1 unit\n- From **City 7** to **City 6**: 3 units\n\n#### Constraints:\n1. **Flow Balance**: The total resources entering a city must equal the total resources leaving that city, adjusted for its supply or demand.\n2. **Link Capacity**: The amount of resources transported between any two cities cannot exceed the capacity of the link:\n   - **City 0** to **City 1**: 9 units\n   - **City 0** to **City 2**: 7 units\n   - **City 0** to **City 3**: 9 units\n   - **City 0** to **City 4**: 7 units\n   - **City 0** to **City 5**: 8 units\n   - **City 0** to **City 6**: 9 units\n   - **City 0** to **City 7**: 9 units\n   - **City 1** to **City 0**: 9 units\n   - **City 1** to **City 2**: 7 units\n   - **City 1** to **City 3**: 9 units\n   - **City 1** to **City 4**: 7 units\n   - **City 1** to **City 5**: 9 units\n   - **City 1** to **City 6**: 8 units\n   - **City 1** to **City 7**: 7 units\n   - **City 2** to **City 0**: 8 units\n   - **City 2** to **City 1**: 7 units\n   - **City 2** to **City 3**: 8 units\n   - **City 2** to **City 4**: 9 units\n   - **City 2** to **City 5**: 9 units\n   - **City 2** to **City 6**: 7 units\n   - **City 2** to **City 7**: 8 units\n   - **City 3** to **City 0**: 7 units\n   - **City 3** to **City 1**: 7 units\n   - **City 3** to **City 2**: 9 units\n   - **City 3** to **City 4**: 9 units\n   - **City 3** to **City 5**: 9 units\n   - **City 3** to **City 6**: 7 units\n   - **City 3** to **City 7**: 9 units\n   - **City 4** to **City 0**: 8 units\n   - **City 4** to **City 1**: 8 units\n   - **City 4** to **City 2**: 8 units\n   - **City 4** to **City 3**: 8 units\n   - **City 4** to **City 5**: 8 units\n   - **City 4** to **City 6**: 8 units\n   - **City 4** to **City 7**: 9 units\n   - **City 5** to **City 0**: 7 units\n   - **City 5** to **City 1**: 9 units\n   - **City 5** to **City 2**: 8 units\n   - **City 5** to **City 3**: 7 units\n   - **City 5** to **City 4**: 7 units\n   - **City 5** to **City 6**: 9 units\n   - **City 5** to **City 7**: 7 units\n   - **City 6** to **City 0**: 9 units\n   - **City 6** to **City 1**: 8 units\n   - **City 6** to **City 2**: 8 units\n   - **City 6** to **City 3**: 7 units\n   - **City 6** to **City 4**: 7 units\n   - **City 6** to **City 5**: 8 units\n   - **City 6** to **City 7**: 8 units\n   - **City 7** to **City 0**: 9 units\n   - **City 7** to **City 1**: 9 units\n   - **City 7** to **City 2**: 7 units\n   - **City 7** to **City 3**: 8 units\n   - **City 7** to **City 4**: 8 units\n   - **City 7** to **City 5**: 8 units\n   - **City 7** to **City 6**: 8 units\n\n3. **City Capacity**: The total resources entering a city cannot exceed its capacity:\n   - **City 0**: 19 units\n   - **City 1**: 17 units\n   - **City 2**: 15 units\n   - **City 3**: 16 units\n   - **City 4**: 14 units\n   - **City 5**: 15 units\n   - **City 6**: 14 units\n   - **City 7**: 13 units\n\n#### Objective:\nYour objective is to determine the optimal amount of resources to transport between each pair of cities to minimize the total transportation cost while ensuring that all demands are met and all constraints are satisfied.\n\nThis problem requires careful planning to balance the supply and demand across the network, respecting the capacity limits of both the transportation links and the cities themselves. The solution will provide the most cost-effective way to distribute resources across the cities.",
    "ground_truth": 7
  },
  {
    "question": "The problem involves determining the most cost-effective way to transport medical supplies across a network of 10 hospitals (node_0 to node_9) while minimizing total transportation costs. Each hospital is interconnected, and the cost of transporting supplies between any two hospitals varies. The decision variables are binary, representing whether a route between two hospitals is used (1) or not (0). The objective is to minimize the total cost of transporting supplies, calculated as the sum of the costs of all activated routes.\n\nThe constraints ensure that the supply balance is maintained across all hospitals. Specifically, node_0 must have a net supply of +1, indicating it is the source of supplies, while node_9 must have a net supply of -1, indicating it is the destination. All intermediate hospitals (node_1 to node_8) must have a net supply of 0, meaning they neither gain nor lose supplies overall. The flow balance constraints ensure that the total flow into each hospital equals the total flow out of it, with the exception of node_0 and node_9, which have specific net supply requirements. All decision variables are binary, meaning routes are either fully used or not used at all. The goal is to find the set of routes that satisfies these constraints while minimizing the total transportation cost.",
    "answer": 20,
    "ori": "13_optmath_bench",
    "index": 50,
    "description": "The problem involves determining the most cost-effective way to transport medical supplies across a network of 10 hospitals (node_0 to node_9) while minimizing total transportation costs. Each hospital is interconnected, and the cost of transporting supplies between any two hospitals varies. The decision variables are binary, representing whether a route between two hospitals is used (1) or not (0). The objective is to minimize the total cost of transporting supplies, calculated as the sum of the costs of all activated routes.\n\nThe constraints ensure that the supply balance is maintained across all hospitals. Specifically, node_0 must have a net supply of +1, indicating it is the source of supplies, while node_9 must have a net supply of -1, indicating it is the destination. All intermediate hospitals (node_1 to node_8) must have a net supply of 0, meaning they neither gain nor lose supplies overall. The flow balance constraints ensure that the total flow into each hospital equals the total flow out of it, with the exception of node_0 and node_9, which have specific net supply requirements. All decision variables are binary, meaning routes are either fully used or not used at all. The goal is to find the set of routes that satisfies these constraints while minimizing the total transportation cost.",
    "ground_truth": 20
  },
  {
    "question": "There are 7 jobs, each with 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. The facility has multiple machines, and some operations from different jobs must be performed on the same machine. Operations sharing the same machine cannot overlap in time. The order of operations on shared machines is determined by binary decision variables, which can only take values of 0 or 1. The goal is to minimize the total completion time, known as the makespan, which is the latest completion time among all operations. \n\nEach operation in a job must start only after the previous operation in the same job is completed. Operations that share the same machine must be scheduled such that one starts only after the other is completed, as determined by the binary variables. The makespan must be at least as large as the completion time of every operation. All operation start times must be non-negative. The binary variables enforce the order of operations on shared machines, ensuring no overlap. The processing time for all operations is 1 unit of time. The makespan is determined by the latest completion time among all operations, and the objective is to minimize this makespan.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 51,
    "description": "There are 7 jobs, each with 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. The facility has multiple machines, and some operations from different jobs must be performed on the same machine. Operations sharing the same machine cannot overlap in time. The order of operations on shared machines is determined by binary decision variables, which can only take values of 0 or 1. The goal is to minimize the total completion time, known as the makespan, which is the latest completion time among all operations. \n\nEach operation in a job must start only after the previous operation in the same job is completed. Operations that share the same machine must be scheduled such that one starts only after the other is completed, as determined by the binary variables. The makespan must be at least as large as the completion time of every operation. All operation start times must be non-negative. The binary variables enforce the order of operations on shared machines, ensuring no overlap. The processing time for all operations is 1 unit of time. The makespan is determined by the latest completion time among all operations, and the objective is to minimize this makespan.",
    "ground_truth": 3
  },
  {
    "question": "Minimize the total penalty costs associated with landing five aircraft either earlier or later than their target times, while ensuring safe separation between consecutive landings. Each aircraft has a target landing time, earliest and latest possible landing times, and penalties for landing early or late. The penalties are \\$15, \\$10, \\$17, \\$15, and \\$15 per minute early, and \\$11, \\$16, \\$17, \\$15, and \\$12 per minute late for Aircraft 0, 1, 2, 3, and 4, respectively. The target landing times are 71, 95, 73, 80, and 78 minutes, with earliest landing times of 60, 65, 60, 60, and 60 minutes, and latest landing times of 100 minutes for all aircraft.\n\nTo ensure safety, specific separation times must be maintained between consecutive landings. If Aircraft 0 lands before Aircraft 1, there must be at least 7 minutes between their landings. If Aircraft 0 lands before Aircraft 2, there must be at least 5 minutes between their landings. If Aircraft 0 lands before Aircraft 3, there must be at least 5 minutes between their landings. If Aircraft 0 lands before Aircraft 4, there must be at least 6 minutes between their landings. If Aircraft 1 lands before Aircraft 2, there must be at least 5 minutes between their landings. If Aircraft 1 lands before Aircraft 3, there must be at least 8 minutes between their landings. If Aircraft 1 lands before Aircraft 4, there must be at least 6 minutes between their landings. If Aircraft 2 lands before Aircraft 3, there must be at least 7 minutes between their landings. If Aircraft 2 lands before Aircraft 4, there must be at least 7 minutes between their landings. If Aircraft 3 lands before Aircraft 4, there must be at least 7 minutes between their landings.\n\nThe landing time for each aircraft must be between its earliest and latest possible landing times. The separation times between consecutive landings must be enforced based on the order in which the aircraft land. The penalties for landing early or late are applied based on the deviation from the target landing times. The objective is to determine the actual landing times for all five aircraft such that the total penalty cost is minimized, each aircraft lands within its specified earliest and latest landing times, and the required separation times between consecutive landings are strictly maintained. Binary decision variables are used to determine the order of landings between aircraft pairs, ensuring proper separation based on the landing order. Constraints enforce the relationship between landing times and the binary variables, ensuring proper separation based on the landing order. The binary variables are restricted to 0 or 1.",
    "answer": 153,
    "ori": "13_optmath_bench",
    "index": 52,
    "description": "Minimize the total penalty costs associated with landing five aircraft either earlier or later than their target times, while ensuring safe separation between consecutive landings. Each aircraft has a target landing time, earliest and latest possible landing times, and penalties for landing early or late. The penalties are \\$15, \\$10, \\$17, \\$15, and \\$15 per minute early, and \\$11, \\$16, \\$17, \\$15, and \\$12 per minute late for Aircraft 0, 1, 2, 3, and 4, respectively. The target landing times are 71, 95, 73, 80, and 78 minutes, with earliest landing times of 60, 65, 60, 60, and 60 minutes, and latest landing times of 100 minutes for all aircraft.\n\nTo ensure safety, specific separation times must be maintained between consecutive landings. If Aircraft 0 lands before Aircraft 1, there must be at least 7 minutes between their landings. If Aircraft 0 lands before Aircraft 2, there must be at least 5 minutes between their landings. If Aircraft 0 lands before Aircraft 3, there must be at least 5 minutes between their landings. If Aircraft 0 lands before Aircraft 4, there must be at least 6 minutes between their landings. If Aircraft 1 lands before Aircraft 2, there must be at least 5 minutes between their landings. If Aircraft 1 lands before Aircraft 3, there must be at least 8 minutes between their landings. If Aircraft 1 lands before Aircraft 4, there must be at least 6 minutes between their landings. If Aircraft 2 lands before Aircraft 3, there must be at least 7 minutes between their landings. If Aircraft 2 lands before Aircraft 4, there must be at least 7 minutes between their landings. If Aircraft 3 lands before Aircraft 4, there must be at least 7 minutes between their landings.\n\nThe landing time for each aircraft must be between its earliest and latest possible landing times. The separation times between consecutive landings must be enforced based on the order in which the aircraft land. The penalties for landing early or late are applied based on the deviation from the target landing times. The objective is to determine the actual landing times for all five aircraft such that the total penalty cost is minimized, each aircraft lands within its specified earliest and latest landing times, and the required separation times between consecutive landings are strictly maintained. Binary decision variables are used to determine the order of landings between aircraft pairs, ensuring proper separation based on the landing order. Constraints enforce the relationship between landing times and the binary variables, ensuring proper separation based on the landing order. The binary variables are restricted to 0 or 1.",
    "ground_truth": 153
  },
  {
    "question": "You are managing a manufacturing facility that produces three types of products (Product 0, Product 1, and Product 2) using two machines (Machine 0 and Machine 1) over three time periods (Period 0, Period 1, and Period 2). Your goal is to minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period.\n\nFor each product, machine, and time period, decide whether to produce the product and how much to produce. For each machine and time period, decide whether to start up the machine to begin production. For each product and time period, decide how much inventory to carry over to the next period or how much demand to backlog if production falls short.\n\nMinimize the total cost, which includes production setup costs of 145.4242073380383 per production decision, machine startup costs of 79.18604813454679 per startup decision, inventory holding costs of 0.9008900951620358 for Product 0, 1.068925395295676 for Product 1, and 1.066244796883431 for Product 2 per unit per period, and backlogging costs of 6.734178682720012 for Product 0, 7.442225721133133 for Product 1, and 7.104627209109436 for Product 2 per unit per period.\n\nFor each product and time period, the total production across machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, must equal the demand for that period plus the current inventory minus the current backlog. The demands for each product and period are as follows: Product 0: Period 0 = 20.33410585875594, Period 1 = 22.57961652322203, Period 2 = 15.89714240515548; Product 1: Period 0 = 24.05647618194615, Period 1 = 20.36522893983323, Period 2 = 17.47466293074195; Product 2: Period 0 = 16.36553930950429, Period 1 = 22.7831030020558, Period 2 = 19.7805033393852.\n\nFor each machine and time period, the production quantity multiplied by -71.79935969683524 for Machine 0 or -73.09691843304661 for Machine 1, plus the startup time multiplied by 6.342821301312698 for Machine 0 or 6.171760083826499 for Machine 1, plus the amount produced must be less than or equal to zero. Each machine can only produce one product at a time in any given period, meaning the sum of production decisions across all products for a given machine and period must be less than or equal to 1.\n\nIf a machine is producing a product in a period but was not producing it in the previous period, a startup decision must be made. Production quantities, inventory levels, and backlogs must be non-negative. Production and startup decisions are binary (either 0 or 1).",
    "answer": 919.3,
    "ori": "13_optmath_bench",
    "index": 53,
    "description": "You are managing a manufacturing facility that produces three types of products (Product 0, Product 1, and Product 2) using two machines (Machine 0 and Machine 1) over three time periods (Period 0, Period 1, and Period 2). Your goal is to minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period.\n\nFor each product, machine, and time period, decide whether to produce the product and how much to produce. For each machine and time period, decide whether to start up the machine to begin production. For each product and time period, decide how much inventory to carry over to the next period or how much demand to backlog if production falls short.\n\nMinimize the total cost, which includes production setup costs of 145.4242073380383 per production decision, machine startup costs of 79.18604813454679 per startup decision, inventory holding costs of 0.9008900951620358 for Product 0, 1.068925395295676 for Product 1, and 1.066244796883431 for Product 2 per unit per period, and backlogging costs of 6.734178682720012 for Product 0, 7.442225721133133 for Product 1, and 7.104627209109436 for Product 2 per unit per period.\n\nFor each product and time period, the total production across machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, must equal the demand for that period plus the current inventory minus the current backlog. The demands for each product and period are as follows: Product 0: Period 0 = 20.33410585875594, Period 1 = 22.57961652322203, Period 2 = 15.89714240515548; Product 1: Period 0 = 24.05647618194615, Period 1 = 20.36522893983323, Period 2 = 17.47466293074195; Product 2: Period 0 = 16.36553930950429, Period 1 = 22.7831030020558, Period 2 = 19.7805033393852.\n\nFor each machine and time period, the production quantity multiplied by -71.79935969683524 for Machine 0 or -73.09691843304661 for Machine 1, plus the startup time multiplied by 6.342821301312698 for Machine 0 or 6.171760083826499 for Machine 1, plus the amount produced must be less than or equal to zero. Each machine can only produce one product at a time in any given period, meaning the sum of production decisions across all products for a given machine and period must be less than or equal to 1.\n\nIf a machine is producing a product in a period but was not producing it in the previous period, a startup decision must be made. Production quantities, inventory levels, and backlogs must be non-negative. Production and startup decisions are binary (either 0 or 1).",
    "ground_truth": 919.3
  },
  {
    "question": "There are 5 jobs, labeled Job 0 to Job 4, each consisting of 2 operations. Each operation must be performed on a specific machine, and the order of operations within a job is fixed. For example, Operation 1 of Job 0 must be completed before Operation 2 of Job 0 can begin. The processing time for each operation is 1 unit of time. The facility has a limited number of machines, and some operations from different jobs must be performed on the same machine. To avoid conflicts, no two operations can be scheduled on the same machine at the same time. This requires determining the order in which operations are processed on each machine. For example, Operations from Job 1 and Job 2 both require Machine 1, and you must decide whether to process Job 1's operation before Job 2's, or vice versa. Similarly, Operations from Job 4 and Job 0 must be sequenced on Machine 2. Binary variables are used to indicate whether one operation is scheduled before another on the same machine, ensuring that the scheduling constraints are satisfied. The primary objective is to minimize the makespan, which is the total time required to complete all jobs, determined by the latest completion time among all operations. For example, if the last operation finishes at time 10, the makespan is 10. Constraints include precedence constraints, ensuring each operation within a job starts only after the previous operation in the same job has finished; machine capacity constraints, ensuring operations sharing the same machine do not overlap in time; makespan definition, ensuring the makespan is at least as large as the completion time of every operation; non-negativity constraints, ensuring all operation start times are non-negative; and binary variables, determining the order of operations on shared machines. The processing time for each operation is 1 unit of time, and binary variables are used with a large constant (100,000) to enforce sequencing constraints. For example, if a binary variable is 1, then one operation must finish before another starts on the same machine. The task is to determine the start times for all operations across all jobs, ensuring operations within the same job are performed in the correct sequence, operations sharing the same machine do not overlap, and the total completion time is minimized.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 54,
    "description": "There are 5 jobs, labeled Job 0 to Job 4, each consisting of 2 operations. Each operation must be performed on a specific machine, and the order of operations within a job is fixed. For example, Operation 1 of Job 0 must be completed before Operation 2 of Job 0 can begin. The processing time for each operation is 1 unit of time. The facility has a limited number of machines, and some operations from different jobs must be performed on the same machine. To avoid conflicts, no two operations can be scheduled on the same machine at the same time. This requires determining the order in which operations are processed on each machine. For example, Operations from Job 1 and Job 2 both require Machine 1, and you must decide whether to process Job 1's operation before Job 2's, or vice versa. Similarly, Operations from Job 4 and Job 0 must be sequenced on Machine 2. Binary variables are used to indicate whether one operation is scheduled before another on the same machine, ensuring that the scheduling constraints are satisfied. The primary objective is to minimize the makespan, which is the total time required to complete all jobs, determined by the latest completion time among all operations. For example, if the last operation finishes at time 10, the makespan is 10. Constraints include precedence constraints, ensuring each operation within a job starts only after the previous operation in the same job has finished; machine capacity constraints, ensuring operations sharing the same machine do not overlap in time; makespan definition, ensuring the makespan is at least as large as the completion time of every operation; non-negativity constraints, ensuring all operation start times are non-negative; and binary variables, determining the order of operations on shared machines. The processing time for each operation is 1 unit of time, and binary variables are used with a large constant (100,000) to enforce sequencing constraints. For example, if a binary variable is 1, then one operation must finish before another starts on the same machine. The task is to determine the start times for all operations across all jobs, ensuring operations within the same job are performed in the correct sequence, operations sharing the same machine do not overlap, and the total completion time is minimized.",
    "ground_truth": 4
  },
  {
    "question": " Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 35 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 26 potential cell tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage Assignment**: For each of the 35 areas, you must determine whether it will be covered by the deployed towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 35 areas are as follows:\n- Area 0: 3,215 people\n- Area 1: 2,395 people\n- Area 2: 4,466 people\n- Area 3: 2,520 people\n- Area 4: 2,192 people\n- Area 5: 4,625 people\n- Area 6: 4,796 people\n- Area 7: 2,973 people\n- Area 8: 2,034 people\n- Area 9: 2,754 people\n- Area 10: 2,143 people\n- Area 11: 2,473 people\n- Area 12: 3,099 people\n- Area 13: 4,136 people\n- Area 14: 2,154 people\n- Area 15: 3,411 people\n- Area 16: 3,230 people\n- Area 17: 2,155 people\n- Area 18: 4,907 people\n- Area 19: 2,665 people\n- Area 20: 4,708 people\n- Area 21: 4,494 people\n- Area 22: 2,381 people\n- Area 23: 3,077 people\n- Area 24: 2,699 people\n- Area 25: 3,320 people\n- Area 26: 4,931 people\n- Area 27: 4,645 people\n- Area 28: 2,346 people\n- Area 29: 4,393 people\n- Area 30: 4,051 people\n- Area 31: 4,507 people\n- Area 32: 4,610 people\n- Area 33: 3,412 people\n- Area 34: 3,059 people\n\n#### Constraints:\n1. **Coverage Requirements**:\n   - Each area can only be considered covered if at least one of the cell towers assigned to it is built. For example:\n     - Area 0 can be covered if any of the towers 1, 5, 10, 11, 13, 15, 18, 19, 20, 22, 23, or 24 are built.\n     - Area 1 can be covered if any of the towers 3, 4, 6, 11, 12, 14, 15, 17, 18, 19, 21, 23, or 24 are built.\n     - Similar constraints apply to all 35 areas, with specific combinations of towers required for coverage.\n\n2. **Budget Constraint**:\n   - The total cost of building the selected towers must not exceed the available budget of 2,894 units. The costs for building each tower are as follows:\n     - Tower 0: 411 units\n     - Tower 1: 294 units\n     - Tower 2: 376 units\n     - Tower 3: 447 units\n     - Tower 4: 414 units\n     - Tower 5: 498 units\n     - Tower 6: 437 units\n     - Tower 7: 272 units\n     - Tower 8: 381 units\n     - Tower 9: 323 units\n     - Tower 10: 356 units\n     - Tower 11: 200 units\n     - Tower 12: 297 units\n     - Tower 13: 428 units\n     - Tower 14: 427 units\n     - Tower 15: 484 units\n     - Tower 16: 494 units\n     - Tower 17: 436 units\n     - Tower 18: 218 units\n     - Tower 19: 428 units\n     - Tower 20: 399 units\n     - Tower 21: 484 units\n     - Tower 22: 367 units\n     - Tower 23: 204 units\n     - Tower 24: 289 units\n     - Tower 25: 283 units\n\n3. **Binary Decisions**:\n   - Each tower can either be built (1) or not built (0).\n   - Each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each area depends on the specific combination of towers built, and the total cost of building the selected towers must not exceed 2,894 units.",
    "answer": 118976,
    "ori": "13_optmath_bench",
    "index": 55,
    "description": " Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 35 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 26 potential cell tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage Assignment**: For each of the 35 areas, you must determine whether it will be covered by the deployed towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 35 areas are as follows:\n- Area 0: 3,215 people\n- Area 1: 2,395 people\n- Area 2: 4,466 people\n- Area 3: 2,520 people\n- Area 4: 2,192 people\n- Area 5: 4,625 people\n- Area 6: 4,796 people\n- Area 7: 2,973 people\n- Area 8: 2,034 people\n- Area 9: 2,754 people\n- Area 10: 2,143 people\n- Area 11: 2,473 people\n- Area 12: 3,099 people\n- Area 13: 4,136 people\n- Area 14: 2,154 people\n- Area 15: 3,411 people\n- Area 16: 3,230 people\n- Area 17: 2,155 people\n- Area 18: 4,907 people\n- Area 19: 2,665 people\n- Area 20: 4,708 people\n- Area 21: 4,494 people\n- Area 22: 2,381 people\n- Area 23: 3,077 people\n- Area 24: 2,699 people\n- Area 25: 3,320 people\n- Area 26: 4,931 people\n- Area 27: 4,645 people\n- Area 28: 2,346 people\n- Area 29: 4,393 people\n- Area 30: 4,051 people\n- Area 31: 4,507 people\n- Area 32: 4,610 people\n- Area 33: 3,412 people\n- Area 34: 3,059 people\n\n#### Constraints:\n1. **Coverage Requirements**:\n   - Each area can only be considered covered if at least one of the cell towers assigned to it is built. For example:\n     - Area 0 can be covered if any of the towers 1, 5, 10, 11, 13, 15, 18, 19, 20, 22, 23, or 24 are built.\n     - Area 1 can be covered if any of the towers 3, 4, 6, 11, 12, 14, 15, 17, 18, 19, 21, 23, or 24 are built.\n     - Similar constraints apply to all 35 areas, with specific combinations of towers required for coverage.\n\n2. **Budget Constraint**:\n   - The total cost of building the selected towers must not exceed the available budget of 2,894 units. The costs for building each tower are as follows:\n     - Tower 0: 411 units\n     - Tower 1: 294 units\n     - Tower 2: 376 units\n     - Tower 3: 447 units\n     - Tower 4: 414 units\n     - Tower 5: 498 units\n     - Tower 6: 437 units\n     - Tower 7: 272 units\n     - Tower 8: 381 units\n     - Tower 9: 323 units\n     - Tower 10: 356 units\n     - Tower 11: 200 units\n     - Tower 12: 297 units\n     - Tower 13: 428 units\n     - Tower 14: 427 units\n     - Tower 15: 484 units\n     - Tower 16: 494 units\n     - Tower 17: 436 units\n     - Tower 18: 218 units\n     - Tower 19: 428 units\n     - Tower 20: 399 units\n     - Tower 21: 484 units\n     - Tower 22: 367 units\n     - Tower 23: 204 units\n     - Tower 24: 289 units\n     - Tower 25: 283 units\n\n3. **Binary Decisions**:\n   - Each tower can either be built (1) or not built (0).\n   - Each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each area depends on the specific combination of towers built, and the total cost of building the selected towers must not exceed 2,894 units.",
    "ground_truth": 118976
  },
  {
    "question": "You are responsible for managing the distribution of resources across a network of nine cities. Each city has a specific supply or demand for resources, and your goal is to minimize the total transportation cost while ensuring that all cities receive the resources they need. The transportation costs vary depending on the route taken between cities, and there are capacity limits on how much can be transported between any two cities.\n\nCity 0 has a net demand of 63 units of resources. City 1 has a net demand of 2 units of resources. City 2 has a net demand of 5 units of resources. City 3 has a net demand of 16 units of resources. City 4 has a net supply of 13 units of resources. City 5 has a net supply of 13 units of resources. City 6 has a net supply of 26 units of resources. City 7 has a net supply of 19 units of resources. City 8 has a net supply of 15 units of resources.\n\nThe cost of transporting resources from City 0 to City 1 is 6, with a capacity of 48. From City 0 to City 2, the cost is 7, with a capacity of 37. From City 0 to City 3, the cost is 10, with a capacity of 57. From City 0 to City 4, the cost is 9, with a capacity of 41. From City 0 to City 5, the cost is 9, with a capacity of 40. From City 0 to City 6, the cost is 10, with a capacity of 48. From City 0 to City 7, the cost is 9, with a capacity of 38. From City 0 to City 8, the cost is 8, with a capacity of 44.\n\nThe cost of transporting resources from City 1 to City 0 is 10, with a capacity of 44. From City 1 to City 2, the cost is 8, with a capacity of 58. From City 1 to City 3, the cost is 9, with a capacity of 57. From City 1 to City 4, the cost is 6, with a capacity of 34. From City 1 to City 5, the cost is 8, with a capacity of 49. From City 1 to City 6, the cost is 8, with a capacity of 57. From City 1 to City 7, the cost is 8, with a capacity of 46. From City 1 to City 8, the cost is 6, with a capacity of 59.\n\nThe cost of transporting resources from City 2 to City 0 is 8, with a capacity of 31. From City 2 to City 1, the cost is 8, with a capacity of 43. From City 2 to City 3, the cost is 7, with a capacity of 43. From City 2 to City 4, the cost is 6, with a capacity of 46. From City 2 to City 5, the cost is 6, with a capacity of 45. From City 2 to City 6, the cost is 8, with a capacity of 41. From City 2 to City 7, the cost is 8, with a capacity of 59. From City 2 to City 8, the cost is 10, with a capacity of 40.\n\nThe cost of transporting resources from City 3 to City 0 is 9, with a capacity of 44. From City 3 to City 1, the cost is 10, with a capacity of 46. From City 3 to City 2, the cost is 10, with a capacity of 32. From City 3 to City 4, the cost is 7, with a capacity of 56. From City 3 to City 5, the cost is 9, with a capacity of 42. From City 3 to City 6, the cost is 6, with a capacity of 52. From City 3 to City 7, the cost is 8, with a capacity of 51. From City 3 to City 8, the cost is 7, with a capacity of 39.\n\nThe cost of transporting resources from City 4 to City 0 is 9, with a capacity of 49. From City 4 to City 1, the cost is 10, with a capacity of 31. From City 4 to City 2, the cost is 7, with a capacity of 47. From City 4 to City 3, the cost is 7, with a capacity of 60. From City 4 to City 5, the cost is 10, with a capacity of 46. From City 4 to City 6, the cost is 7, with a capacity of 32. From City 4 to City 7, the cost is 8, with a capacity of 42. From City 4 to City 8, the cost is 7, with a capacity of 45.\n\nThe cost of transporting resources from City 5 to City 0 is 8, with a capacity of 31. From City 5 to City 1, the cost is 8, with a capacity of 51. From City 5 to City 2, the cost is 10, with a capacity of 53. From City 5 to City 3, the cost is 7, with a capacity of 47. From City 5 to City 4, the cost is 8, with a capacity of 36. From City 5 to City 6, the cost is 6, with a capacity of 30. From City 5 to City 7, the cost is 9, with a capacity of 57. From City 5 to City 8, the cost is 9, with a capacity of 40.\n\nThe cost of transporting resources from City 6 to City 0 is 10, with a capacity of 57. From City 6 to City 1, the cost is 8, with a capacity of 36. From City 6 to City 2, the cost is 10, with a capacity of 56. From City 6 to City 3, the cost is 9, with a capacity of 51. From City 6 to City 4, the cost is 7, with a capacity of 48. From City 6 to City 5, the cost is 7, with a capacity of 56. From City 6 to City 7, the cost is 7, with a capacity of 60. From City 6 to City 8, the cost is 6, with a capacity of 56.\n\nThe cost of transporting resources from City 7 to City 0 is 10, with a capacity of 37. From City 7 to City 1, the cost is 10, with a capacity of 36. From City 7 to City 2, the cost is 8, with a capacity of 48. From City 7 to City 3, the cost is 7, with a capacity of 60. From City 7 to City 4, the cost is 9, with a capacity of 38. From City 7 to City 5, the cost is 7, with a capacity of 43. From City 7 to City 6, the cost is 9, with a capacity of 60. From City 7 to City 8, the cost is 9, with a capacity of 53.\n\nThe cost of transporting resources from City 8 to City 0 is 7, with a capacity of 54. From City 8 to City 1, the cost is 8, with a capacity of 42. From City 8 to City 2, the cost is 8, with a capacity of 36. From City 8 to City 3, the cost is 10, with a capacity of 46. From City 8 to City 4, the cost is 8, with a capacity of 58. From City 8 to City 5, the cost is 7, with a capacity of 54. From City 8 to City 6, the cost is 10, with a capacity of 56. From City 8 to City 7, the cost is 10, with a capacity of 34.\n\nYour task is to determine the optimal amount of resources to transport between each pair of cities to meet all demands and supplies while minimizing the total transportation cost. The transportation must respect the capacity limits on each route, and the amount of resources transported cannot be negative. For each city, the total amount of resources sent out plus its supply must equal the total amount received plus its demand.",
    "answer": 714,
    "ori": "13_optmath_bench",
    "index": 56,
    "description": "You are responsible for managing the distribution of resources across a network of nine cities. Each city has a specific supply or demand for resources, and your goal is to minimize the total transportation cost while ensuring that all cities receive the resources they need. The transportation costs vary depending on the route taken between cities, and there are capacity limits on how much can be transported between any two cities.\n\nCity 0 has a net demand of 63 units of resources. City 1 has a net demand of 2 units of resources. City 2 has a net demand of 5 units of resources. City 3 has a net demand of 16 units of resources. City 4 has a net supply of 13 units of resources. City 5 has a net supply of 13 units of resources. City 6 has a net supply of 26 units of resources. City 7 has a net supply of 19 units of resources. City 8 has a net supply of 15 units of resources.\n\nThe cost of transporting resources from City 0 to City 1 is 6, with a capacity of 48. From City 0 to City 2, the cost is 7, with a capacity of 37. From City 0 to City 3, the cost is 10, with a capacity of 57. From City 0 to City 4, the cost is 9, with a capacity of 41. From City 0 to City 5, the cost is 9, with a capacity of 40. From City 0 to City 6, the cost is 10, with a capacity of 48. From City 0 to City 7, the cost is 9, with a capacity of 38. From City 0 to City 8, the cost is 8, with a capacity of 44.\n\nThe cost of transporting resources from City 1 to City 0 is 10, with a capacity of 44. From City 1 to City 2, the cost is 8, with a capacity of 58. From City 1 to City 3, the cost is 9, with a capacity of 57. From City 1 to City 4, the cost is 6, with a capacity of 34. From City 1 to City 5, the cost is 8, with a capacity of 49. From City 1 to City 6, the cost is 8, with a capacity of 57. From City 1 to City 7, the cost is 8, with a capacity of 46. From City 1 to City 8, the cost is 6, with a capacity of 59.\n\nThe cost of transporting resources from City 2 to City 0 is 8, with a capacity of 31. From City 2 to City 1, the cost is 8, with a capacity of 43. From City 2 to City 3, the cost is 7, with a capacity of 43. From City 2 to City 4, the cost is 6, with a capacity of 46. From City 2 to City 5, the cost is 6, with a capacity of 45. From City 2 to City 6, the cost is 8, with a capacity of 41. From City 2 to City 7, the cost is 8, with a capacity of 59. From City 2 to City 8, the cost is 10, with a capacity of 40.\n\nThe cost of transporting resources from City 3 to City 0 is 9, with a capacity of 44. From City 3 to City 1, the cost is 10, with a capacity of 46. From City 3 to City 2, the cost is 10, with a capacity of 32. From City 3 to City 4, the cost is 7, with a capacity of 56. From City 3 to City 5, the cost is 9, with a capacity of 42. From City 3 to City 6, the cost is 6, with a capacity of 52. From City 3 to City 7, the cost is 8, with a capacity of 51. From City 3 to City 8, the cost is 7, with a capacity of 39.\n\nThe cost of transporting resources from City 4 to City 0 is 9, with a capacity of 49. From City 4 to City 1, the cost is 10, with a capacity of 31. From City 4 to City 2, the cost is 7, with a capacity of 47. From City 4 to City 3, the cost is 7, with a capacity of 60. From City 4 to City 5, the cost is 10, with a capacity of 46. From City 4 to City 6, the cost is 7, with a capacity of 32. From City 4 to City 7, the cost is 8, with a capacity of 42. From City 4 to City 8, the cost is 7, with a capacity of 45.\n\nThe cost of transporting resources from City 5 to City 0 is 8, with a capacity of 31. From City 5 to City 1, the cost is 8, with a capacity of 51. From City 5 to City 2, the cost is 10, with a capacity of 53. From City 5 to City 3, the cost is 7, with a capacity of 47. From City 5 to City 4, the cost is 8, with a capacity of 36. From City 5 to City 6, the cost is 6, with a capacity of 30. From City 5 to City 7, the cost is 9, with a capacity of 57. From City 5 to City 8, the cost is 9, with a capacity of 40.\n\nThe cost of transporting resources from City 6 to City 0 is 10, with a capacity of 57. From City 6 to City 1, the cost is 8, with a capacity of 36. From City 6 to City 2, the cost is 10, with a capacity of 56. From City 6 to City 3, the cost is 9, with a capacity of 51. From City 6 to City 4, the cost is 7, with a capacity of 48. From City 6 to City 5, the cost is 7, with a capacity of 56. From City 6 to City 7, the cost is 7, with a capacity of 60. From City 6 to City 8, the cost is 6, with a capacity of 56.\n\nThe cost of transporting resources from City 7 to City 0 is 10, with a capacity of 37. From City 7 to City 1, the cost is 10, with a capacity of 36. From City 7 to City 2, the cost is 8, with a capacity of 48. From City 7 to City 3, the cost is 7, with a capacity of 60. From City 7 to City 4, the cost is 9, with a capacity of 38. From City 7 to City 5, the cost is 7, with a capacity of 43. From City 7 to City 6, the cost is 9, with a capacity of 60. From City 7 to City 8, the cost is 9, with a capacity of 53.\n\nThe cost of transporting resources from City 8 to City 0 is 7, with a capacity of 54. From City 8 to City 1, the cost is 8, with a capacity of 42. From City 8 to City 2, the cost is 8, with a capacity of 36. From City 8 to City 3, the cost is 10, with a capacity of 46. From City 8 to City 4, the cost is 8, with a capacity of 58. From City 8 to City 5, the cost is 7, with a capacity of 54. From City 8 to City 6, the cost is 10, with a capacity of 56. From City 8 to City 7, the cost is 10, with a capacity of 34.\n\nYour task is to determine the optimal amount of resources to transport between each pair of cities to meet all demands and supplies while minimizing the total transportation cost. The transportation must respect the capacity limits on each route, and the amount of resources transported cannot be negative. For each city, the total amount of resources sent out plus its supply must equal the total amount received plus its demand.",
    "ground_truth": 714
  },
  {
    "question": "Job Shop Scheduling in a Manufacturing Facility\n\nYou are managing a manufacturing facility that produces custom parts for various clients. The facility has multiple machines, each capable of performing specific operations. There are seven jobs (Job 0 to Job 6) that need to be processed, and each job consists of a sequence of operations that must be performed in a specific order. Each operation is assigned to a particular machine, and no two operations can be processed on the same machine simultaneously.\n\n#### Objective:\nYour goal is to minimize the **makespan**, which is the total time required to complete all jobs. This ensures that all jobs are finished as quickly as possible, allowing the facility to meet client deadlines and optimize resource utilization.\n\n#### Decisions to Be Made:\n1. **Start Times**: Determine the start time for each operation of every job.\n2. **Operation Order**: Decide the order in which operations are processed on each machine, ensuring no overlaps.\n\n#### Constraints:\n1. **Precedence Constraints**:\n   - Each operation in a job must start only after the previous operation in the same job has been completed. For example:\n     - Operation 1 of Job 0 must start at least 1 time unit after Operation 0 of Job 0 has finished.\n     - Operation 1 of Job 1 must start at least 1 time unit after Operation 0 of Job 1 has finished.\n     - This pattern applies to all jobs and their respective operations.\n\n2. **Machine Capacity Constraints**:\n   - No two operations assigned to the same machine can overlap in time. For example:\n     - If Operation 1 of Job 3 and Operation 0 of Job 4 are assigned to the same machine, they must be scheduled such that one starts only after the other has finished. A binary decision variable determines the order of these operations.\n     - Similar constraints apply to all pairs of operations sharing the same machine, such as:\n       - Operation 1 of Job 3 and Operation 1 of Job 4.\n       - Operation 1 of Job 3 and Operation 1 of Job 6.\n       - Operation 0 of Job 4 and Operation 1 of Job 4.\n       - Operation 0 of Job 4 and Operation 1 of Job 6.\n       - Operation 1 of Job 4 and Operation 1 of Job 6.\n       - Operation 1 of Job 0 and Operation 0 of Job 1.\n       - Operation 1 of Job 0 and Operation 0 of Job 2.\n       - Operation 0 of Job 1 and Operation 0 of Job 2.\n       - Operation 0 of Job 0 and Operation 1 of Job 1.\n       - Operation 0 of Job 0 and Operation 1 of Job 2.\n       - Operation 0 of Job 0 and Operation 0 of Job 3.\n       - Operation 0 of Job 0 and Operation 1 of Job 5.\n       - Operation 0 of Job 0 and Operation 0 of Job 6.\n       - Operation 1 of Job 1 and Operation 1 of Job 2.\n       - Operation 1 of Job 1 and Operation 0 of Job 3.\n       - Operation 1 of Job 1 and Operation 1 of Job 5.\n       - Operation 1 of Job 1 and Operation 0 of Job 6.\n       - Operation 1 of Job 2 and Operation 0 of Job 3.\n       - Operation 1 of Job 2 and Operation 1 of Job 5.\n       - Operation 1 of Job 2 and Operation 0 of Job 6.\n       - Operation 0 of Job 3 and Operation 1 of Job 5.\n       - Operation 0 of Job 3 and Operation 0 of Job 6.\n       - Operation 1 of Job 5 and Operation 0 of Job 6.\n\n3. **Makespan Definition**:\n   - The makespan must be at least as large as the completion time of every operation. For example:\n     - The makespan must be at least 1 time unit after the completion of Operation 0 of Job 0.\n     - The makespan must be at least 1 time unit after the completion of Operation 1 of Job 0.\n     - This applies to all operations across all jobs.\n\n4. **Non-Negativity**:\n   - All start times must be non-negative, meaning no operation can start before time zero.\n\n5. **Binary Variables**:\n   - Binary variables are used to determine the order of operations on shared machines. For example:\n     - A binary variable decides whether Operation 1 of Job 3 is processed before or after Operation 0 of Job 4 on the same machine.\n     - Similar binary variables are used for all relevant pairs of operations sharing the same machine.\n\n#### Numerical Parameters:\n- The processing time for each operation is implicitly defined by the constraints, with a minimum required gap of 1 time unit between consecutive operations of the same job.\n- The large constant \\( N = 100,000 \\) is used in the machine capacity constraints to ensure that the binary variables correctly enforce the order of operations.\n\n#### Summary:\nYour task is to schedule the start times of all operations across all jobs and machines in such a way that the total completion time (makespan) is minimized. You must ensure that all precedence and machine capacity constraints are satisfied, and that the makespan reflects the latest completion time of any operation. The use of binary variables is critical to determining the correct order of operations on shared machines.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 57,
    "description": "Job Shop Scheduling in a Manufacturing Facility\n\nYou are managing a manufacturing facility that produces custom parts for various clients. The facility has multiple machines, each capable of performing specific operations. There are seven jobs (Job 0 to Job 6) that need to be processed, and each job consists of a sequence of operations that must be performed in a specific order. Each operation is assigned to a particular machine, and no two operations can be processed on the same machine simultaneously.\n\n#### Objective:\nYour goal is to minimize the **makespan**, which is the total time required to complete all jobs. This ensures that all jobs are finished as quickly as possible, allowing the facility to meet client deadlines and optimize resource utilization.\n\n#### Decisions to Be Made:\n1. **Start Times**: Determine the start time for each operation of every job.\n2. **Operation Order**: Decide the order in which operations are processed on each machine, ensuring no overlaps.\n\n#### Constraints:\n1. **Precedence Constraints**:\n   - Each operation in a job must start only after the previous operation in the same job has been completed. For example:\n     - Operation 1 of Job 0 must start at least 1 time unit after Operation 0 of Job 0 has finished.\n     - Operation 1 of Job 1 must start at least 1 time unit after Operation 0 of Job 1 has finished.\n     - This pattern applies to all jobs and their respective operations.\n\n2. **Machine Capacity Constraints**:\n   - No two operations assigned to the same machine can overlap in time. For example:\n     - If Operation 1 of Job 3 and Operation 0 of Job 4 are assigned to the same machine, they must be scheduled such that one starts only after the other has finished. A binary decision variable determines the order of these operations.\n     - Similar constraints apply to all pairs of operations sharing the same machine, such as:\n       - Operation 1 of Job 3 and Operation 1 of Job 4.\n       - Operation 1 of Job 3 and Operation 1 of Job 6.\n       - Operation 0 of Job 4 and Operation 1 of Job 4.\n       - Operation 0 of Job 4 and Operation 1 of Job 6.\n       - Operation 1 of Job 4 and Operation 1 of Job 6.\n       - Operation 1 of Job 0 and Operation 0 of Job 1.\n       - Operation 1 of Job 0 and Operation 0 of Job 2.\n       - Operation 0 of Job 1 and Operation 0 of Job 2.\n       - Operation 0 of Job 0 and Operation 1 of Job 1.\n       - Operation 0 of Job 0 and Operation 1 of Job 2.\n       - Operation 0 of Job 0 and Operation 0 of Job 3.\n       - Operation 0 of Job 0 and Operation 1 of Job 5.\n       - Operation 0 of Job 0 and Operation 0 of Job 6.\n       - Operation 1 of Job 1 and Operation 1 of Job 2.\n       - Operation 1 of Job 1 and Operation 0 of Job 3.\n       - Operation 1 of Job 1 and Operation 1 of Job 5.\n       - Operation 1 of Job 1 and Operation 0 of Job 6.\n       - Operation 1 of Job 2 and Operation 0 of Job 3.\n       - Operation 1 of Job 2 and Operation 1 of Job 5.\n       - Operation 1 of Job 2 and Operation 0 of Job 6.\n       - Operation 0 of Job 3 and Operation 1 of Job 5.\n       - Operation 0 of Job 3 and Operation 0 of Job 6.\n       - Operation 1 of Job 5 and Operation 0 of Job 6.\n\n3. **Makespan Definition**:\n   - The makespan must be at least as large as the completion time of every operation. For example:\n     - The makespan must be at least 1 time unit after the completion of Operation 0 of Job 0.\n     - The makespan must be at least 1 time unit after the completion of Operation 1 of Job 0.\n     - This applies to all operations across all jobs.\n\n4. **Non-Negativity**:\n   - All start times must be non-negative, meaning no operation can start before time zero.\n\n5. **Binary Variables**:\n   - Binary variables are used to determine the order of operations on shared machines. For example:\n     - A binary variable decides whether Operation 1 of Job 3 is processed before or after Operation 0 of Job 4 on the same machine.\n     - Similar binary variables are used for all relevant pairs of operations sharing the same machine.\n\n#### Numerical Parameters:\n- The processing time for each operation is implicitly defined by the constraints, with a minimum required gap of 1 time unit between consecutive operations of the same job.\n- The large constant \\( N = 100,000 \\) is used in the machine capacity constraints to ensure that the binary variables correctly enforce the order of operations.\n\n#### Summary:\nYour task is to schedule the start times of all operations across all jobs and machines in such a way that the total completion time (makespan) is minimized. You must ensure that all precedence and machine capacity constraints are satisfied, and that the makespan reflects the latest completion time of any operation. The use of binary variables is critical to determining the correct order of operations on shared machines.",
    "ground_truth": 3
  },
  {
    "question": "The problem involves scheduling operations for five jobs (Job 0 through Job 4) in a manufacturing facility. Each job consists of two operations that must be performed in sequence, with the second operation starting only after the first operation is completed. All operations have a processing time of 1 unit. Operations from different jobs may share the same machine, and each machine can handle only one operation at a time. The goal is to minimize the total time required to complete all jobs, known as the makespan.\n\nThe start time of each operation must be determined, ensuring that the sequence of operations within each job is respected and that no two operations on the same machine overlap. Binary variables are used to determine the order of operations on shared machines. For example, if Operation 0 of Job 0 and Operation 0 of Job 2 are on the same machine, a binary variable indicates whether Operation 0 of Job 0 precedes Operation 0 of Job 2 or vice versa. A large constant (100,000) is used in the constraints to enforce the correct ordering of operations on shared machines.\n\nThe makespan must be at least as large as the completion time of every operation. For example, if Operation 0 of Job 0 finishes at time 2, the makespan must be at least 2. The constraints include precedence constraints within jobs, ensuring that the start time of the second operation is at least 1 unit after the completion of the first operation. Machine capacity constraints ensure that two operations assigned to the same machine do not overlap in time. The solution will provide a schedule that ensures all jobs are completed as quickly as possible, respecting the constraints of machine availability and operation precedence.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 58,
    "description": "The problem involves scheduling operations for five jobs (Job 0 through Job 4) in a manufacturing facility. Each job consists of two operations that must be performed in sequence, with the second operation starting only after the first operation is completed. All operations have a processing time of 1 unit. Operations from different jobs may share the same machine, and each machine can handle only one operation at a time. The goal is to minimize the total time required to complete all jobs, known as the makespan.\n\nThe start time of each operation must be determined, ensuring that the sequence of operations within each job is respected and that no two operations on the same machine overlap. Binary variables are used to determine the order of operations on shared machines. For example, if Operation 0 of Job 0 and Operation 0 of Job 2 are on the same machine, a binary variable indicates whether Operation 0 of Job 0 precedes Operation 0 of Job 2 or vice versa. A large constant (100,000) is used in the constraints to enforce the correct ordering of operations on shared machines.\n\nThe makespan must be at least as large as the completion time of every operation. For example, if Operation 0 of Job 0 finishes at time 2, the makespan must be at least 2. The constraints include precedence constraints within jobs, ensuring that the start time of the second operation is at least 1 unit after the completion of the first operation. Machine capacity constraints ensure that two operations assigned to the same machine do not overlap in time. The solution will provide a schedule that ensures all jobs are completed as quickly as possible, respecting the constraints of machine availability and operation precedence.",
    "ground_truth": 4
  },
  {
    "question": "There are 5 jobs labeled as Job 0, Job 1, Job 2, Job 3, and Job 4, and 4 machines labeled as Machine 0, Machine 1, Machine 2, and Machine 3. Each job must be assigned to one of 5 schedule positions (Position 0 to Position 4) on each machine. The goal is to minimize the total completion time of all jobs, which includes the start time of the job in the last schedule position (Position 4) on the last machine (Machine 3) and the processing time of that job. Each job has specific processing times on each machine: Job 0 takes 9 units on Machine 0, 7 units on Machine 1, 5 units on Machine 2, and 6 units on Machine 3; Job 1 takes 7 units on Machine 0, 10 units on Machine 1, 10 units on Machine 2, and 8 units on Machine 3; Job 2 takes 6 units on Machine 0, 9 units on Machine 1, 9 units on Machine 2, and 8 units on Machine 3; Job 3 takes 10 units on Machine 0, 10 units on Machine 1, 7 units on Machine 2, and 8 units on Machine 3; Job 4 takes 6 units on Machine 0, 10 units on Machine 1, 5 units on Machine 2, and 10 units on Machine 3. Each schedule position on each machine must be assigned exactly one job, and each job must be assigned to exactly one schedule position across all machines. The start time of a job on the next machine must be at least equal to its completion time on the current machine. Additionally, the start time of a job in the next schedule position must be at least equal to the completion time of the job in the current position on the same machine. The processing times for the jobs in the last schedule position (Position 4) are: Job 0 takes 6 units, Job 1 takes 8 units, Job 2 takes 8 units, Job 3 takes 8 units, and Job 4 takes 10 units. The start time of the job in Position 4 on Machine 3 is a critical factor in the objective function. The decision variables include assigning each job to a specific schedule position on each machine and determining the start times of each job on each machine to ensure all constraints are satisfied. The objective is to minimize the total completion time of all jobs while adhering to the constraints of the manufacturing process.",
    "answer": 67,
    "ori": "13_optmath_bench",
    "index": 59,
    "description": "There are 5 jobs labeled as Job 0, Job 1, Job 2, Job 3, and Job 4, and 4 machines labeled as Machine 0, Machine 1, Machine 2, and Machine 3. Each job must be assigned to one of 5 schedule positions (Position 0 to Position 4) on each machine. The goal is to minimize the total completion time of all jobs, which includes the start time of the job in the last schedule position (Position 4) on the last machine (Machine 3) and the processing time of that job. Each job has specific processing times on each machine: Job 0 takes 9 units on Machine 0, 7 units on Machine 1, 5 units on Machine 2, and 6 units on Machine 3; Job 1 takes 7 units on Machine 0, 10 units on Machine 1, 10 units on Machine 2, and 8 units on Machine 3; Job 2 takes 6 units on Machine 0, 9 units on Machine 1, 9 units on Machine 2, and 8 units on Machine 3; Job 3 takes 10 units on Machine 0, 10 units on Machine 1, 7 units on Machine 2, and 8 units on Machine 3; Job 4 takes 6 units on Machine 0, 10 units on Machine 1, 5 units on Machine 2, and 10 units on Machine 3. Each schedule position on each machine must be assigned exactly one job, and each job must be assigned to exactly one schedule position across all machines. The start time of a job on the next machine must be at least equal to its completion time on the current machine. Additionally, the start time of a job in the next schedule position must be at least equal to the completion time of the job in the current position on the same machine. The processing times for the jobs in the last schedule position (Position 4) are: Job 0 takes 6 units, Job 1 takes 8 units, Job 2 takes 8 units, Job 3 takes 8 units, and Job 4 takes 10 units. The start time of the job in Position 4 on Machine 3 is a critical factor in the objective function. The decision variables include assigning each job to a specific schedule position on each machine and determining the start times of each job on each machine to ensure all constraints are satisfied. The objective is to minimize the total completion time of all jobs while adhering to the constraints of the manufacturing process.",
    "ground_truth": 67
  },
  {
    "question": "There are 7 jobs, each consisting of 2 operations that must be processed in sequence. Each operation takes exactly 1 unit of time to complete. The operations are assigned to specific machines, and no two operations on the same machine can overlap in time. For each pair of operations assigned to the same machine, a binary decision variable determines the order in which they are processed. If one operation is scheduled before the other, the corresponding binary variable is set to 1; otherwise, it is set to 0. A large constant value of 100,000 is used to enforce the order of operations on shared machines. The start time of each operation must be non-negative, and the start time of the second operation in each job must be at least 1 unit of time after the start time of the first operation in the same job. The total completion time, or makespan, is defined as the maximum completion time across all operations. The objective is to minimize the makespan by determining the optimal start times for all operations and the order of operations on shared machines, while ensuring that all constraints are satisfied.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 60,
    "description": "There are 7 jobs, each consisting of 2 operations that must be processed in sequence. Each operation takes exactly 1 unit of time to complete. The operations are assigned to specific machines, and no two operations on the same machine can overlap in time. For each pair of operations assigned to the same machine, a binary decision variable determines the order in which they are processed. If one operation is scheduled before the other, the corresponding binary variable is set to 1; otherwise, it is set to 0. A large constant value of 100,000 is used to enforce the order of operations on shared machines. The start time of each operation must be non-negative, and the start time of the second operation in each job must be at least 1 unit of time after the start time of the first operation in the same job. The total completion time, or makespan, is defined as the maximum completion time across all operations. The objective is to minimize the makespan by determining the optimal start times for all operations and the order of operations on shared machines, while ensuring that all constraints are satisfied.",
    "ground_truth": 3
  },
  {
    "question": "Select two facilities from five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the minimum distance between any two selected facilities. Each location can either be selected (1) or not selected (0). For every pair of locations, determine whether both are selected as facilities, represented by a binary decision variable. The distances between the locations are scaled by a factor of 1,000,000 and are as follows: Node 0 and Node 1: 19 units, Node 0 and Node 2: 21 units, Node 0 and Node 3: 31 units, Node 0 and Node 4: 35 units, Node 1 and Node 0: 29 units, Node 1 and Node 2: 13 units, Node 1 and Node 3: 46 units, Node 1 and Node 4: 37 units, Node 2 and Node 0: 50 units, Node 2 and Node 1: 22 units, Node 2 and Node 3: 49 units, Node 2 and Node 4: 33 units, Node 3 and Node 0: 18 units, Node 3 and Node 1: 20 units, Node 3 and Node 2: 46 units, Node 3 and Node 4: 33 units, Node 4 and Node 0: 18 units, Node 4 and Node 1: 26 units, Node 4 and Node 2: 39 units, Node 4 and Node 3: 43 units. The total number of selected facilities must equal two. For every pair of locations, the selection of both facilities in the pair is only possible if both individual facilities are selected, enforced through constraints linking the pairwise selection variables to the individual facility selection variables. All decision variables are binary, ensuring facilities are either fully selected or not selected at all. The objective is to maximize the minimum distance between any two selected facilities, ensuring geographical dispersion while adhering to the constraints on pairwise selection and total facility count.",
    "answer": 46,
    "ori": "13_optmath_bench",
    "index": 61,
    "description": "Select two facilities from five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the minimum distance between any two selected facilities. Each location can either be selected (1) or not selected (0). For every pair of locations, determine whether both are selected as facilities, represented by a binary decision variable. The distances between the locations are scaled by a factor of 1,000,000 and are as follows: Node 0 and Node 1: 19 units, Node 0 and Node 2: 21 units, Node 0 and Node 3: 31 units, Node 0 and Node 4: 35 units, Node 1 and Node 0: 29 units, Node 1 and Node 2: 13 units, Node 1 and Node 3: 46 units, Node 1 and Node 4: 37 units, Node 2 and Node 0: 50 units, Node 2 and Node 1: 22 units, Node 2 and Node 3: 49 units, Node 2 and Node 4: 33 units, Node 3 and Node 0: 18 units, Node 3 and Node 1: 20 units, Node 3 and Node 2: 46 units, Node 3 and Node 4: 33 units, Node 4 and Node 0: 18 units, Node 4 and Node 1: 26 units, Node 4 and Node 2: 39 units, Node 4 and Node 3: 43 units. The total number of selected facilities must equal two. For every pair of locations, the selection of both facilities in the pair is only possible if both individual facilities are selected, enforced through constraints linking the pairwise selection variables to the individual facility selection variables. All decision variables are binary, ensuring facilities are either fully selected or not selected at all. The objective is to maximize the minimum distance between any two selected facilities, ensuring geographical dispersion while adhering to the constraints on pairwise selection and total facility count.",
    "ground_truth": 46
  },
  {
    "question": "The problem involves scheduling operations for six jobs (Job 0 through Job 5) in a manufacturing facility, where each job consists of two operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. Operations from different jobs may share the same machine, and a machine can only process one operation at a time. The goal is to minimize the total time to complete all jobs, known as the makespan.\n\nFor each job, the second operation cannot start until the first operation is completed, ensuring a sequence within each job. Binary variables are used to determine the order of operations on shared machines. If a binary variable is set to 1, it indicates that one operation is scheduled before another on the same machine; if set to 0, the order is reversed. A large constant (100,000) is used in the constraints to enforce this sequencing logic.\n\nThe makespan must be at least as large as the completion time of every operation across all jobs. All start times for operations must be non-negative, and the binary variables must be either 0 or 1. The objective is to determine the start times for all operations and the sequence of operations on shared machines to minimize the makespan, ensuring efficient completion of all jobs.\n\nConstraints include ensuring that the start time of the second operation in each job is at least 1 unit of time after the start time of the first operation. For operations sharing the same machine, one operation must finish before the other starts, enforced by the binary variables and the large constant. The makespan must be at least as large as the completion time of every operation, and all start times must be non-negative. The binary variables must be either 0 or 1 to determine the correct sequence of operations on shared machines.",
    "answer": 6,
    "ori": "13_optmath_bench",
    "index": 62,
    "description": "The problem involves scheduling operations for six jobs (Job 0 through Job 5) in a manufacturing facility, where each job consists of two operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. Operations from different jobs may share the same machine, and a machine can only process one operation at a time. The goal is to minimize the total time to complete all jobs, known as the makespan.\n\nFor each job, the second operation cannot start until the first operation is completed, ensuring a sequence within each job. Binary variables are used to determine the order of operations on shared machines. If a binary variable is set to 1, it indicates that one operation is scheduled before another on the same machine; if set to 0, the order is reversed. A large constant (100,000) is used in the constraints to enforce this sequencing logic.\n\nThe makespan must be at least as large as the completion time of every operation across all jobs. All start times for operations must be non-negative, and the binary variables must be either 0 or 1. The objective is to determine the start times for all operations and the sequence of operations on shared machines to minimize the makespan, ensuring efficient completion of all jobs.\n\nConstraints include ensuring that the start time of the second operation in each job is at least 1 unit of time after the start time of the first operation. For operations sharing the same machine, one operation must finish before the other starts, enforced by the binary variables and the large constant. The makespan must be at least as large as the completion time of every operation, and all start times must be non-negative. The binary variables must be either 0 or 1 to determine the correct sequence of operations on shared machines.",
    "ground_truth": 6
  },
  {
    "question": "In a manufacturing facility, six distinct jobs need to be processed on shared machines. Each job consists of two operations that must be performed in a specific order, with the second operation starting only after the first operation is completed. Each operation has a processing time of 1 unit. The goal is to minimize the total completion time, known as the makespan, by scheduling operations on the machines efficiently.\n\nEach operation is assigned to a specific machine, and some operations from different jobs share the same machine, creating potential conflicts. To resolve these conflicts, the scheduler must determine the order in which operations are processed on each machine. This is achieved using binary variables, where a value of 1 indicates that one operation is scheduled before another, and 0 indicates the opposite. A large constant of 100,000 is used in the constraints to ensure that only one of the two possible orders is active at any time, preventing overlapping operations on the same machine.\n\nThe start time of each operation must be non-negative, and the makespan must be at least as large as the completion time of every operation. The precedence constraints ensure that for each job, the start time of the second operation is at least 1 unit of time after the start time of the first operation. The machine capacity constraints ensure that for every pair of operations assigned to the same machine, one operation must finish before the other starts, determined by the binary variables.\n\nThe objective is to minimize the makespan by scheduling the operations in a way that respects the precedence constraints within each job, avoids overlapping operations on the same machine, and ensures all start times are non-negative. The solution must also accurately reflect the completion time of the last operation, ensuring the makespan is minimized.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 63,
    "description": "In a manufacturing facility, six distinct jobs need to be processed on shared machines. Each job consists of two operations that must be performed in a specific order, with the second operation starting only after the first operation is completed. Each operation has a processing time of 1 unit. The goal is to minimize the total completion time, known as the makespan, by scheduling operations on the machines efficiently.\n\nEach operation is assigned to a specific machine, and some operations from different jobs share the same machine, creating potential conflicts. To resolve these conflicts, the scheduler must determine the order in which operations are processed on each machine. This is achieved using binary variables, where a value of 1 indicates that one operation is scheduled before another, and 0 indicates the opposite. A large constant of 100,000 is used in the constraints to ensure that only one of the two possible orders is active at any time, preventing overlapping operations on the same machine.\n\nThe start time of each operation must be non-negative, and the makespan must be at least as large as the completion time of every operation. The precedence constraints ensure that for each job, the start time of the second operation is at least 1 unit of time after the start time of the first operation. The machine capacity constraints ensure that for every pair of operations assigned to the same machine, one operation must finish before the other starts, determined by the binary variables.\n\nThe objective is to minimize the makespan by scheduling the operations in a way that respects the precedence constraints within each job, avoids overlapping operations on the same machine, and ensures all start times are non-negative. The solution must also accurately reflect the completion time of the last operation, ensuring the makespan is minimized.",
    "ground_truth": 4
  },
  {
    "question": "The goal is to minimize the total travel cost for a delivery vehicle visiting six cities: City 0, City 1, City 2, City 3, City 4, and City 5. The vehicle must visit each city exactly once and return to the starting point, ensuring the route forms a single tour without subtours. The decision variables include binary choices for whether the vehicle travels directly from one city to another and general integer variables representing the sequence in which cities are visited. The travel costs between cities are as follows: from City 0 to City 1 costs 281, to City 2 costs 300, to City 3 costs 307, to City 4 costs 313, and to City 5 costs 308; from City 1 to City 0 costs 314, to City 2 costs 313, to City 3 costs 324, to City 4 costs 321, and to City 5 costs 323; from City 2 to City 0 costs 317, to City 1 costs 277, to City 3 costs 297, to City 4 costs 299, and to City 5 costs 308; from City 3 to City 0 costs 287, to City 1 costs 304, to City 2 costs 291, to City 4 costs 299, and to City 5 costs 320; from City 4 to City 0 costs 312, to City 1 costs 314, to City 2 costs 292, to City 3 costs 322, and to City 5 costs 275; from City 5 to City 0 costs 320, to City 1 costs 282, to City 2 costs 280, to City 3 costs 313, and to City 4 costs 321. The constraints include ensuring the vehicle arrives at and departs from each city exactly once, assigning sequence numbers to cities to prevent subtours, and ensuring sequence numbers are unique and range from 0 to 5. Subtour elimination is enforced by linking route decisions with sequence numbers, ensuring logical visit order and preventing invalid loops. The solution must respect all constraints to form a valid tour while minimizing total travel costs.",
    "answer": 1741,
    "ori": "13_optmath_bench",
    "index": 64,
    "description": "The goal is to minimize the total travel cost for a delivery vehicle visiting six cities: City 0, City 1, City 2, City 3, City 4, and City 5. The vehicle must visit each city exactly once and return to the starting point, ensuring the route forms a single tour without subtours. The decision variables include binary choices for whether the vehicle travels directly from one city to another and general integer variables representing the sequence in which cities are visited. The travel costs between cities are as follows: from City 0 to City 1 costs 281, to City 2 costs 300, to City 3 costs 307, to City 4 costs 313, and to City 5 costs 308; from City 1 to City 0 costs 314, to City 2 costs 313, to City 3 costs 324, to City 4 costs 321, and to City 5 costs 323; from City 2 to City 0 costs 317, to City 1 costs 277, to City 3 costs 297, to City 4 costs 299, and to City 5 costs 308; from City 3 to City 0 costs 287, to City 1 costs 304, to City 2 costs 291, to City 4 costs 299, and to City 5 costs 320; from City 4 to City 0 costs 312, to City 1 costs 314, to City 2 costs 292, to City 3 costs 322, and to City 5 costs 275; from City 5 to City 0 costs 320, to City 1 costs 282, to City 2 costs 280, to City 3 costs 313, and to City 4 costs 321. The constraints include ensuring the vehicle arrives at and departs from each city exactly once, assigning sequence numbers to cities to prevent subtours, and ensuring sequence numbers are unique and range from 0 to 5. Subtour elimination is enforced by linking route decisions with sequence numbers, ensuring logical visit order and preventing invalid loops. The solution must respect all constraints to form a valid tour while minimizing total travel costs.",
    "ground_truth": 1741
  },
  {
    "question": "Minimize the total operational costs, which include production setup costs of 145.2319299071881 per production run, machine startup costs of 65.79360965435782 per startup, inventory holding costs of 0.8652264753415143 for Product 0, 0.9341662877492469 for Product 1, and 1.07339072521956 for Product 2 per unit, and backlogging penalties of 7.607410261300208 for Product 0, 6.920344391340704 for Product 1, and 6.497781941350707 for Product 2 per unit. The decisions include whether to produce each product on each machine in each period, whether to start up a machine for a specific product in a given period, the exact amount of each product to produce on each machine in each period, how much of each product to keep in inventory at the end of each period, and how much to backlog if demand cannot be met. \n\nThe constraints include meeting customer demand in each period, where the total production of each product across both machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, must equal the demand for that period plus the current inventory minus the current backlog. The demands are 21.53845915883999 for Product 0 in Period 0, 22.99877365370049 in Period 1, and 20.41750946364395 in Period 2; 24.34292430654904 for Product 1 in Period 0, 18.69161579278047 in Period 1, and 16.96075239636408 in Period 2; and 15.44135005337596 for Product 2 in Period 0, 24.75403844533352 in Period 1, and 17.09921582696376 in Period 2. \n\nThe total production quantity for each product on each machine in each period, plus any startup time required, must not exceed the machine's capacity. The startup time for Machine 0 is 6.900949355420833, and for Machine 1, it is 7.255877688483005. The capacity of Machine 0 is 73.62985121550206, and for Machine 1, it is 69.3191618930891. Each machine can only be used for one product at a time in each period, meaning the sum of production decisions for all products on a single machine in a given period cannot exceed 1. \n\nIf a machine is used to produce a product in a period but was not used for that product in the previous period, a startup cost is incurred. For the first period, a startup is automatically required if production occurs. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions are binary (0 or 1).",
    "answer": 856.15,
    "ori": "13_optmath_bench",
    "index": 65,
    "description": "Minimize the total operational costs, which include production setup costs of 145.2319299071881 per production run, machine startup costs of 65.79360965435782 per startup, inventory holding costs of 0.8652264753415143 for Product 0, 0.9341662877492469 for Product 1, and 1.07339072521956 for Product 2 per unit, and backlogging penalties of 7.607410261300208 for Product 0, 6.920344391340704 for Product 1, and 6.497781941350707 for Product 2 per unit. The decisions include whether to produce each product on each machine in each period, whether to start up a machine for a specific product in a given period, the exact amount of each product to produce on each machine in each period, how much of each product to keep in inventory at the end of each period, and how much to backlog if demand cannot be met. \n\nThe constraints include meeting customer demand in each period, where the total production of each product across both machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, must equal the demand for that period plus the current inventory minus the current backlog. The demands are 21.53845915883999 for Product 0 in Period 0, 22.99877365370049 in Period 1, and 20.41750946364395 in Period 2; 24.34292430654904 for Product 1 in Period 0, 18.69161579278047 in Period 1, and 16.96075239636408 in Period 2; and 15.44135005337596 for Product 2 in Period 0, 24.75403844533352 in Period 1, and 17.09921582696376 in Period 2. \n\nThe total production quantity for each product on each machine in each period, plus any startup time required, must not exceed the machine's capacity. The startup time for Machine 0 is 6.900949355420833, and for Machine 1, it is 7.255877688483005. The capacity of Machine 0 is 73.62985121550206, and for Machine 1, it is 69.3191618930891. Each machine can only be used for one product at a time in each period, meaning the sum of production decisions for all products on a single machine in a given period cannot exceed 1. \n\nIf a machine is used to produce a product in a period but was not used for that product in the previous period, a startup cost is incurred. For the first period, a startup is automatically required if production occurs. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions are binary (0 or 1).",
    "ground_truth": 856.15
  },
  {
    "question": "A logistics company must deliver packages to seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to determine the most efficient route that minimizes the total delivery cost while ensuring each city is visited exactly once and the route forms a single continuous loop. The delivery costs between cities are as follows:  \n\n- From City 0: To City 1 costs 277, to City 2 costs 301, to City 3 costs 299, to City 4 costs 301, to City 5 costs 280, and to City 6 costs 282.  \n- From City 1: To City 0 costs 311, to City 2 costs 291, to City 3 costs 291, to City 4 costs 310, to City 5 costs 292, and to City 6 costs 313.  \n- From City 2: To City 0 costs 315, to City 1 costs 310, to City 3 costs 285, to City 4 costs 320, to City 5 costs 278, and to City 6 costs 311.  \n- From City 3: To City 0 costs 290, to City 1 costs 289, to City 2 costs 313, to City 4 costs 289, to City 5 costs 320, and to City 6 costs 305.  \n- From City 4: To City 0 costs 277, to City 1 costs 313, to City 2 costs 325, to City 3 costs 300, to City 5 costs 300, and to City 6 costs 281.  \n- From City 5: To City 0 costs 281, to City 1 costs 301, to City 2 costs 311, to City 3 costs 292, to City 4 costs 299, and to City 6 costs 305.  \n- From City 6: To City 0 costs 280, to City 1 costs 291, to City 2 costs 311, to City 3 costs 298, to City 4 costs 275, and to City 5 costs 298.  \n\nThe problem requires that each city is visited exactly once and that each city is the starting point for exactly one trip. To ensure the route forms a single continuous loop without smaller disconnected loops, the company uses constraints involving the position of each city in the tour. Each city is assigned a position in the delivery sequence, ranging from 1 to 7, and these positions must satisfy constraints that prevent subtours. For example, if City 1 is visited before City 2, the position of City 1 must be less than that of City 2. The objective is to minimize the total delivery cost, which is the sum of the costs of all trips taken, while satisfying all constraints.",
    "answer": 1988,
    "ori": "13_optmath_bench",
    "index": 66,
    "description": "A logistics company must deliver packages to seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to determine the most efficient route that minimizes the total delivery cost while ensuring each city is visited exactly once and the route forms a single continuous loop. The delivery costs between cities are as follows:  \n\n- From City 0: To City 1 costs 277, to City 2 costs 301, to City 3 costs 299, to City 4 costs 301, to City 5 costs 280, and to City 6 costs 282.  \n- From City 1: To City 0 costs 311, to City 2 costs 291, to City 3 costs 291, to City 4 costs 310, to City 5 costs 292, and to City 6 costs 313.  \n- From City 2: To City 0 costs 315, to City 1 costs 310, to City 3 costs 285, to City 4 costs 320, to City 5 costs 278, and to City 6 costs 311.  \n- From City 3: To City 0 costs 290, to City 1 costs 289, to City 2 costs 313, to City 4 costs 289, to City 5 costs 320, and to City 6 costs 305.  \n- From City 4: To City 0 costs 277, to City 1 costs 313, to City 2 costs 325, to City 3 costs 300, to City 5 costs 300, and to City 6 costs 281.  \n- From City 5: To City 0 costs 281, to City 1 costs 301, to City 2 costs 311, to City 3 costs 292, to City 4 costs 299, and to City 6 costs 305.  \n- From City 6: To City 0 costs 280, to City 1 costs 291, to City 2 costs 311, to City 3 costs 298, to City 4 costs 275, and to City 5 costs 298.  \n\nThe problem requires that each city is visited exactly once and that each city is the starting point for exactly one trip. To ensure the route forms a single continuous loop without smaller disconnected loops, the company uses constraints involving the position of each city in the tour. Each city is assigned a position in the delivery sequence, ranging from 1 to 7, and these positions must satisfy constraints that prevent subtours. For example, if City 1 is visited before City 2, the position of City 1 must be less than that of City 2. The objective is to minimize the total delivery cost, which is the sum of the costs of all trips taken, while satisfying all constraints.",
    "ground_truth": 1988
  },
  {
    "question": " Cell Tower Deployment for Regional Coverage\n\nYou are tasked with deploying cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 34 distinct areas, each with a specific population size that needs to be covered by the cell towers. Your goal is to determine which towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Tower Deployment**: Decide whether to build each of the 30 available cell towers. Each tower has a unique construction cost, and building it will enable coverage for certain areas.\n2. **Area Coverage**: Determine which of the 34 areas will be covered by the deployed towers. An area is considered covered if at least one of the towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 34 areas are as follows:\n- Area 0: 3,328 people\n- Area 1: 2,066 people\n- Area 2: 2,261 people\n- Area 3: 4,527 people\n- Area 4: 4,205 people\n- Area 5: 4,927 people\n- Area 6: 2,941 people\n- Area 7: 4,277 people\n- Area 8: 3,276 people\n- Area 9: 4,326 people\n- Area 10: 2,852 people\n- Area 11: 3,957 people\n- Area 12: 2,068 people\n- Area 13: 4,724 people\n- Area 14: 3,226 people\n- Area 15: 3,575 people\n- Area 16: 2,922 people\n- Area 17: 3,850 people\n- Area 18: 4,898 people\n- Area 19: 2,288 people\n- Area 20: 4,726 people\n- Area 21: 2,513 people\n- Area 22: 2,336 people\n- Area 23: 4,669 people\n- Area 24: 4,626 people\n- Area 25: 4,585 people\n- Area 26: 4,367 people\n- Area 27: 4,981 people\n- Area 28: 4,049 people\n- Area 29: 4,948 people\n- Area 30: 2,182 people\n- Area 31: 2,421 people\n- Area 32: 3,061 people\n- Area 33: 4,310 people\n\n#### Constraints:\n1. **Coverage Requirements**: Each area must be covered by at least one of the towers that can serve it. For example:\n   - Area 0 can be covered by Towers 0, 3, 4, 7, 9, 16, 17, 20, 22, 24, 25, 26, or 27.\n   - Area 1 can be covered by Towers 0, 1, 15, 19, 22, 23, 25, 26, 27, or 29.\n   - Similar coverage relationships exist for all 34 areas, as detailed in the input data.\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 3,375 units. The construction costs for the towers are:\n   - Tower 0: 248 units\n   - Tower 1: 226 units\n   - Tower 2: 454 units\n   - Tower 3: 466 units\n   - Tower 4: 241 units\n   - Tower 5: 201 units\n   - Tower 6: 415 units\n   - Tower 7: 486 units\n   - Tower 8: 485 units\n   - Tower 9: 492 units\n   - Tower 10: 249 units\n   - Tower 11: 486 units\n   - Tower 12: 417 units\n   - Tower 13: 327 units\n   - Tower 14: 257 units\n   - Tower 15: 486 units\n   - Tower 16: 438 units\n   - Tower 17: 266 units\n   - Tower 18: 473 units\n   - Tower 19: 268 units\n   - Tower 20: 293 units\n   - Tower 21: 379 units\n   - Tower 22: 476 units\n   - Tower 23: 482 units\n   - Tower 24: 367 units\n   - Tower 25: 239 units\n   - Tower 26: 368 units\n   - Tower 27: 492 units\n   - Tower 28: 454 units\n   - Tower 29: 319 units\n\n3. **Binary Decisions**: Each tower can either be built (1) or not built (0), and each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover to maximize the total population served, ensuring that all coverage requirements are met and the total construction cost does not exceed the budget. The solution must account for the specific coverage capabilities of each tower and the population sizes of the areas.",
    "answer": 124268,
    "ori": "13_optmath_bench",
    "index": 67,
    "description": " Cell Tower Deployment for Regional Coverage\n\nYou are tasked with deploying cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 34 distinct areas, each with a specific population size that needs to be covered by the cell towers. Your goal is to determine which towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Tower Deployment**: Decide whether to build each of the 30 available cell towers. Each tower has a unique construction cost, and building it will enable coverage for certain areas.\n2. **Area Coverage**: Determine which of the 34 areas will be covered by the deployed towers. An area is considered covered if at least one of the towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 34 areas are as follows:\n- Area 0: 3,328 people\n- Area 1: 2,066 people\n- Area 2: 2,261 people\n- Area 3: 4,527 people\n- Area 4: 4,205 people\n- Area 5: 4,927 people\n- Area 6: 2,941 people\n- Area 7: 4,277 people\n- Area 8: 3,276 people\n- Area 9: 4,326 people\n- Area 10: 2,852 people\n- Area 11: 3,957 people\n- Area 12: 2,068 people\n- Area 13: 4,724 people\n- Area 14: 3,226 people\n- Area 15: 3,575 people\n- Area 16: 2,922 people\n- Area 17: 3,850 people\n- Area 18: 4,898 people\n- Area 19: 2,288 people\n- Area 20: 4,726 people\n- Area 21: 2,513 people\n- Area 22: 2,336 people\n- Area 23: 4,669 people\n- Area 24: 4,626 people\n- Area 25: 4,585 people\n- Area 26: 4,367 people\n- Area 27: 4,981 people\n- Area 28: 4,049 people\n- Area 29: 4,948 people\n- Area 30: 2,182 people\n- Area 31: 2,421 people\n- Area 32: 3,061 people\n- Area 33: 4,310 people\n\n#### Constraints:\n1. **Coverage Requirements**: Each area must be covered by at least one of the towers that can serve it. For example:\n   - Area 0 can be covered by Towers 0, 3, 4, 7, 9, 16, 17, 20, 22, 24, 25, 26, or 27.\n   - Area 1 can be covered by Towers 0, 1, 15, 19, 22, 23, 25, 26, 27, or 29.\n   - Similar coverage relationships exist for all 34 areas, as detailed in the input data.\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 3,375 units. The construction costs for the towers are:\n   - Tower 0: 248 units\n   - Tower 1: 226 units\n   - Tower 2: 454 units\n   - Tower 3: 466 units\n   - Tower 4: 241 units\n   - Tower 5: 201 units\n   - Tower 6: 415 units\n   - Tower 7: 486 units\n   - Tower 8: 485 units\n   - Tower 9: 492 units\n   - Tower 10: 249 units\n   - Tower 11: 486 units\n   - Tower 12: 417 units\n   - Tower 13: 327 units\n   - Tower 14: 257 units\n   - Tower 15: 486 units\n   - Tower 16: 438 units\n   - Tower 17: 266 units\n   - Tower 18: 473 units\n   - Tower 19: 268 units\n   - Tower 20: 293 units\n   - Tower 21: 379 units\n   - Tower 22: 476 units\n   - Tower 23: 482 units\n   - Tower 24: 367 units\n   - Tower 25: 239 units\n   - Tower 26: 368 units\n   - Tower 27: 492 units\n   - Tower 28: 454 units\n   - Tower 29: 319 units\n\n3. **Binary Decisions**: Each tower can either be built (1) or not built (0), and each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover to maximize the total population served, ensuring that all coverage requirements are met and the total construction cost does not exceed the budget. The solution must account for the specific coverage capabilities of each tower and the population sizes of the areas.",
    "ground_truth": 124268
  },
  {
    "question": "Minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period. The decisions involve determining whether to produce each product on each machine in each period, deciding whether to start up each machine for each product in each period, determining the exact quantity of each product to produce on each machine in each period, and deciding how much inventory to carry over or how much demand to backlog for each product in each period. The total cost includes production setup costs of 149.1695690337089 per production run, machine startup costs of 69.24269269143792 per machine startup, inventory holding costs of 1.080318154052025 for Product 0 and 1.143069947055348 for Product 1, and backlogging costs of 6.798895023015501 for Product 0 and 6.372651501311341 for Product 1. The constraints ensure that the total production of each product across all machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, equals the demand for that product in the current period, plus any inventory carried forward, minus any backlogged demand. The demands are 22.92965094851524 units for Product 0 in Period 0, 19.03396834281949 units in Period 1, and 18.90167422155575 units in Period 2, and 19.80185049682801 units for Product 1 in Period 0, 24.22810173621122 units in Period 1, and 16.84556169689551 units in Period 2. The production quantity on each machine, plus the startup time, cannot exceed the machine's capacity, which is 76.7045484622153 for Machine 0 and 69.3695364951939 for Machine 1. Each machine can only produce one product at a time in any given period. If a machine is used for production in a period but was not used in the previous period, a startup cost is incurred. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions must be binary.",
    "answer": 564.43,
    "ori": "13_optmath_bench",
    "index": 68,
    "description": "Minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period. The decisions involve determining whether to produce each product on each machine in each period, deciding whether to start up each machine for each product in each period, determining the exact quantity of each product to produce on each machine in each period, and deciding how much inventory to carry over or how much demand to backlog for each product in each period. The total cost includes production setup costs of 149.1695690337089 per production run, machine startup costs of 69.24269269143792 per machine startup, inventory holding costs of 1.080318154052025 for Product 0 and 1.143069947055348 for Product 1, and backlogging costs of 6.798895023015501 for Product 0 and 6.372651501311341 for Product 1. The constraints ensure that the total production of each product across all machines, plus any inventory carried over from the previous period, minus any backlog from the previous period, equals the demand for that product in the current period, plus any inventory carried forward, minus any backlogged demand. The demands are 22.92965094851524 units for Product 0 in Period 0, 19.03396834281949 units in Period 1, and 18.90167422155575 units in Period 2, and 19.80185049682801 units for Product 1 in Period 0, 24.22810173621122 units in Period 1, and 16.84556169689551 units in Period 2. The production quantity on each machine, plus the startup time, cannot exceed the machine's capacity, which is 76.7045484622153 for Machine 0 and 69.3695364951939 for Machine 1. Each machine can only produce one product at a time in any given period. If a machine is used for production in a period but was not used in the previous period, a startup cost is incurred. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions must be binary.",
    "ground_truth": 564.43
  },
  {
    "question": "Minimize the total cost, which includes fixed costs for establishing selected transit lines, operational costs based on the frequency of each line, and penalty costs for any unmet passenger demand. The fixed costs for establishing lines L_0 to L_13 are 2048, 2064, 2058, 3000, 2107, 2583, 2569, 2081, 2887, 2900, 2922, 2106, 2140, and 2227 units, respectively. The operational costs per unit frequency for lines L_0 to L_13 are 242, 236, 200, 300, 286, 249, 230, 260, 293, 206, 296, 240, 217, and 295 units, respectively. The penalty costs for unmet demand for OD pairs OD_5_9, OD_10_2, OD_2_7, OD_7_12, OD_2_0, OD_7_5, OD_3_11, OD_0_3, OD_7_9, and OD_7_10 are 709, 755, 739, 722, 725, 796, 753, 709, 732, and 723 units, respectively.\n\nFor each OD pair, the total capacity provided by the selected lines must meet or exceed the demand. If not, the unmet demand incurs a penalty. For OD pair OD_5_9, the combined capacity of lines L_1, L_2, L_5, L_7, L_8, L_9, L_11, L_12, and L_13 must be at least 24 passengers. For OD pair OD_10_2, the combined capacity of lines L_0 and L_5 must be at least 24 passengers. For OD pair OD_2_7, the combined capacity of lines L_0, L_4, L_5, L_7, L_9, L_10, L_12, and L_13 must be at least 23 passengers. For OD pair OD_7_12, the combined capacity of lines L_5, L_8, and L_11 must be at least 28 passengers. For OD pair OD_2_0, the combined capacity of lines L_4, L_6, L_8, L_12, and L_13 must be at least 25 passengers. For OD pair OD_7_5, the combined capacity of lines L_3 and L_11 must be at least 27 passengers. For OD pair OD_3_11, the combined capacity of lines L_3, L_4, L_7, L_8, and L_10 must be at least 20 passengers. For OD pair OD_0_3, the combined capacity of lines L_9 and L_12 must be at least 21 passengers. For OD pair OD_7_9, the combined capacity of lines L_0, L_6, L_11, and L_12 must be at least 22 passengers. For OD pair OD_7_10, the combined capacity of lines L_0, L_2, L_5, L_8, L_10, and L_11 must be at least 24 passengers.\n\nEach line’s frequency must be within a specified range if the line is selected. For lines L_0 to L_13, the frequency must be between 2 and 10 trips per unit time if the line is selected. The total vehicle usage across all lines cannot exceed the available fleet size of 70 vehicles. Vehicle usage is calculated based on the round-trip time and frequency of each line, with the total usage for lines L_0 to L_13 being 70, 71, 67, 78, 104, 75, 110, 96, 120, 65, 99, 61, 91, and 65 units, respectively.\n\nA station can only be designated as a transfer station if at least two transit lines pass through it. For station 0, lines L_2, L_4, L_8, or L_13 must be selected. For station 1, at least two of lines L_0, L_1, L_2, L_3, L_4, L_10, or L_12 must be selected. For station 2, lines L_5, L_12, or L_13 must be selected. For station 3, lines L_2, L_7, or L_13 must be selected. For station 4, lines L_4 or L_11 must be selected. For station 5, at least two of lines L_1, L_3, L_8, L_9, or L_11 must be selected. For station 6, line L_0 must be selected. For station 7, at least two of lines L_1, L_5, L_6, or L_13 must be selected. For station 8, at least two of lines L_1, L_2, L_5, or L_8 must be selected. For station 9, at least two of lines L_0, L_3, L_4, L_10, L_11, or L_13 must be selected. For station 10, at least two of lines L_2, L_7, L_10, or L_13 must be selected. For station 11, at least two of lines L_2, L_9, L_10, or L_11 must be selected. For station 12, at least two of lines L_0, L_2, L_3, L_6, or L_11 must be selected.\n\nThe total frequency of lines serving each OD pair must meet a minimum threshold to ensure adequate service. For example, the combined frequency of lines serving OD_5_9 must be at least 2 trips per unit time. If a line is selected, it must use a continuous path of arcs (connections between stations) in the network, ensuring that each line operates as a coherent route.",
    "answer": 175371,
    "ori": "13_optmath_bench",
    "index": 69,
    "description": "Minimize the total cost, which includes fixed costs for establishing selected transit lines, operational costs based on the frequency of each line, and penalty costs for any unmet passenger demand. The fixed costs for establishing lines L_0 to L_13 are 2048, 2064, 2058, 3000, 2107, 2583, 2569, 2081, 2887, 2900, 2922, 2106, 2140, and 2227 units, respectively. The operational costs per unit frequency for lines L_0 to L_13 are 242, 236, 200, 300, 286, 249, 230, 260, 293, 206, 296, 240, 217, and 295 units, respectively. The penalty costs for unmet demand for OD pairs OD_5_9, OD_10_2, OD_2_7, OD_7_12, OD_2_0, OD_7_5, OD_3_11, OD_0_3, OD_7_9, and OD_7_10 are 709, 755, 739, 722, 725, 796, 753, 709, 732, and 723 units, respectively.\n\nFor each OD pair, the total capacity provided by the selected lines must meet or exceed the demand. If not, the unmet demand incurs a penalty. For OD pair OD_5_9, the combined capacity of lines L_1, L_2, L_5, L_7, L_8, L_9, L_11, L_12, and L_13 must be at least 24 passengers. For OD pair OD_10_2, the combined capacity of lines L_0 and L_5 must be at least 24 passengers. For OD pair OD_2_7, the combined capacity of lines L_0, L_4, L_5, L_7, L_9, L_10, L_12, and L_13 must be at least 23 passengers. For OD pair OD_7_12, the combined capacity of lines L_5, L_8, and L_11 must be at least 28 passengers. For OD pair OD_2_0, the combined capacity of lines L_4, L_6, L_8, L_12, and L_13 must be at least 25 passengers. For OD pair OD_7_5, the combined capacity of lines L_3 and L_11 must be at least 27 passengers. For OD pair OD_3_11, the combined capacity of lines L_3, L_4, L_7, L_8, and L_10 must be at least 20 passengers. For OD pair OD_0_3, the combined capacity of lines L_9 and L_12 must be at least 21 passengers. For OD pair OD_7_9, the combined capacity of lines L_0, L_6, L_11, and L_12 must be at least 22 passengers. For OD pair OD_7_10, the combined capacity of lines L_0, L_2, L_5, L_8, L_10, and L_11 must be at least 24 passengers.\n\nEach line’s frequency must be within a specified range if the line is selected. For lines L_0 to L_13, the frequency must be between 2 and 10 trips per unit time if the line is selected. The total vehicle usage across all lines cannot exceed the available fleet size of 70 vehicles. Vehicle usage is calculated based on the round-trip time and frequency of each line, with the total usage for lines L_0 to L_13 being 70, 71, 67, 78, 104, 75, 110, 96, 120, 65, 99, 61, 91, and 65 units, respectively.\n\nA station can only be designated as a transfer station if at least two transit lines pass through it. For station 0, lines L_2, L_4, L_8, or L_13 must be selected. For station 1, at least two of lines L_0, L_1, L_2, L_3, L_4, L_10, or L_12 must be selected. For station 2, lines L_5, L_12, or L_13 must be selected. For station 3, lines L_2, L_7, or L_13 must be selected. For station 4, lines L_4 or L_11 must be selected. For station 5, at least two of lines L_1, L_3, L_8, L_9, or L_11 must be selected. For station 6, line L_0 must be selected. For station 7, at least two of lines L_1, L_5, L_6, or L_13 must be selected. For station 8, at least two of lines L_1, L_2, L_5, or L_8 must be selected. For station 9, at least two of lines L_0, L_3, L_4, L_10, L_11, or L_13 must be selected. For station 10, at least two of lines L_2, L_7, L_10, or L_13 must be selected. For station 11, at least two of lines L_2, L_9, L_10, or L_11 must be selected. For station 12, at least two of lines L_0, L_2, L_3, L_6, or L_11 must be selected.\n\nThe total frequency of lines serving each OD pair must meet a minimum threshold to ensure adequate service. For example, the combined frequency of lines serving OD_5_9 must be at least 2 trips per unit time. If a line is selected, it must use a continuous path of arcs (connections between stations) in the network, ensuring that each line operates as a coherent route.",
    "ground_truth": 175371
  },
  {
    "question": "You are tasked with optimizing the placement of facilities across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the weighted distances between pairs of facilities, where the weights represent the importance or benefit of separating specific pairs. Your goal is to select exactly three facilities out of the five possible locations while ensuring that the total dispersion benefit is maximized.\n\n#### Key Decisions:\n- **Facility Selection:** Decide which three out of the five locations will host the facilities. Each location can either be selected (1) or not selected (0).\n- **Pairwise Dispersion Activation:** Determine whether the dispersion benefit between a pair of selected facilities is activated. This is represented by a binary decision (1 if both facilities in the pair are selected, 0 otherwise).\n\n#### Objective:\nMaximize the total dispersion benefit across all pairs of selected facilities. The dispersion benefit between each pair of locations is as follows:\n- Node 0 and Node 1: 17 units\n- Node 0 and Node 2: 18 units\n- Node 0 and Node 3: 21 units\n- Node 0 and Node 4: 22 units\n- Node 1 and Node 0: 22 units\n- Node 1 and Node 2: 15 units\n- Node 1 and Node 3: 21 units\n- Node 1 and Node 4: 21 units\n- Node 2 and Node 0: 16 units\n- Node 2 and Node 1: 21 units\n- Node 2 and Node 3: 23 units\n- Node 2 and Node 4: 17 units\n- Node 3 and Node 0: 21 units\n- Node 3 and Node 1: 22 units\n- Node 3 and Node 2: 19 units\n- Node 3 and Node 4: 24 units\n- Node 4 and Node 0: 24 units\n- Node 4 and Node 1: 16 units\n- Node 4 and Node 2: 15 units\n- Node 4 and Node 3: 23 units\n\n#### Constraints:\n1. **Facility Selection Limit:** Exactly three facilities must be selected out of the five locations. This means the sum of selected facilities must equal three.\n2. **Pairwise Dispersion Activation Rules:**\n   - The dispersion benefit between two locations can only be activated if both locations are selected.\n   - If either location in a pair is not selected, the dispersion benefit for that pair cannot be activated.\n   - If both locations in a pair are selected, the dispersion benefit must be activated.\n\n#### Numerical Parameters:\n- The dispersion benefits between each pair of locations are explicitly provided in the objective description above.\n- The total number of facilities to be selected is fixed at three.\n\n#### Practical Implications:\nThis problem ensures that the selected facilities are spread out in a way that maximizes their overall separation benefit, which could be critical in scenarios such as minimizing risk, optimizing coverage, or ensuring redundancy. The constraints ensure that the solution is both feasible and aligned with the operational requirements of selecting exactly three facilities.\n\nBy solving this problem, you will determine the optimal set of three facilities and the corresponding pairwise dispersion benefits that maximize the total separation value across the network.",
    "answer": 135,
    "ori": "13_optmath_bench",
    "index": 70,
    "description": "You are tasked with optimizing the placement of facilities across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the weighted distances between pairs of facilities, where the weights represent the importance or benefit of separating specific pairs. Your goal is to select exactly three facilities out of the five possible locations while ensuring that the total dispersion benefit is maximized.\n\n#### Key Decisions:\n- **Facility Selection:** Decide which three out of the five locations will host the facilities. Each location can either be selected (1) or not selected (0).\n- **Pairwise Dispersion Activation:** Determine whether the dispersion benefit between a pair of selected facilities is activated. This is represented by a binary decision (1 if both facilities in the pair are selected, 0 otherwise).\n\n#### Objective:\nMaximize the total dispersion benefit across all pairs of selected facilities. The dispersion benefit between each pair of locations is as follows:\n- Node 0 and Node 1: 17 units\n- Node 0 and Node 2: 18 units\n- Node 0 and Node 3: 21 units\n- Node 0 and Node 4: 22 units\n- Node 1 and Node 0: 22 units\n- Node 1 and Node 2: 15 units\n- Node 1 and Node 3: 21 units\n- Node 1 and Node 4: 21 units\n- Node 2 and Node 0: 16 units\n- Node 2 and Node 1: 21 units\n- Node 2 and Node 3: 23 units\n- Node 2 and Node 4: 17 units\n- Node 3 and Node 0: 21 units\n- Node 3 and Node 1: 22 units\n- Node 3 and Node 2: 19 units\n- Node 3 and Node 4: 24 units\n- Node 4 and Node 0: 24 units\n- Node 4 and Node 1: 16 units\n- Node 4 and Node 2: 15 units\n- Node 4 and Node 3: 23 units\n\n#### Constraints:\n1. **Facility Selection Limit:** Exactly three facilities must be selected out of the five locations. This means the sum of selected facilities must equal three.\n2. **Pairwise Dispersion Activation Rules:**\n   - The dispersion benefit between two locations can only be activated if both locations are selected.\n   - If either location in a pair is not selected, the dispersion benefit for that pair cannot be activated.\n   - If both locations in a pair are selected, the dispersion benefit must be activated.\n\n#### Numerical Parameters:\n- The dispersion benefits between each pair of locations are explicitly provided in the objective description above.\n- The total number of facilities to be selected is fixed at three.\n\n#### Practical Implications:\nThis problem ensures that the selected facilities are spread out in a way that maximizes their overall separation benefit, which could be critical in scenarios such as minimizing risk, optimizing coverage, or ensuring redundancy. The constraints ensure that the solution is both feasible and aligned with the operational requirements of selecting exactly three facilities.\n\nBy solving this problem, you will determine the optimal set of three facilities and the corresponding pairwise dispersion benefits that maximize the total separation value across the network.",
    "ground_truth": 135
  },
  {
    "question": " Inventory Management with Backlogging in a Retail Supply Chain\n\nYou are managing the inventory and ordering process for a retail supply chain over a 19-week period. Your goal is to minimize the total costs associated with ordering, holding inventory, and backlogging unmet demand, while ensuring that customer demand is met as efficiently as possible. The costs and constraints are as follows:\n\n#### **Cost Components:**\n1. **Ordering Costs**: Each time an order is placed in a given week, a fixed cost is incurred. These costs vary by week and are as follows:\n   - Week 1: \\$930, Week 2: \\$881, Week 3: \\$925, Week 4: \\$808, Week 5: \\$711, Week 6: \\$785, Week 7: \\$997, Week 8: \\$820, Week 9: \\$843, Week 10: \\$631, Week 11: \\$726, Week 12: \\$1,071, Week 13: \\$741, Week 14: \\$1,157, Week 15: \\$916, Week 16: \\$791, Week 17: \\$1,055, Week 18: \\$932, Week 19: \\$794.\n\n2. **Variable Ordering Costs**: In addition to the fixed costs, there is a variable cost per unit ordered in each week. These costs are:\n   - Week 1: \\$40, Week 2: \\$26, Week 3: \\$38, Week 4: \\$20, Week 5: \\$25, Week 6: \\$22, Week 7: \\$40, Week 8: \\$39, Week 9: \\$25, Week 10: \\$26, Week 11: \\$34, Week 12: \\$25, Week 13: \\$26, Week 14: \\$27, Week 15: \\$27, Week 16: \\$35, Week 17: \\$23, Week 18: \\$26, Week 19: \\$36.\n\n3. **Inventory Holding Costs**: Holding inventory at the end of each week incurs a cost per unit. These costs are:\n   - Week 1: \\$19, Week 2: \\$16, Week 3: \\$24, Week 4: \\$23, Week 5: \\$24, Week 6: \\$23, Week 7: \\$20, Week 8: \\$21, Week 9: \\$21, Week 10: \\$25, Week 11: \\$15, Week 12: \\$20, Week 13: \\$24, Week 14: \\$16, Week 15: \\$16, Week 16: \\$16, Week 17: \\$19, Week 18: \\$15, Week 19: \\$20.\n\n4. **Backlogging Costs**: If demand cannot be met in a given week, the unmet demand is backlogged to the next week, incurring a cost per backlogged unit. These costs are:\n   - Week 1: \\$55, Week 2: \\$54, Week 3: \\$71, Week 4: \\$58, Week 5: \\$51, Week 6: \\$55, Week 7: \\$45, Week 8: \\$52, Week 9: \\$60, Week 10: \\$52, Week 11: \\$52, Week 12: \\$52, Week 13: \\$76, Week 14: \\$50, Week 15: \\$47, Week 16: \\$66, Week 17: \\$70, Week 18: \\$48, Week 19: \\$69.\n\n#### **Demand Constraints:**\n- The demand for each week must be met either by the inventory on hand, the units ordered in that week, or by backlogging to the next week. The demand for each week is as follows:\n  - Week 1: 495 units, Week 2: 316 units, Week 3: 375 units, Week 4: 467 units, Week 5: 418 units, Week 6: 398 units, Week 7: 533 units, Week 8: 525 units, Week 9: 361 units, Week 10: 452 units, Week 11: 470 units, Week 12: 378 units, Week 13: 302 units, Week 14: 463 units, Week 15: 438 units, Week 16: 383 units, Week 17: 377 units, Week 18: 429 units, Week 19: 324 units.\n\n#### **Inventory and Backlogging Rules:**\n- The inventory at the start of Week 1 and the end of Week 19 must be zero.\n- The backlogged demand at the start of Week 1 and the end of Week 19 must also be zero.\n- The amount ordered in any week cannot exceed the total demand over the 19-week period (7,904 units) if an order is placed in that week.\n\n#### **Objective:**\nYour task is to determine the optimal ordering schedule, inventory levels, and backlogged amounts for each week to minimize the total cost, which includes fixed ordering costs, variable ordering costs, inventory holding costs, and backlogging costs.\n\n#### **Key Decisions:**\n1. **Order Placement**: Decide whether to place an order in each week (a binary decision: yes or no).\n2. **Order Quantity**: Determine the number of units to order in each week.\n3. **Inventory Levels**: Decide how much inventory to hold at the end of each week.\n4. **Backlogged Demand**: Determine the amount of unmet demand to backlog to the next week.\n\nBy carefully balancing these decisions, you aim to minimize the total cost while ensuring that all customer demand is met either immediately or through backlogging.",
    "answer": 252401,
    "ori": "13_optmath_bench",
    "index": 71,
    "description": " Inventory Management with Backlogging in a Retail Supply Chain\n\nYou are managing the inventory and ordering process for a retail supply chain over a 19-week period. Your goal is to minimize the total costs associated with ordering, holding inventory, and backlogging unmet demand, while ensuring that customer demand is met as efficiently as possible. The costs and constraints are as follows:\n\n#### **Cost Components:**\n1. **Ordering Costs**: Each time an order is placed in a given week, a fixed cost is incurred. These costs vary by week and are as follows:\n   - Week 1: \\$930, Week 2: \\$881, Week 3: \\$925, Week 4: \\$808, Week 5: \\$711, Week 6: \\$785, Week 7: \\$997, Week 8: \\$820, Week 9: \\$843, Week 10: \\$631, Week 11: \\$726, Week 12: \\$1,071, Week 13: \\$741, Week 14: \\$1,157, Week 15: \\$916, Week 16: \\$791, Week 17: \\$1,055, Week 18: \\$932, Week 19: \\$794.\n\n2. **Variable Ordering Costs**: In addition to the fixed costs, there is a variable cost per unit ordered in each week. These costs are:\n   - Week 1: \\$40, Week 2: \\$26, Week 3: \\$38, Week 4: \\$20, Week 5: \\$25, Week 6: \\$22, Week 7: \\$40, Week 8: \\$39, Week 9: \\$25, Week 10: \\$26, Week 11: \\$34, Week 12: \\$25, Week 13: \\$26, Week 14: \\$27, Week 15: \\$27, Week 16: \\$35, Week 17: \\$23, Week 18: \\$26, Week 19: \\$36.\n\n3. **Inventory Holding Costs**: Holding inventory at the end of each week incurs a cost per unit. These costs are:\n   - Week 1: \\$19, Week 2: \\$16, Week 3: \\$24, Week 4: \\$23, Week 5: \\$24, Week 6: \\$23, Week 7: \\$20, Week 8: \\$21, Week 9: \\$21, Week 10: \\$25, Week 11: \\$15, Week 12: \\$20, Week 13: \\$24, Week 14: \\$16, Week 15: \\$16, Week 16: \\$16, Week 17: \\$19, Week 18: \\$15, Week 19: \\$20.\n\n4. **Backlogging Costs**: If demand cannot be met in a given week, the unmet demand is backlogged to the next week, incurring a cost per backlogged unit. These costs are:\n   - Week 1: \\$55, Week 2: \\$54, Week 3: \\$71, Week 4: \\$58, Week 5: \\$51, Week 6: \\$55, Week 7: \\$45, Week 8: \\$52, Week 9: \\$60, Week 10: \\$52, Week 11: \\$52, Week 12: \\$52, Week 13: \\$76, Week 14: \\$50, Week 15: \\$47, Week 16: \\$66, Week 17: \\$70, Week 18: \\$48, Week 19: \\$69.\n\n#### **Demand Constraints:**\n- The demand for each week must be met either by the inventory on hand, the units ordered in that week, or by backlogging to the next week. The demand for each week is as follows:\n  - Week 1: 495 units, Week 2: 316 units, Week 3: 375 units, Week 4: 467 units, Week 5: 418 units, Week 6: 398 units, Week 7: 533 units, Week 8: 525 units, Week 9: 361 units, Week 10: 452 units, Week 11: 470 units, Week 12: 378 units, Week 13: 302 units, Week 14: 463 units, Week 15: 438 units, Week 16: 383 units, Week 17: 377 units, Week 18: 429 units, Week 19: 324 units.\n\n#### **Inventory and Backlogging Rules:**\n- The inventory at the start of Week 1 and the end of Week 19 must be zero.\n- The backlogged demand at the start of Week 1 and the end of Week 19 must also be zero.\n- The amount ordered in any week cannot exceed the total demand over the 19-week period (7,904 units) if an order is placed in that week.\n\n#### **Objective:**\nYour task is to determine the optimal ordering schedule, inventory levels, and backlogged amounts for each week to minimize the total cost, which includes fixed ordering costs, variable ordering costs, inventory holding costs, and backlogging costs.\n\n#### **Key Decisions:**\n1. **Order Placement**: Decide whether to place an order in each week (a binary decision: yes or no).\n2. **Order Quantity**: Determine the number of units to order in each week.\n3. **Inventory Levels**: Decide how much inventory to hold at the end of each week.\n4. **Backlogged Demand**: Determine the amount of unmet demand to backlog to the next week.\n\nBy carefully balancing these decisions, you aim to minimize the total cost while ensuring that all customer demand is met either immediately or through backlogging.",
    "ground_truth": 252401
  },
  {
    "question": "The problem involves assigning employees to shifts across two restaurants to minimize costs associated with unfulfilled positions and employee assignments. There are two restaurants, each with two shifts per day, and eight employees available for assignment. Each shift at each restaurant has specific staffing demands for a particular skill, and employees have varying availability and skill sets. Employees can only be assigned to shifts they are available for and to roles that match their skills. Each employee can be assigned to at most one shift across all restaurants. Assigning employees to shifts incurs specific costs: assigning Employee 0 to Skill 0 costs 1 unit, assigning Employee 3 to Skill 0 costs 2 units, and assigning Employee 4 to Skill 0 costs 3 units. If a restaurant cannot meet the demand for a specific skill in a shift, unfulfilled positions incur a penalty cost of 100 units per position. The goal is to minimize the total cost, which includes the penalty costs for unfulfilled positions and the costs of assigning employees to shifts. Constraints ensure that the total number of employees assigned to a shift at a restaurant, plus any unfulfilled positions, equals the demand for that shift. Employees can only be assigned to shifts they are available for and to roles that match their skills. Each employee can be assigned to at most one shift across all restaurants.",
    "answer": 16,
    "ori": "13_optmath_bench",
    "index": 72,
    "description": "The problem involves assigning employees to shifts across two restaurants to minimize costs associated with unfulfilled positions and employee assignments. There are two restaurants, each with two shifts per day, and eight employees available for assignment. Each shift at each restaurant has specific staffing demands for a particular skill, and employees have varying availability and skill sets. Employees can only be assigned to shifts they are available for and to roles that match their skills. Each employee can be assigned to at most one shift across all restaurants. Assigning employees to shifts incurs specific costs: assigning Employee 0 to Skill 0 costs 1 unit, assigning Employee 3 to Skill 0 costs 2 units, and assigning Employee 4 to Skill 0 costs 3 units. If a restaurant cannot meet the demand for a specific skill in a shift, unfulfilled positions incur a penalty cost of 100 units per position. The goal is to minimize the total cost, which includes the penalty costs for unfulfilled positions and the costs of assigning employees to shifts. Constraints ensure that the total number of employees assigned to a shift at a restaurant, plus any unfulfilled positions, equals the demand for that shift. Employees can only be assigned to shifts they are available for and to roles that match their skills. Each employee can be assigned to at most one shift across all restaurants.",
    "ground_truth": 16
  },
  {
    "question": "Minimize the total completion time of six jobs processed on three machines, where each job must be assigned to exactly one of six schedule positions and each position must have exactly one job. The processing times for each job on each machine are as follows: Job 0 takes 5, 5, and 7 hours on Machines 0, 1, and 2 respectively; Job 1 takes 5, 9, and 10 hours; Job 2 takes 6, 7, and 10 hours; Job 3 takes 8, 7, and 9 hours; Job 4 takes 9, 5, and 9 hours; and Job 5 takes 8, 8, and 7 hours. Each job must start on Machine 1 only after completing on Machine 0, and on Machine 2 only after completing on Machine 1. Additionally, the start time of a job in a later position must be at least the start time of the job in the previous position plus its processing time on the same machine. The objective is to minimize the total completion time, which includes the start time of the last job on the last machine plus its processing time. All start times must be non-negative, and job assignments to positions are binary (either assigned or not). The specific coefficients for the objective function are 5, 6, 10, 7, 8, and 8 for JobSchedule[0,5], JobSchedule[1,5], JobSchedule[2,5], JobSchedule[3,5], JobSchedule[4,5], and JobSchedule[5,5] respectively, with an additional term StartTime[5,3]. The constraints include ensuring one job per schedule position, one schedule position per job, machine precedence, and job precedence, with exact coefficients as detailed in the LP data.",
    "answer": 69,
    "ori": "13_optmath_bench",
    "index": 73,
    "description": "Minimize the total completion time of six jobs processed on three machines, where each job must be assigned to exactly one of six schedule positions and each position must have exactly one job. The processing times for each job on each machine are as follows: Job 0 takes 5, 5, and 7 hours on Machines 0, 1, and 2 respectively; Job 1 takes 5, 9, and 10 hours; Job 2 takes 6, 7, and 10 hours; Job 3 takes 8, 7, and 9 hours; Job 4 takes 9, 5, and 9 hours; and Job 5 takes 8, 8, and 7 hours. Each job must start on Machine 1 only after completing on Machine 0, and on Machine 2 only after completing on Machine 1. Additionally, the start time of a job in a later position must be at least the start time of the job in the previous position plus its processing time on the same machine. The objective is to minimize the total completion time, which includes the start time of the last job on the last machine plus its processing time. All start times must be non-negative, and job assignments to positions are binary (either assigned or not). The specific coefficients for the objective function are 5, 6, 10, 7, 8, and 8 for JobSchedule[0,5], JobSchedule[1,5], JobSchedule[2,5], JobSchedule[3,5], JobSchedule[4,5], and JobSchedule[5,5] respectively, with an additional term StartTime[5,3]. The constraints include ensuring one job per schedule position, one schedule position per job, machine precedence, and job precedence, with exact coefficients as detailed in the LP data.",
    "ground_truth": 69
  },
  {
    "question": " Facility Dispersion in a Network\n\nYou are tasked with selecting a set of facilities from a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, and your goal is to ensure that the selected facilities are as spread out as possible.\n\n#### Key Decisions:\n1. **Facility Selection**: You must choose exactly 2 facilities out of the 5 available locations. Each location can either be selected (1) or not selected (0).\n2. **Pairwise Dispersion Activation**: For every pair of facilities, a binary decision determines whether both facilities in the pair are selected. This ensures that dispersion is only calculated for pairs where both facilities are chosen.\n\n#### Objective:\nMaximize the total dispersion across all selected facility pairs. The dispersion values between the facilities are as follows:\n- Node 0 and Node 1: 24 units\n- Node 0 and Node 2: 25 units\n- Node 0 and Node 3: 18 units\n- Node 0 and Node 4: 24 units\n- Node 1 and Node 0: 22 units\n- Node 1 and Node 2: 17 units\n- Node 1 and Node 3: 22 units\n- Node 1 and Node 4: 24 units\n- Node 2 and Node 0: 18 units\n- Node 2 and Node 1: 19 units\n- Node 2 and Node 3: 25 units\n- Node 2 and Node 4: 20 units\n- Node 3 and Node 0: 16 units\n- Node 3 and Node 1: 22 units\n- Node 3 and Node 2: 16 units\n- Node 3 and Node 4: 17 units\n- Node 4 and Node 0: 22 units\n- Node 4 and Node 1: 21 units\n- Node 4 and Node 2: 19 units\n- Node 4 and Node 3: 16 units\n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected from the 5 available locations.\n2. **Pairwise Activation Rules**:\n   - For any pair of facilities, the pairwise dispersion can only be counted if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, the pairwise dispersion for that pair cannot be counted.\n   - If both facilities in a pair are selected, the pairwise dispersion must be counted.\n\n#### Numerical Parameters:\n- Total facilities to select: 2\n- Dispersion values between facilities are explicitly provided in the objective section above.\n\n#### Goal:\nDetermine which 2 facilities to select and which pairwise dispersions to activate to maximize the total dispersion across the network while adhering to the constraints.",
    "answer": 46,
    "ori": "13_optmath_bench",
    "index": 74,
    "description": " Facility Dispersion in a Network\n\nYou are tasked with selecting a set of facilities from a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, and your goal is to ensure that the selected facilities are as spread out as possible.\n\n#### Key Decisions:\n1. **Facility Selection**: You must choose exactly 2 facilities out of the 5 available locations. Each location can either be selected (1) or not selected (0).\n2. **Pairwise Dispersion Activation**: For every pair of facilities, a binary decision determines whether both facilities in the pair are selected. This ensures that dispersion is only calculated for pairs where both facilities are chosen.\n\n#### Objective:\nMaximize the total dispersion across all selected facility pairs. The dispersion values between the facilities are as follows:\n- Node 0 and Node 1: 24 units\n- Node 0 and Node 2: 25 units\n- Node 0 and Node 3: 18 units\n- Node 0 and Node 4: 24 units\n- Node 1 and Node 0: 22 units\n- Node 1 and Node 2: 17 units\n- Node 1 and Node 3: 22 units\n- Node 1 and Node 4: 24 units\n- Node 2 and Node 0: 18 units\n- Node 2 and Node 1: 19 units\n- Node 2 and Node 3: 25 units\n- Node 2 and Node 4: 20 units\n- Node 3 and Node 0: 16 units\n- Node 3 and Node 1: 22 units\n- Node 3 and Node 2: 16 units\n- Node 3 and Node 4: 17 units\n- Node 4 and Node 0: 22 units\n- Node 4 and Node 1: 21 units\n- Node 4 and Node 2: 19 units\n- Node 4 and Node 3: 16 units\n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected from the 5 available locations.\n2. **Pairwise Activation Rules**:\n   - For any pair of facilities, the pairwise dispersion can only be counted if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, the pairwise dispersion for that pair cannot be counted.\n   - If both facilities in a pair are selected, the pairwise dispersion must be counted.\n\n#### Numerical Parameters:\n- Total facilities to select: 2\n- Dispersion values between facilities are explicitly provided in the objective section above.\n\n#### Goal:\nDetermine which 2 facilities to select and which pairwise dispersions to activate to maximize the total dispersion across the network while adhering to the constraints.",
    "ground_truth": 46
  },
  {
    "question": "Minimize the total operational cost, which includes the base cost for active generators, the per MW cost for power output, and the startup cost for generators. The base cost is 79 units per generator for Type 0, 78 units for Type 1, and 78 units for Type 2. The per MW cost is 4 units for Type 0, 3 units for Type 1, and 4 units for Type 2. The startup cost is 355 units for Type 0, 352 units for Type 1, and 346 units for Type 2. The total power output from all generators must meet or exceed the demand in each period, with demands of 173 MW in period 0, 197 MW in period 1, 227 MW in period 2, 201 MW in period 3, and 196 MW in period 4. Each active generator must produce at least its minimum output and no more than its maximum output, with minimum outputs of 35 MW for all types and maximum outputs of 127 MW for Type 0, 129 MW for Type 1, and 128 MW for Type 2. The total maximum output capacity of all active generators must be at least 15% higher than the demand in each period. The number of active generators cannot exceed the available units for each type, with a maximum of 3 generators for Type 0, 1 generator for Type 1, and 5 generators for Type 2. The number of generators started in a period cannot exceed the difference between the number of active generators in that period and the previous period, plus any generators that were already started. The number of active generators and startups must be non-negative integers, and the power output must be non-negative.",
    "answer": 4373,
    "ori": "13_optmath_bench",
    "index": 75,
    "description": "Minimize the total operational cost, which includes the base cost for active generators, the per MW cost for power output, and the startup cost for generators. The base cost is 79 units per generator for Type 0, 78 units for Type 1, and 78 units for Type 2. The per MW cost is 4 units for Type 0, 3 units for Type 1, and 4 units for Type 2. The startup cost is 355 units for Type 0, 352 units for Type 1, and 346 units for Type 2. The total power output from all generators must meet or exceed the demand in each period, with demands of 173 MW in period 0, 197 MW in period 1, 227 MW in period 2, 201 MW in period 3, and 196 MW in period 4. Each active generator must produce at least its minimum output and no more than its maximum output, with minimum outputs of 35 MW for all types and maximum outputs of 127 MW for Type 0, 129 MW for Type 1, and 128 MW for Type 2. The total maximum output capacity of all active generators must be at least 15% higher than the demand in each period. The number of active generators cannot exceed the available units for each type, with a maximum of 3 generators for Type 0, 1 generator for Type 1, and 5 generators for Type 2. The number of generators started in a period cannot exceed the difference between the number of active generators in that period and the previous period, plus any generators that were already started. The number of active generators and startups must be non-negative integers, and the power output must be non-negative.",
    "ground_truth": 4373
  },
  {
    "question": "Minimize the total operational costs, which include setup costs, startup costs, inventory holding costs, and backlogging costs, while meeting the demand for each item in each period. The setup cost is **136.4441474007699** per production run, and the startup cost is **72.08169936581939** per startup. The holding cost for Item 0 is **1.045681545748948** per unit, for Item 1 is **1.076278851472706** per unit, and for Item 2 is **1.141130030903227** per unit. The backlogging cost for Item 0 is **7.516688931886524** per unit, for Item 1 is **6.810219227144024** per unit, and for Item 2 is **7.989326755092092** per unit.\n\nThe production system involves three items (Item 0, Item 1, and Item 2), two machines (Machine 0 and Machine 1), and three time periods (Period 0, Period 1, and Period 2). For each item, machine, and time period, decide whether to produce the item (binary decision) and how much to produce (continuous decision). Determine whether to start up a machine for a specific item in a given period (binary decision). Decide how much inventory to carry over or how much demand to backlog for each item in each period (continuous decisions).\n\nThe total production, inventory, and backlog must balance the demand for each item in each period. For example, in Period 0, the demand for Item 0 is **15.13481645049243**, for Item 1 is **15.96509719647714**, and for Item 2 is **15.05799468831989**. In Period 1, the demand for Item 0 is **23.22348134905647**, for Item 1 is **24.89682877145792**, and for Item 2 is **20.28924491987942**. In Period 2, the demand for Item 0 is **19.81696900208589**, for Item 1 is **22.4702270586731**, and for Item 2 is **18.30123580755789**.\n\nThe production quantity and startup time must not exceed the machine's capacity. Machine 0 has a capacity of **74.37564803880434**, and starting it up requires **6.598818345230923** units of time. Machine 1 has a capacity of **61.80119129480688**, and starting it up requires **6.132700881798776** units of time. Each machine can produce only one item at a time in any given period. For example, in Period 0, Machine 0 can produce either Item 0, Item 1, or Item 2, but not more than one. Similarly, Machine 1 can produce only one item at a time in any period.\n\nIf a machine is used to produce an item in a period after being idle in the previous period, a startup cost is incurred. For example, if Machine 0 is used to produce Item 0 in Period 1 but was not used in Period 0, a startup cost of **72.08169936581939** is incurred. Production quantities, inventory levels, and backlogs must be non-negative. Production and startup decisions are binary (either 0 or 1).\n\nThe goal is to determine the optimal production, startup, inventory, and backlog decisions for each item, machine, and time period to minimize the total cost while satisfying all constraints.",
    "answer": 889.14,
    "ori": "13_optmath_bench",
    "index": 76,
    "description": "Minimize the total operational costs, which include setup costs, startup costs, inventory holding costs, and backlogging costs, while meeting the demand for each item in each period. The setup cost is **136.4441474007699** per production run, and the startup cost is **72.08169936581939** per startup. The holding cost for Item 0 is **1.045681545748948** per unit, for Item 1 is **1.076278851472706** per unit, and for Item 2 is **1.141130030903227** per unit. The backlogging cost for Item 0 is **7.516688931886524** per unit, for Item 1 is **6.810219227144024** per unit, and for Item 2 is **7.989326755092092** per unit.\n\nThe production system involves three items (Item 0, Item 1, and Item 2), two machines (Machine 0 and Machine 1), and three time periods (Period 0, Period 1, and Period 2). For each item, machine, and time period, decide whether to produce the item (binary decision) and how much to produce (continuous decision). Determine whether to start up a machine for a specific item in a given period (binary decision). Decide how much inventory to carry over or how much demand to backlog for each item in each period (continuous decisions).\n\nThe total production, inventory, and backlog must balance the demand for each item in each period. For example, in Period 0, the demand for Item 0 is **15.13481645049243**, for Item 1 is **15.96509719647714**, and for Item 2 is **15.05799468831989**. In Period 1, the demand for Item 0 is **23.22348134905647**, for Item 1 is **24.89682877145792**, and for Item 2 is **20.28924491987942**. In Period 2, the demand for Item 0 is **19.81696900208589**, for Item 1 is **22.4702270586731**, and for Item 2 is **18.30123580755789**.\n\nThe production quantity and startup time must not exceed the machine's capacity. Machine 0 has a capacity of **74.37564803880434**, and starting it up requires **6.598818345230923** units of time. Machine 1 has a capacity of **61.80119129480688**, and starting it up requires **6.132700881798776** units of time. Each machine can produce only one item at a time in any given period. For example, in Period 0, Machine 0 can produce either Item 0, Item 1, or Item 2, but not more than one. Similarly, Machine 1 can produce only one item at a time in any period.\n\nIf a machine is used to produce an item in a period after being idle in the previous period, a startup cost is incurred. For example, if Machine 0 is used to produce Item 0 in Period 1 but was not used in Period 0, a startup cost of **72.08169936581939** is incurred. Production quantities, inventory levels, and backlogs must be non-negative. Production and startup decisions are binary (either 0 or 1).\n\nThe goal is to determine the optimal production, startup, inventory, and backlog decisions for each item, machine, and time period to minimize the total cost while satisfying all constraints.",
    "ground_truth": 889.14
  },
  {
    "question": "In a manufacturing facility, six distinct jobs labeled Job 0 to Job 5 need to be processed on a set of machines. Each job consists of two operations that must be performed in a specific order, with each operation assigned to a specific machine. The goal is to schedule these operations to minimize the total completion time, known as the makespan, ensuring all jobs are completed as quickly as possible.\n\nEach operation has a processing time of 1 unit. For each job, the second operation cannot start until the first operation is completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 is finished, and this applies to all jobs.\n\nIf two operations are assigned to the same machine, they cannot overlap in time. The order in which they are processed is determined by a binary decision variable. For example, if Operation 1 of Job 0 and Operation 1 of Job 4 are assigned to the same machine, one must be scheduled before the other. The binary variable X_(0,1)_(4,1) determines the order: if X_(0,1)_(4,1) is 1, then Operation 1 of Job 0 is scheduled before Operation 1 of Job 4; if it is 0, then Operation 1 of Job 4 is scheduled before Operation 1 of Job 0. This logic applies to all pairs of operations on shared machines.\n\nThe total completion time, C_max, must be at least as large as the completion time of every operation. For example, C_max must be greater than or equal to the completion time of Operation 0 of Job 0, which is S_(0,0) plus 1 unit. This applies to all operations across all jobs.\n\nThe start time of every operation must be non-negative. For example, S_(0,0) must be greater than or equal to 0, and this applies to all operations.\n\nThe binary variables X_(j,i)_(k,l) are used to enforce the order of operations on shared machines and can only take values of 0 or 1.\n\nThe objective is to minimize the makespan, C_max, which represents the total time required to complete all jobs. This ensures that the manufacturing process is as efficient as possible, reducing idle time and maximizing throughput. All processing times are 1 unit, and the makespan must be at least 1 unit greater than the completion time of every operation.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 77,
    "description": "In a manufacturing facility, six distinct jobs labeled Job 0 to Job 5 need to be processed on a set of machines. Each job consists of two operations that must be performed in a specific order, with each operation assigned to a specific machine. The goal is to schedule these operations to minimize the total completion time, known as the makespan, ensuring all jobs are completed as quickly as possible.\n\nEach operation has a processing time of 1 unit. For each job, the second operation cannot start until the first operation is completed. For example, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 is finished, and this applies to all jobs.\n\nIf two operations are assigned to the same machine, they cannot overlap in time. The order in which they are processed is determined by a binary decision variable. For example, if Operation 1 of Job 0 and Operation 1 of Job 4 are assigned to the same machine, one must be scheduled before the other. The binary variable X_(0,1)_(4,1) determines the order: if X_(0,1)_(4,1) is 1, then Operation 1 of Job 0 is scheduled before Operation 1 of Job 4; if it is 0, then Operation 1 of Job 4 is scheduled before Operation 1 of Job 0. This logic applies to all pairs of operations on shared machines.\n\nThe total completion time, C_max, must be at least as large as the completion time of every operation. For example, C_max must be greater than or equal to the completion time of Operation 0 of Job 0, which is S_(0,0) plus 1 unit. This applies to all operations across all jobs.\n\nThe start time of every operation must be non-negative. For example, S_(0,0) must be greater than or equal to 0, and this applies to all operations.\n\nThe binary variables X_(j,i)_(k,l) are used to enforce the order of operations on shared machines and can only take values of 0 or 1.\n\nThe objective is to minimize the makespan, C_max, which represents the total time required to complete all jobs. This ensures that the manufacturing process is as efficient as possible, reducing idle time and maximizing throughput. All processing times are 1 unit, and the makespan must be at least 1 unit greater than the completion time of every operation.",
    "ground_truth": 4
  },
  {
    "question": "The problem involves designing a public transit network to minimize total costs while meeting passenger demand as much as possible. There are 11 potential transit lines (L_0 to L_10), each with a fixed cost for establishment and an operational cost per unit frequency. The fixed costs are: L_0 (\\$2,478), L_1 (\\$2,408), L_2 (\\$2,443), L_3 (\\$2,777), L_4 (\\$2,152), L_5 (\\$2,620), L_6 (\\$2,359), L_7 (\\$2,724), L_8 (\\$2,247), L_9 (\\$2,991), L_10 (\\$2,941). The operational costs per unit frequency are: L_0 (\\$297), L_1 (\\$220), L_2 (\\$288), L_3 (\\$236), L_4 (\\$212), L_5 (\\$283), L_6 (\\$206), L_7 (\\$219), L_8 (\\$242), L_9 (\\$217), L_10 (\\$227). Each line, if selected, must operate between 2 and 10 trips per hour. There are 13 stations, some of which can serve as transfer points if at least two lines pass through them. There are 12 origin-destination pairs with specific passenger demands and penalty costs for unsatisfied demand: OD_8_12 (29 passengers, \\$702 penalty), OD_3_8 (20 passengers, \\$751 penalty), OD_2_0 (28 passengers, \\$740 penalty), OD_11_2 (28 passengers, \\$722 penalty), OD_2_1 (30 passengers, \\$785 penalty), OD_10_5 (26 passengers, \\$722 penalty), OD_10_12 (26 passengers, \\$735 penalty), OD_5_6 (26 passengers, \\$773 penalty), OD_1_12 (25 passengers, \\$770 penalty), OD_10_6 (27 passengers, \\$757 penalty), OD_4_9 (26 passengers, \\$747 penalty), OD_4_0 (27 passengers, \\$757 penalty). The total number of vehicles available is 55, and the combined vehicle usage across all lines must not exceed this limit. The objective is to minimize the total cost, which includes fixed costs for establishing selected lines, operational costs based on line frequencies, and penalty costs for any unsatisfied demand. Constraints include ensuring that the total capacity provided by all lines serving each OD pair, plus any unsatisfied demand, meets or exceeds the passenger demand; enforcing frequency bounds for selected lines; limiting total vehicle usage; designating transfer stations only if at least two lines pass through them; and ensuring that the total frequency of lines serving each OD pair meets a minimum threshold.",
    "answer": 237394,
    "ori": "13_optmath_bench",
    "index": 78,
    "description": "The problem involves designing a public transit network to minimize total costs while meeting passenger demand as much as possible. There are 11 potential transit lines (L_0 to L_10), each with a fixed cost for establishment and an operational cost per unit frequency. The fixed costs are: L_0 (\\$2,478), L_1 (\\$2,408), L_2 (\\$2,443), L_3 (\\$2,777), L_4 (\\$2,152), L_5 (\\$2,620), L_6 (\\$2,359), L_7 (\\$2,724), L_8 (\\$2,247), L_9 (\\$2,991), L_10 (\\$2,941). The operational costs per unit frequency are: L_0 (\\$297), L_1 (\\$220), L_2 (\\$288), L_3 (\\$236), L_4 (\\$212), L_5 (\\$283), L_6 (\\$206), L_7 (\\$219), L_8 (\\$242), L_9 (\\$217), L_10 (\\$227). Each line, if selected, must operate between 2 and 10 trips per hour. There are 13 stations, some of which can serve as transfer points if at least two lines pass through them. There are 12 origin-destination pairs with specific passenger demands and penalty costs for unsatisfied demand: OD_8_12 (29 passengers, \\$702 penalty), OD_3_8 (20 passengers, \\$751 penalty), OD_2_0 (28 passengers, \\$740 penalty), OD_11_2 (28 passengers, \\$722 penalty), OD_2_1 (30 passengers, \\$785 penalty), OD_10_5 (26 passengers, \\$722 penalty), OD_10_12 (26 passengers, \\$735 penalty), OD_5_6 (26 passengers, \\$773 penalty), OD_1_12 (25 passengers, \\$770 penalty), OD_10_6 (27 passengers, \\$757 penalty), OD_4_9 (26 passengers, \\$747 penalty), OD_4_0 (27 passengers, \\$757 penalty). The total number of vehicles available is 55, and the combined vehicle usage across all lines must not exceed this limit. The objective is to minimize the total cost, which includes fixed costs for establishing selected lines, operational costs based on line frequencies, and penalty costs for any unsatisfied demand. Constraints include ensuring that the total capacity provided by all lines serving each OD pair, plus any unsatisfied demand, meets or exceeds the passenger demand; enforcing frequency bounds for selected lines; limiting total vehicle usage; designating transfer stations only if at least two lines pass through them; and ensuring that the total frequency of lines serving each OD pair meets a minimum threshold.",
    "ground_truth": 237394
  },
  {
    "question": "Minimize the total operational cost of a power generation system over six periods, consisting of Type 0 and Type 1 generators. The cost includes a base cost of 78 units per generator operational in a period, a variable cost of 4 units per megawatt of power generated, and startup costs of 347 units for Type 0 generators and 352 units for Type 1 generators when activated. The total power generated in each period must meet or exceed the demand: 172 MW in Period 0, 171 MW in Period 1, 166 MW in Period 2, 160 MW in Period 3, 195 MW in Period 4, and 181 MW in Period 5. Each generator has output limits: Type 0 generators must produce between 34 MW and 128 MW, and Type 1 generators must produce between 34 MW and 125 MW. The total maximum output capacity of all generators in each period must be at least 115% of the demand for that period, ensuring sufficient reserve capacity. The number of operational generators cannot exceed 4 for Type 0 and 5 for Type 1 in any period. For startup constraints, no more than 2 Type 0 generators can be started in Period 0, and no more than 1 Type 1 generator can be started in Period 0. The number of generators operational in a period cannot exceed the number operational in the previous period plus the number started in the current period. All decision variables must be non-negative integers, and power output must be non-negative.",
    "answer": 5116,
    "ori": "13_optmath_bench",
    "index": 79,
    "description": "Minimize the total operational cost of a power generation system over six periods, consisting of Type 0 and Type 1 generators. The cost includes a base cost of 78 units per generator operational in a period, a variable cost of 4 units per megawatt of power generated, and startup costs of 347 units for Type 0 generators and 352 units for Type 1 generators when activated. The total power generated in each period must meet or exceed the demand: 172 MW in Period 0, 171 MW in Period 1, 166 MW in Period 2, 160 MW in Period 3, 195 MW in Period 4, and 181 MW in Period 5. Each generator has output limits: Type 0 generators must produce between 34 MW and 128 MW, and Type 1 generators must produce between 34 MW and 125 MW. The total maximum output capacity of all generators in each period must be at least 115% of the demand for that period, ensuring sufficient reserve capacity. The number of operational generators cannot exceed 4 for Type 0 and 5 for Type 1 in any period. For startup constraints, no more than 2 Type 0 generators can be started in Period 0, and no more than 1 Type 1 generator can be started in Period 0. The number of generators operational in a period cannot exceed the number operational in the previous period plus the number started in the current period. All decision variables must be non-negative integers, and power output must be non-negative.",
    "ground_truth": 5116
  },
  {
    "question": "Determine the number of generators of each type (Type 0 and Type 1) to operate, the power output for each generator type, and the number of startups in each of the five consecutive time periods to minimize the total cost of operation. The total cost includes a base cost of 80 units per Type 0 generator and 79 units per Type 1 generator for each period they are active, a power output cost of 3 units per MW for Type 0 generators and 4 units per MW for Type 1 generators, and a startup cost of 352 units for Type 0 generators and 346 units for Type 1 generators. The total power output from all generators must meet or exceed the demand in each period: 217 MW in period 0, 209 MW in period 1, 194 MW in period 2, 182 MW in period 3, and 164 MW in period 4. Each Type 0 generator must produce at least 34 MW and at most 129 MW when active, and each Type 1 generator must produce at least 34 MW and at most 127 MW when active. The combined maximum output of all active generators must meet or exceed specific capacity requirements: 249.55 MW in period 0, 240.35 MW in period 1, 223.1 MW in period 2, 209.3 MW in period 3, and 188.6 MW in period 4. No more than 1 Type 0 generator and 2 Type 1 generators can be active in any period. The number of startups for each generator type is constrained by the number of generators available and the number of generators active in the previous period. The variables representing the number of generators and startups are general integer variables.",
    "answer": 4014,
    "ori": "13_optmath_bench",
    "index": 80,
    "description": "Determine the number of generators of each type (Type 0 and Type 1) to operate, the power output for each generator type, and the number of startups in each of the five consecutive time periods to minimize the total cost of operation. The total cost includes a base cost of 80 units per Type 0 generator and 79 units per Type 1 generator for each period they are active, a power output cost of 3 units per MW for Type 0 generators and 4 units per MW for Type 1 generators, and a startup cost of 352 units for Type 0 generators and 346 units for Type 1 generators. The total power output from all generators must meet or exceed the demand in each period: 217 MW in period 0, 209 MW in period 1, 194 MW in period 2, 182 MW in period 3, and 164 MW in period 4. Each Type 0 generator must produce at least 34 MW and at most 129 MW when active, and each Type 1 generator must produce at least 34 MW and at most 127 MW when active. The combined maximum output of all active generators must meet or exceed specific capacity requirements: 249.55 MW in period 0, 240.35 MW in period 1, 223.1 MW in period 2, 209.3 MW in period 3, and 188.6 MW in period 4. No more than 1 Type 0 generator and 2 Type 1 generators can be active in any period. The number of startups for each generator type is constrained by the number of generators available and the number of generators active in the previous period. The variables representing the number of generators and startups are general integer variables.",
    "ground_truth": 4014
  },
  {
    "question": "A manufacturing facility produces custom parts for seven jobs, labeled Job 0 through Job 6. Each job consists of two operations that must be performed in sequence, with the second operation starting only after the first is completed. Operations are assigned to specific machines, and some operations share the same machine, meaning they cannot be processed simultaneously. The goal is to schedule all operations to minimize the total completion time, known as the makespan.\n\nEach operation has a processing time of 1 unit. For example, Operation 0 of Job 0 takes 1 unit of time, and Operation 1 of Job 0 also takes 1 unit of time. This applies to all operations across all jobs. Operations sharing the same machine must be scheduled such that one finishes before the other starts. Binary decision variables determine the order of operations on shared machines. For instance, if Operation 1 of Job 0 and Operation 0 of Job 1 share a machine, a binary variable decides whether Operation 1 of Job 0 finishes before Operation 0 of Job 1 starts, or vice versa.\n\nThe makespan must be at least as large as the completion time of every operation. For example, if Operation 1 of Job 0 finishes at time 2, the makespan must be at least 2. A large constant, 100,000, is used in the constraints to ensure that operations on the same machine do not overlap. The objective is to minimize the makespan, ensuring the facility operates as efficiently as possible while respecting all precedence and machine capacity constraints.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 81,
    "description": "A manufacturing facility produces custom parts for seven jobs, labeled Job 0 through Job 6. Each job consists of two operations that must be performed in sequence, with the second operation starting only after the first is completed. Operations are assigned to specific machines, and some operations share the same machine, meaning they cannot be processed simultaneously. The goal is to schedule all operations to minimize the total completion time, known as the makespan.\n\nEach operation has a processing time of 1 unit. For example, Operation 0 of Job 0 takes 1 unit of time, and Operation 1 of Job 0 also takes 1 unit of time. This applies to all operations across all jobs. Operations sharing the same machine must be scheduled such that one finishes before the other starts. Binary decision variables determine the order of operations on shared machines. For instance, if Operation 1 of Job 0 and Operation 0 of Job 1 share a machine, a binary variable decides whether Operation 1 of Job 0 finishes before Operation 0 of Job 1 starts, or vice versa.\n\nThe makespan must be at least as large as the completion time of every operation. For example, if Operation 1 of Job 0 finishes at time 2, the makespan must be at least 2. A large constant, 100,000, is used in the constraints to ensure that operations on the same machine do not overlap. The objective is to minimize the makespan, ensuring the facility operates as efficiently as possible while respecting all precedence and machine capacity constraints.",
    "ground_truth": 3
  },
  {
    "question": "There are 5 jobs labeled Job 0 to Job 4 and 4 machines labeled Machine 0 to Machine 3. Each job must be processed on all machines in sequence, with specific processing times for each job on each machine. The goal is to assign each job to a unique schedule position (Position 0 to Position 4) and determine the start times for each job on each machine to minimize the total completion time. Each schedule position must be assigned to exactly one job, and each job must be assigned to exactly one schedule position. A job cannot start on a machine until it has finished processing on the previous machine, and a job in a later schedule position cannot start on a machine until the job in the previous position has finished processing on that machine. The objective function includes coefficients for the schedule variables in the last position: 6 for Job 0, 5 for Job 1, 10 for Job 2, 10 for Job 3, and 8 for Job 4, as well as the start time of the last job on the last machine. The processing times for each job on each machine are as follows: Job 0 takes 9, 9, 7, and 6 hours on Machines 0 to 3, respectively; Job 1 takes 6, 6, 7, and 5 hours; Job 2 takes 9, 10, 10, and 10 hours; Job 3 takes 6, 10, 6, and 10 hours; and Job 4 takes 10, 7, 6, and 8 hours. The JobSchedule variables are binary, indicating whether a job is assigned to a specific schedule position, and the StartTime variables represent the start times of jobs on machines, which must be non-negative.",
    "answer": 65,
    "ori": "13_optmath_bench",
    "index": 82,
    "description": "There are 5 jobs labeled Job 0 to Job 4 and 4 machines labeled Machine 0 to Machine 3. Each job must be processed on all machines in sequence, with specific processing times for each job on each machine. The goal is to assign each job to a unique schedule position (Position 0 to Position 4) and determine the start times for each job on each machine to minimize the total completion time. Each schedule position must be assigned to exactly one job, and each job must be assigned to exactly one schedule position. A job cannot start on a machine until it has finished processing on the previous machine, and a job in a later schedule position cannot start on a machine until the job in the previous position has finished processing on that machine. The objective function includes coefficients for the schedule variables in the last position: 6 for Job 0, 5 for Job 1, 10 for Job 2, 10 for Job 3, and 8 for Job 4, as well as the start time of the last job on the last machine. The processing times for each job on each machine are as follows: Job 0 takes 9, 9, 7, and 6 hours on Machines 0 to 3, respectively; Job 1 takes 6, 6, 7, and 5 hours; Job 2 takes 9, 10, 10, and 10 hours; Job 3 takes 6, 10, 6, and 10 hours; and Job 4 takes 10, 7, 6, and 8 hours. The JobSchedule variables are binary, indicating whether a job is assigned to a specific schedule position, and the StartTime variables represent the start times of jobs on machines, which must be non-negative.",
    "ground_truth": 65
  },
  {
    "question": "You are tasked with selecting exactly 2 out of 5 nodes (node_0, node_1, node_2, node_3, node_4) to host facilities, with the goal of maximizing the minimum distance between any two selected facilities. The decision variables are binary: each node can either be selected (1) or not selected (0), and for every pair of nodes, a binary variable indicates whether both nodes in the pair are selected. The distances between nodes are derived from the LP constraints, where the distance between node_0 and node_1 is 18 units (1,000,018 - 1,000,000), node_0 and node_2 is 36 units (1,000,036 - 1,000,000), node_0 and node_3 is 28 units (1,000,028 - 1,000,000), node_0 and node_4 is 20 units (1,000,020 - 1,000,000), node_1 and node_0 is 25 units (1,000,025 - 1,000,000), node_1 and node_2 is 37 units (1,000,037 - 1,000,000), node_1 and node_3 is 36 units (1,000,036 - 1,000,000), node_1 and node_4 is 17 units (1,000,017 - 1,000,000), node_2 and node_0 is 42 units (1,000,042 - 1,000,000), node_2 and node_1 is 42 units (1,000,042 - 1,000,000), node_2 and node_3 is 23 units (1,000,023 - 1,000,000), node_2 and node_4 is 46 units (1,000,046 - 1,000,000), node_3 and node_0 is 31 units (1,000,031 - 1,000,000), node_3 and node_1 is 36 units (1,000,036 - 1,000,000), node_3 and node_2 is 11 units (1,000,011 - 1,000,000), node_3 and node_4 is 50 units (1,000,050 - 1,000,000), node_4 and node_0 is 10 units (1,000,010 - 1,000,000), node_4 and node_1 is 29 units (1,000,029 - 1,000,000), node_4 and node_2 is 24 units (1,000,024 - 1,000,000), and node_4 and node_3 is 42 units (1,000,042 - 1,000,000). The constraints ensure that exactly 2 nodes are selected, and for each pair of nodes, the minimum distance between any two selected facilities must be at least as large as the distance between those two nodes if both nodes in the pair are selected. If either node in the pair is not selected, the constraint is relaxed using a large constant (1,000,000). Additionally, the selection of a pair of nodes is only valid if both nodes in the pair are selected, enforced by ensuring that if a pair is selected, both nodes in the pair must be selected, and if both nodes in a pair are selected, the pair must be selected. The solution must ensure that the facilities are optimally dispersed across the network.",
    "answer": 42,
    "ori": "13_optmath_bench",
    "index": 83,
    "description": "You are tasked with selecting exactly 2 out of 5 nodes (node_0, node_1, node_2, node_3, node_4) to host facilities, with the goal of maximizing the minimum distance between any two selected facilities. The decision variables are binary: each node can either be selected (1) or not selected (0), and for every pair of nodes, a binary variable indicates whether both nodes in the pair are selected. The distances between nodes are derived from the LP constraints, where the distance between node_0 and node_1 is 18 units (1,000,018 - 1,000,000), node_0 and node_2 is 36 units (1,000,036 - 1,000,000), node_0 and node_3 is 28 units (1,000,028 - 1,000,000), node_0 and node_4 is 20 units (1,000,020 - 1,000,000), node_1 and node_0 is 25 units (1,000,025 - 1,000,000), node_1 and node_2 is 37 units (1,000,037 - 1,000,000), node_1 and node_3 is 36 units (1,000,036 - 1,000,000), node_1 and node_4 is 17 units (1,000,017 - 1,000,000), node_2 and node_0 is 42 units (1,000,042 - 1,000,000), node_2 and node_1 is 42 units (1,000,042 - 1,000,000), node_2 and node_3 is 23 units (1,000,023 - 1,000,000), node_2 and node_4 is 46 units (1,000,046 - 1,000,000), node_3 and node_0 is 31 units (1,000,031 - 1,000,000), node_3 and node_1 is 36 units (1,000,036 - 1,000,000), node_3 and node_2 is 11 units (1,000,011 - 1,000,000), node_3 and node_4 is 50 units (1,000,050 - 1,000,000), node_4 and node_0 is 10 units (1,000,010 - 1,000,000), node_4 and node_1 is 29 units (1,000,029 - 1,000,000), node_4 and node_2 is 24 units (1,000,024 - 1,000,000), and node_4 and node_3 is 42 units (1,000,042 - 1,000,000). The constraints ensure that exactly 2 nodes are selected, and for each pair of nodes, the minimum distance between any two selected facilities must be at least as large as the distance between those two nodes if both nodes in the pair are selected. If either node in the pair is not selected, the constraint is relaxed using a large constant (1,000,000). Additionally, the selection of a pair of nodes is only valid if both nodes in the pair are selected, enforced by ensuring that if a pair is selected, both nodes in the pair must be selected, and if both nodes in a pair are selected, the pair must be selected. The solution must ensure that the facilities are optimally dispersed across the network.",
    "ground_truth": 42
  },
  {
    "question": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 30 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Decisions:\n1. **Build or Not Build a Tower**: For each of the 25 potential cell tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage of Areas**: For each of the 30 areas, you must determine whether it will be covered by at least one of the built towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 30 areas are as follows:\n- Area 0: 2,882 people\n- Area 1: 4,926 people\n- Area 2: 3,930 people\n- Area 3: 3,468 people\n- Area 4: 3,415 people\n- Area 5: 2,697 people\n- Area 6: 2,746 people\n- Area 7: 3,817 people\n- Area 8: 4,806 people\n- Area 9: 2,889 people\n- Area 10: 2,276 people\n- Area 11: 2,087 people\n- Area 12: 4,452 people\n- Area 13: 3,015 people\n- Area 14: 2,305 people\n- Area 15: 3,196 people\n- Area 16: 4,854 people\n- Area 17: 4,466 people\n- Area 18: 2,154 people\n- Area 19: 4,661 people\n- Area 20: 2,587 people\n- Area 21: 4,013 people\n- Area 22: 3,519 people\n- Area 23: 4,837 people\n- Area 24: 2,465 people\n- Area 25: 3,807 people\n- Area 26: 4,498 people\n- Area 27: 3,423 people\n- Area 28: 2,832 people\n- Area 29: 3,064 people\n\n#### Constraints:\n1. **Coverage Requirements**:\n   - Each area must be covered by at least one of the built towers. For example:\n     - Area 0 can be covered by towers 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, or 20.\n     - Area 1 can be covered by towers 0, 1, 3, 4, 5, 8, 11, 13, 15, 16, 20, 23, or 24.\n     - Similar coverage constraints apply to all 30 areas, with specific combinations of towers required for each area.\n\n2. **Budget Constraint**:\n   - The total cost of building the selected towers must not exceed the available budget of 2,501 units. The costs for building each tower are as follows:\n     - Tower 0: 453 units\n     - Tower 1: 208 units\n     - Tower 2: 223 units\n     - Tower 3: 336 units\n     - Tower 4: 473 units\n     - Tower 5: 274 units\n     - Tower 6: 257 units\n     - Tower 7: 436 units\n     - Tower 8: 440 units\n     - Tower 9: 242 units\n     - Tower 10: 272 units\n     - Tower 11: 277 units\n     - Tower 12: 232 units\n     - Tower 13: 292 units\n     - Tower 14: 369 units\n     - Tower 15: 318 units\n     - Tower 16: 475 units\n     - Tower 17: 238 units\n     - Tower 18: 440 units\n     - Tower 19: 496 units\n     - Tower 20: 275 units\n     - Tower 21: 240 units\n     - Tower 22: 291 units\n     - Tower 23: 320 units\n     - Tower 24: 462 units\n\n3. **Binary Decisions**:\n   - Each tower can either be built (1) or not built (0).\n   - Each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each area depends on the specific combination of towers built, and the total cost of building the selected towers must not exceed 2,501 units.",
    "answer": 104087,
    "ori": "13_optmath_bench",
    "index": 84,
    "description": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 30 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Decisions:\n1. **Build or Not Build a Tower**: For each of the 25 potential cell tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage of Areas**: For each of the 30 areas, you must determine whether it will be covered by at least one of the built towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 30 areas are as follows:\n- Area 0: 2,882 people\n- Area 1: 4,926 people\n- Area 2: 3,930 people\n- Area 3: 3,468 people\n- Area 4: 3,415 people\n- Area 5: 2,697 people\n- Area 6: 2,746 people\n- Area 7: 3,817 people\n- Area 8: 4,806 people\n- Area 9: 2,889 people\n- Area 10: 2,276 people\n- Area 11: 2,087 people\n- Area 12: 4,452 people\n- Area 13: 3,015 people\n- Area 14: 2,305 people\n- Area 15: 3,196 people\n- Area 16: 4,854 people\n- Area 17: 4,466 people\n- Area 18: 2,154 people\n- Area 19: 4,661 people\n- Area 20: 2,587 people\n- Area 21: 4,013 people\n- Area 22: 3,519 people\n- Area 23: 4,837 people\n- Area 24: 2,465 people\n- Area 25: 3,807 people\n- Area 26: 4,498 people\n- Area 27: 3,423 people\n- Area 28: 2,832 people\n- Area 29: 3,064 people\n\n#### Constraints:\n1. **Coverage Requirements**:\n   - Each area must be covered by at least one of the built towers. For example:\n     - Area 0 can be covered by towers 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, or 20.\n     - Area 1 can be covered by towers 0, 1, 3, 4, 5, 8, 11, 13, 15, 16, 20, 23, or 24.\n     - Similar coverage constraints apply to all 30 areas, with specific combinations of towers required for each area.\n\n2. **Budget Constraint**:\n   - The total cost of building the selected towers must not exceed the available budget of 2,501 units. The costs for building each tower are as follows:\n     - Tower 0: 453 units\n     - Tower 1: 208 units\n     - Tower 2: 223 units\n     - Tower 3: 336 units\n     - Tower 4: 473 units\n     - Tower 5: 274 units\n     - Tower 6: 257 units\n     - Tower 7: 436 units\n     - Tower 8: 440 units\n     - Tower 9: 242 units\n     - Tower 10: 272 units\n     - Tower 11: 277 units\n     - Tower 12: 232 units\n     - Tower 13: 292 units\n     - Tower 14: 369 units\n     - Tower 15: 318 units\n     - Tower 16: 475 units\n     - Tower 17: 238 units\n     - Tower 18: 440 units\n     - Tower 19: 496 units\n     - Tower 20: 275 units\n     - Tower 21: 240 units\n     - Tower 22: 291 units\n     - Tower 23: 320 units\n     - Tower 24: 462 units\n\n3. **Binary Decisions**:\n   - Each tower can either be built (1) or not built (0).\n   - Each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select which towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each area depends on the specific combination of towers built, and the total cost of building the selected towers must not exceed 2,501 units.",
    "ground_truth": 104087
  },
  {
    "question": "Imagine you are managing the distribution of critical medical supplies across eight cities in a region. Each city has a specific supply or demand for these supplies, and your goal is to ensure that all cities receive the necessary resources while minimizing the total transportation cost. The transportation network connects these cities, and each route has a specific cost per unit of supply shipped, as well as a maximum capacity limit.\n\n#### Cities and Their Supply/Demand:\n- **City 0** has a net demand of **34 units** (it needs 34 more units than it currently has).\n- **City 1** has a surplus of **11 units** (it can supply 11 units to other cities).\n- **City 2** has a surplus of **22 units**.\n- **City 3** has a surplus of **10 units**.\n- **City 4** has a surplus of **2 units**.\n- **City 5** has a surplus of **9 units**.\n- **City 6** has a surplus of **6 units**.\n- **City 7** has a net demand of **26 units**.\n\n#### Transportation Costs and Capacities:\nThe cost of shipping one unit of supply between cities varies depending on the route. Below are the costs and maximum capacities for each route:\n\n- **From City 0**:\n  - To City 1: Cost = **9**, Capacity = **59**\n  - To City 2: Cost = **8**, Capacity = **59**\n  - To City 3: Cost = **8**, Capacity = **59**\n  - To City 4: Cost = **9**, Capacity = **43**\n  - To City 5: Cost = **10**, Capacity = **56**\n  - To City 6: Cost = **10**, Capacity = **40**\n  - To City 7: Cost = **9**, Capacity = **37**\n\n- **From City 1**:\n  - To City 0: Cost = **10**, Capacity = **36**\n  - To City 2: Cost = **9**, Capacity = **36**\n  - To City 3: Cost = **6**, Capacity = **40**\n  - To City 4: Cost = **9**, Capacity = **39**\n  - To City 5: Cost = **6**, Capacity = **57**\n  - To City 6: Cost = **6**, Capacity = **44**\n  - To City 7: Cost = **8**, Capacity = **56**\n\n- **From City 2**:\n  - To City 0: Cost = **6**, Capacity = **52**\n  - To City 1: Cost = **6**, Capacity = **40**\n  - To City 3: Cost = **6**, Capacity = **39**\n  - To City 4: Cost = **7**, Capacity = **31**\n  - To City 5: Cost = **9**, Capacity = **38**\n  - To City 6: Cost = **6**, Capacity = **44**\n  - To City 7: Cost = **10**, Capacity = **58**\n\n- **From City 3**:\n  - To City 0: Cost = **10**, Capacity = **30**\n  - To City 1: Cost = **10**, Capacity = **49**\n  - To City 2: Cost = **6**, Capacity = **52**\n  - To City 4: Cost = **10**, Capacity = **47**\n  - To City 5: Cost = **9**, Capacity = **47**\n  - To City 6: Cost = **6**, Capacity = **30**\n  - To City 7: Cost = **8**, Capacity = **34**\n\n- **From City 4**:\n  - To City 0: Cost = **6**, Capacity = **39**\n  - To City 1: Cost = **8**, Capacity = **45**\n  - To City 2: Cost = **9**, Capacity = **55**\n  - To City 3: Cost = **8**, Capacity = **36**\n  - To City 5: Cost = **6**, Capacity = **48**\n  - To City 6: Cost = **6**, Capacity = **35**\n  - To City 7: Cost = **10**, Capacity = **54**\n\n- **From City 5**:\n  - To City 0: Cost = **9**, Capacity = **43**\n  - To City 1: Cost = **7**, Capacity = **58**\n  - To City 2: Cost = **9**, Capacity = **49**\n  - To City 3: Cost = **6**, Capacity = **33**\n  - To City 4: Cost = **9**, Capacity = **59**\n  - To City 6: Cost = **10**, Capacity = **30**\n  - To City 7: Cost = **7**, Capacity = **59**\n\n- **From City 6**:\n  - To City 0: Cost = **10**, Capacity = **33**\n  - To City 1: Cost = **7**, Capacity = **37**\n  - To City 2: Cost = **6**, Capacity = **50**\n  - To City 3: Cost = **7**, Capacity = **34**\n  - To City 4: Cost = **9**, Capacity = **30**\n  - To City 5: Cost = **6**, Capacity = **56**\n  - To City 7: Cost = **10**, Capacity = **44**\n\n- **From City 7**:\n  - To City 0: Cost = **7**, Capacity = **46**\n  - To City 1: Cost = **7**, Capacity = **58**\n  - To City 2: Cost = **9**, Capacity = **60**\n  - To City 3: Cost = **7**, Capacity = **34**\n  - To City 4: Cost = **8**, Capacity = **39**\n  - To City 5: Cost = **6**, Capacity = **57**\n  - To City 6: Cost = **9**, Capacity = **42**\n\n#### Objective:\nYour task is to determine the optimal amount of supplies to ship between cities to meet all demands and surpluses while minimizing the total transportation cost. The shipments must respect the capacity limits of each route, and no negative shipments are allowed.\n\n#### Constraints:\n1. **Flow Balance**: For each city, the total amount of supplies shipped into the city must equal the total amount shipped out, adjusted for the city's supply or demand.\n2. **Capacity Limits**: The amount of supplies shipped on any route cannot exceed the maximum capacity for that route.\n3. **Non-Negativity**: All shipments must be non-negative.\n\nBy solving this problem, you will ensure that all cities receive the necessary medical supplies at the lowest possible transportation cost.",
    "answer": 443,
    "ori": "13_optmath_bench",
    "index": 85,
    "description": "Imagine you are managing the distribution of critical medical supplies across eight cities in a region. Each city has a specific supply or demand for these supplies, and your goal is to ensure that all cities receive the necessary resources while minimizing the total transportation cost. The transportation network connects these cities, and each route has a specific cost per unit of supply shipped, as well as a maximum capacity limit.\n\n#### Cities and Their Supply/Demand:\n- **City 0** has a net demand of **34 units** (it needs 34 more units than it currently has).\n- **City 1** has a surplus of **11 units** (it can supply 11 units to other cities).\n- **City 2** has a surplus of **22 units**.\n- **City 3** has a surplus of **10 units**.\n- **City 4** has a surplus of **2 units**.\n- **City 5** has a surplus of **9 units**.\n- **City 6** has a surplus of **6 units**.\n- **City 7** has a net demand of **26 units**.\n\n#### Transportation Costs and Capacities:\nThe cost of shipping one unit of supply between cities varies depending on the route. Below are the costs and maximum capacities for each route:\n\n- **From City 0**:\n  - To City 1: Cost = **9**, Capacity = **59**\n  - To City 2: Cost = **8**, Capacity = **59**\n  - To City 3: Cost = **8**, Capacity = **59**\n  - To City 4: Cost = **9**, Capacity = **43**\n  - To City 5: Cost = **10**, Capacity = **56**\n  - To City 6: Cost = **10**, Capacity = **40**\n  - To City 7: Cost = **9**, Capacity = **37**\n\n- **From City 1**:\n  - To City 0: Cost = **10**, Capacity = **36**\n  - To City 2: Cost = **9**, Capacity = **36**\n  - To City 3: Cost = **6**, Capacity = **40**\n  - To City 4: Cost = **9**, Capacity = **39**\n  - To City 5: Cost = **6**, Capacity = **57**\n  - To City 6: Cost = **6**, Capacity = **44**\n  - To City 7: Cost = **8**, Capacity = **56**\n\n- **From City 2**:\n  - To City 0: Cost = **6**, Capacity = **52**\n  - To City 1: Cost = **6**, Capacity = **40**\n  - To City 3: Cost = **6**, Capacity = **39**\n  - To City 4: Cost = **7**, Capacity = **31**\n  - To City 5: Cost = **9**, Capacity = **38**\n  - To City 6: Cost = **6**, Capacity = **44**\n  - To City 7: Cost = **10**, Capacity = **58**\n\n- **From City 3**:\n  - To City 0: Cost = **10**, Capacity = **30**\n  - To City 1: Cost = **10**, Capacity = **49**\n  - To City 2: Cost = **6**, Capacity = **52**\n  - To City 4: Cost = **10**, Capacity = **47**\n  - To City 5: Cost = **9**, Capacity = **47**\n  - To City 6: Cost = **6**, Capacity = **30**\n  - To City 7: Cost = **8**, Capacity = **34**\n\n- **From City 4**:\n  - To City 0: Cost = **6**, Capacity = **39**\n  - To City 1: Cost = **8**, Capacity = **45**\n  - To City 2: Cost = **9**, Capacity = **55**\n  - To City 3: Cost = **8**, Capacity = **36**\n  - To City 5: Cost = **6**, Capacity = **48**\n  - To City 6: Cost = **6**, Capacity = **35**\n  - To City 7: Cost = **10**, Capacity = **54**\n\n- **From City 5**:\n  - To City 0: Cost = **9**, Capacity = **43**\n  - To City 1: Cost = **7**, Capacity = **58**\n  - To City 2: Cost = **9**, Capacity = **49**\n  - To City 3: Cost = **6**, Capacity = **33**\n  - To City 4: Cost = **9**, Capacity = **59**\n  - To City 6: Cost = **10**, Capacity = **30**\n  - To City 7: Cost = **7**, Capacity = **59**\n\n- **From City 6**:\n  - To City 0: Cost = **10**, Capacity = **33**\n  - To City 1: Cost = **7**, Capacity = **37**\n  - To City 2: Cost = **6**, Capacity = **50**\n  - To City 3: Cost = **7**, Capacity = **34**\n  - To City 4: Cost = **9**, Capacity = **30**\n  - To City 5: Cost = **6**, Capacity = **56**\n  - To City 7: Cost = **10**, Capacity = **44**\n\n- **From City 7**:\n  - To City 0: Cost = **7**, Capacity = **46**\n  - To City 1: Cost = **7**, Capacity = **58**\n  - To City 2: Cost = **9**, Capacity = **60**\n  - To City 3: Cost = **7**, Capacity = **34**\n  - To City 4: Cost = **8**, Capacity = **39**\n  - To City 5: Cost = **6**, Capacity = **57**\n  - To City 6: Cost = **9**, Capacity = **42**\n\n#### Objective:\nYour task is to determine the optimal amount of supplies to ship between cities to meet all demands and surpluses while minimizing the total transportation cost. The shipments must respect the capacity limits of each route, and no negative shipments are allowed.\n\n#### Constraints:\n1. **Flow Balance**: For each city, the total amount of supplies shipped into the city must equal the total amount shipped out, adjusted for the city's supply or demand.\n2. **Capacity Limits**: The amount of supplies shipped on any route cannot exceed the maximum capacity for that route.\n3. **Non-Negativity**: All shipments must be non-negative.\n\nBy solving this problem, you will ensure that all cities receive the necessary medical supplies at the lowest possible transportation cost.",
    "ground_truth": 443
  },
  {
    "question": "You are managing the landing schedule for six aircraft at a busy airport. Each aircraft has a target landing time, but due to operational constraints, the actual landing time may vary. Your goal is to minimize the total penalty costs associated with landing aircraft either earlier or later than their target times, while ensuring safe separation between consecutive landings.\n\nAircraft 0 has a target landing time of 86 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 12 units per time unit for landing early and 20 units per time unit for landing late. Aircraft 1 has a target landing time of 60 units, can land as early as 60 units or as late as 90 units, and incurs a penalty of 13 units per time unit for landing early and 16 units per time unit for landing late. Aircraft 2 has a target landing time of 71 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 16 units per time unit for landing early and 15 units per time unit for landing late. Aircraft 3 has a target landing time of 97 units, can land as early as 67 units or as late as 100 units, and incurs a penalty of 14 units per time unit for landing early and 13 units per time unit for landing late. Aircraft 4 has a target landing time of 89 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 15 units per time unit for landing early and 18 units per time unit for landing late. Aircraft 5 has a target landing time of 74 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 14 units per time unit for landing early and 19 units per time unit for landing late.\n\nTo ensure safety, there must be a minimum separation time between the landings of any two aircraft. If Aircraft 0 lands before Aircraft 1, there must be at least 7 units of separation. If Aircraft 1 lands before Aircraft 0, the separation must be at least 5 units. If Aircraft 0 lands before Aircraft 2, there must be at least 7 units of separation. If Aircraft 2 lands before Aircraft 0, the separation must be at least 5 units. If Aircraft 0 lands before Aircraft 3, there must be at least 5 units of separation. If Aircraft 3 lands before Aircraft 0, the separation must be at least 8 units. If Aircraft 0 lands before Aircraft 4, there must be at least 5 units of separation. If Aircraft 4 lands before Aircraft 0, the separation must be at least 7 units. If Aircraft 0 lands before Aircraft 5, there must be at least 5 units of separation. If Aircraft 5 lands before Aircraft 0, the separation must be at least 7 units. If Aircraft 1 lands before Aircraft 2, there must be at least 7 units of separation. If Aircraft 2 lands before Aircraft 1, the separation must be at least 8 units. If Aircraft 1 lands before Aircraft 3, there must be at least 5 units of separation. If Aircraft 3 lands before Aircraft 1, the separation must be at least 8 units. If Aircraft 1 lands before Aircraft 4, there must be at least 8 units of separation. If Aircraft 4 lands before Aircraft 1, the separation must be at least 7 units. If Aircraft 1 lands before Aircraft 5, there must be at least 7 units of separation. If Aircraft 5 lands before Aircraft 1, the separation must be at least 5 units. If Aircraft 2 lands before Aircraft 3, there must be at least 8 units of separation. If Aircraft 3 lands before Aircraft 2, the separation must be at least 8 units. If Aircraft 2 lands before Aircraft 4, there must be at least 8 units of separation. If Aircraft 4 lands before Aircraft 2, the separation must be at least 6 units. If Aircraft 2 lands before Aircraft 5, there must be at least 6 units of separation. If Aircraft 5 lands before Aircraft 2, the separation must be at least 8 units. If Aircraft 3 lands before Aircraft 4, there must be at least 6 units of separation. If Aircraft 4 lands before Aircraft 3, the separation must be at least 8 units. If Aircraft 3 lands before Aircraft 5, there must be at least 5 units of separation. If Aircraft 5 lands before Aircraft 3, the separation must be at least 7 units. If Aircraft 4 lands before Aircraft 5, there must be at least 6 units of separation. If Aircraft 5 lands before Aircraft 4, the separation must be at least 7 units.\n\nYour task is to determine the actual landing times for all six aircraft such that each aircraft lands within its allowed time window, the separation requirements between consecutive landings are satisfied, and the total penalty cost, which is the sum of the penalties for landing early or late for all aircraft, is minimized. For each pair of aircraft, one must land before the other, and the separation time must be respected. The landing time for each aircraft must fall within its specified earliest and latest landing times. The penalties for landing early or late are calculated based on the difference between the actual landing time and the target landing time.",
    "answer": 72,
    "ori": "13_optmath_bench",
    "index": 86,
    "description": "You are managing the landing schedule for six aircraft at a busy airport. Each aircraft has a target landing time, but due to operational constraints, the actual landing time may vary. Your goal is to minimize the total penalty costs associated with landing aircraft either earlier or later than their target times, while ensuring safe separation between consecutive landings.\n\nAircraft 0 has a target landing time of 86 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 12 units per time unit for landing early and 20 units per time unit for landing late. Aircraft 1 has a target landing time of 60 units, can land as early as 60 units or as late as 90 units, and incurs a penalty of 13 units per time unit for landing early and 16 units per time unit for landing late. Aircraft 2 has a target landing time of 71 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 16 units per time unit for landing early and 15 units per time unit for landing late. Aircraft 3 has a target landing time of 97 units, can land as early as 67 units or as late as 100 units, and incurs a penalty of 14 units per time unit for landing early and 13 units per time unit for landing late. Aircraft 4 has a target landing time of 89 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 15 units per time unit for landing early and 18 units per time unit for landing late. Aircraft 5 has a target landing time of 74 units, can land as early as 60 units or as late as 100 units, and incurs a penalty of 14 units per time unit for landing early and 19 units per time unit for landing late.\n\nTo ensure safety, there must be a minimum separation time between the landings of any two aircraft. If Aircraft 0 lands before Aircraft 1, there must be at least 7 units of separation. If Aircraft 1 lands before Aircraft 0, the separation must be at least 5 units. If Aircraft 0 lands before Aircraft 2, there must be at least 7 units of separation. If Aircraft 2 lands before Aircraft 0, the separation must be at least 5 units. If Aircraft 0 lands before Aircraft 3, there must be at least 5 units of separation. If Aircraft 3 lands before Aircraft 0, the separation must be at least 8 units. If Aircraft 0 lands before Aircraft 4, there must be at least 5 units of separation. If Aircraft 4 lands before Aircraft 0, the separation must be at least 7 units. If Aircraft 0 lands before Aircraft 5, there must be at least 5 units of separation. If Aircraft 5 lands before Aircraft 0, the separation must be at least 7 units. If Aircraft 1 lands before Aircraft 2, there must be at least 7 units of separation. If Aircraft 2 lands before Aircraft 1, the separation must be at least 8 units. If Aircraft 1 lands before Aircraft 3, there must be at least 5 units of separation. If Aircraft 3 lands before Aircraft 1, the separation must be at least 8 units. If Aircraft 1 lands before Aircraft 4, there must be at least 8 units of separation. If Aircraft 4 lands before Aircraft 1, the separation must be at least 7 units. If Aircraft 1 lands before Aircraft 5, there must be at least 7 units of separation. If Aircraft 5 lands before Aircraft 1, the separation must be at least 5 units. If Aircraft 2 lands before Aircraft 3, there must be at least 8 units of separation. If Aircraft 3 lands before Aircraft 2, the separation must be at least 8 units. If Aircraft 2 lands before Aircraft 4, there must be at least 8 units of separation. If Aircraft 4 lands before Aircraft 2, the separation must be at least 6 units. If Aircraft 2 lands before Aircraft 5, there must be at least 6 units of separation. If Aircraft 5 lands before Aircraft 2, the separation must be at least 8 units. If Aircraft 3 lands before Aircraft 4, there must be at least 6 units of separation. If Aircraft 4 lands before Aircraft 3, the separation must be at least 8 units. If Aircraft 3 lands before Aircraft 5, there must be at least 5 units of separation. If Aircraft 5 lands before Aircraft 3, the separation must be at least 7 units. If Aircraft 4 lands before Aircraft 5, there must be at least 6 units of separation. If Aircraft 5 lands before Aircraft 4, the separation must be at least 7 units.\n\nYour task is to determine the actual landing times for all six aircraft such that each aircraft lands within its allowed time window, the separation requirements between consecutive landings are satisfied, and the total penalty cost, which is the sum of the penalties for landing early or late for all aircraft, is minimized. For each pair of aircraft, one must land before the other, and the separation time must be respected. The landing time for each aircraft must fall within its specified earliest and latest landing times. The penalties for landing early or late are calculated based on the difference between the actual landing time and the target landing time.",
    "ground_truth": 72
  },
  {
    "question": "In a manufacturing facility, six jobs labeled Job 0 through Job 5 must be scheduled, each consisting of two operations. The goal is to minimize the total production time (makespan), ensuring all jobs are completed efficiently. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a sequence: the second operation cannot start until the first operation is completed. For example, Operation (0,1) of Job 0 cannot start until Operation (0,0) of Job 0 is finished, and this applies to all jobs.\n\nCertain operations share the same machine and cannot overlap in time. The machine assignments are inferred from the constraints, which specify pairwise relationships between operations. For example, Operation (0,0) of Job 0 and Operation (3,0) of Job 3 must be scheduled on the same machine without overlapping, and similarly for other operation pairs. The order of operations on shared machines is determined by binary decision variables. For instance, if Operation (0,0) of Job 0 is scheduled before Operation (3,0) of Job 3 on a shared machine, the corresponding binary variable is set to 1; otherwise, it is set to 0.\n\nThe total production time (makespan) must be at least as large as the completion time of every operation. For example, if Operation (0,0) of Job 0 finishes at time 1 and Operation (0,1) of Job 0 finishes at time 2, the makespan must be at least 2. Similarly, if Operation (5,1) of Job 5 finishes at time 10, the makespan must be at least 10.\n\nTo enforce the constraints, a large constant \\( N = 100,000 \\) is used in the machine capacity constraints to ensure that operations sharing the same machine do not overlap. The start times of all operations are continuous variables, and the binary variables determine the order of operations on shared machines. The objective is to minimize the makespan while respecting the precedence constraints within jobs, the machine capacity constraints, and the non-negativity and binary constraints on the decision variables.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 87,
    "description": "In a manufacturing facility, six jobs labeled Job 0 through Job 5 must be scheduled, each consisting of two operations. The goal is to minimize the total production time (makespan), ensuring all jobs are completed efficiently. Each operation has a processing time of 1 unit of time. Operations within the same job must follow a sequence: the second operation cannot start until the first operation is completed. For example, Operation (0,1) of Job 0 cannot start until Operation (0,0) of Job 0 is finished, and this applies to all jobs.\n\nCertain operations share the same machine and cannot overlap in time. The machine assignments are inferred from the constraints, which specify pairwise relationships between operations. For example, Operation (0,0) of Job 0 and Operation (3,0) of Job 3 must be scheduled on the same machine without overlapping, and similarly for other operation pairs. The order of operations on shared machines is determined by binary decision variables. For instance, if Operation (0,0) of Job 0 is scheduled before Operation (3,0) of Job 3 on a shared machine, the corresponding binary variable is set to 1; otherwise, it is set to 0.\n\nThe total production time (makespan) must be at least as large as the completion time of every operation. For example, if Operation (0,0) of Job 0 finishes at time 1 and Operation (0,1) of Job 0 finishes at time 2, the makespan must be at least 2. Similarly, if Operation (5,1) of Job 5 finishes at time 10, the makespan must be at least 10.\n\nTo enforce the constraints, a large constant \\( N = 100,000 \\) is used in the machine capacity constraints to ensure that operations sharing the same machine do not overlap. The start times of all operations are continuous variables, and the binary variables determine the order of operations on shared machines. The objective is to minimize the makespan while respecting the precedence constraints within jobs, the machine capacity constraints, and the non-negativity and binary constraints on the decision variables.",
    "ground_truth": 4
  },
  {
    "question": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 32 distinct areas, each with a specific population size that needs to be covered by cell tower signals. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Details:\n1. **Population Coverage**: Each area has a specific population size that can be covered if a cell tower is built in a location that serves that area. The populations of the areas range from 2,010 to 4,970 people, with the total population across all areas being a critical factor in your decision-making.\n\n2. **Cell Tower Options**: There are 29 potential cell tower locations, each with a unique construction cost. The costs range from 210 units for Tower 1 to 498 units for Tower 6. Building a tower at any of these locations will enable coverage for specific areas, depending on the tower's range and location.\n\n3. **Coverage Requirements**: For an area to be considered covered, at least one of the cell towers that can serve it must be built. For example, Area 0 can be covered if any of Towers 0, 2, 5, 6, 11, 18, 20, 21, 26, or 27 are built. Similar coverage relationships exist for all 32 areas.\n\n4. **Budget Constraint**: The total cost of building the selected cell towers must not exceed 3,226 units. This budget must be carefully allocated to maximize population coverage while staying within the financial limit.\n\n5. **Decision Variables**:\n   - **Build Decisions**: For each of the 29 cell tower locations, you must decide whether to build the tower (yes or no).\n   - **Coverage Decisions**: For each of the 32 areas, you must determine whether it will be covered (yes or no), based on the towers built.\n\n#### Objective:\nYour primary objective is to maximize the total population covered by the cell towers. This means selecting a combination of towers to build that ensures the largest possible number of people across the 32 areas have access to cell service, while staying within the budget.\n\n#### Constraints:\n1. **Coverage Logic**: An area can only be considered covered if at least one of the cell towers capable of serving it is built. For example, Area 1 can only be covered if at least one of Towers 0, 2, 3, 4, 5, 7, 10, 11, 15, 16, 17, 20, 23, or 28 is built.\n\n2. **Budget Limit**: The total cost of building the selected towers must not exceed 3,226 units. This requires careful selection of towers to balance coverage and cost.\n\n3. **Binary Decisions**: Both the decision to build a tower and the decision to cover an area are binary (yes or no). You cannot partially build a tower or partially cover an area.\n\n#### Numerical Parameters:\n- **Population Sizes**: The populations of the 32 areas are as follows:\n  - Area 0: 2,285\n  - Area 1: 3,023\n  - Area 2: 3,557\n  - Area 3: 3,938\n  - Area 4: 3,689\n  - Area 5: 2,426\n  - Area 6: 4,697\n  - Area 7: 3,214\n  - Area 8: 2,580\n  - Area 9: 2,010\n  - Area 10: 3,180\n  - Area 11: 4,083\n  - Area 12: 2,787\n  - Area 13: 3,095\n  - Area 14: 2,898\n  - Area 15: 4,374\n  - Area 16: 4,970\n  - Area 17: 3,689\n  - Area 18: 4,612\n  - Area 19: 3,232\n  - Area 20: 4,177\n  - Area 21: 2,211\n  - Area 22: 3,123\n  - Area 23: 4,194\n  - Area 24: 3,774\n  - Area 25: 3,391\n  - Area 26: 3,959\n  - Area 27: 3,010\n  - Area 28: 3,213\n  - Area 29: 3,106\n  - Area 30: 2,652\n  - Area 31: 3,441\n\n- **Tower Costs**: The construction costs for the 29 towers are as follows:\n  - Tower 0: 323 units\n  - Tower 1: 210 units\n  - Tower 2: 360 units\n  - Tower 3: 480 units\n  - Tower 4: 375 units\n  - Tower 5: 491 units\n  - Tower 6: 498 units\n  - Tower 7: 267 units\n  - Tower 8: 413 units\n  - Tower 9: 417 units\n  - Tower 10: 291 units\n  - Tower 11: 388 units\n  - Tower 12: 284 units\n  - Tower 13: 463 units\n  - Tower 14: 309 units\n  - Tower 15: 382 units\n  - Tower 16: 476 units\n  - Tower 17: 325 units\n  - Tower 18: 428 units\n  - Tower 19: 265 units\n  - Tower 20: 323 units\n  - Tower 21: 282 units\n  - Tower 22: 441 units\n  - Tower 23: 467 units\n  - Tower 24: 491 units\n  - Tower 25: 232 units\n  - Tower 26: 396 units\n  - Tower 27: 370 units\n  - Tower 28: 309 units\n\n#### Summary:\nYour task is to select which cell towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget of 3,226 units. The decisions must respect the coverage requirements for each area and the binary nature of the build and coverage decisions.",
    "answer": 108590,
    "ori": "13_optmath_bench",
    "index": 88,
    "description": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 32 distinct areas, each with a specific population size that needs to be covered by cell tower signals. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Details:\n1. **Population Coverage**: Each area has a specific population size that can be covered if a cell tower is built in a location that serves that area. The populations of the areas range from 2,010 to 4,970 people, with the total population across all areas being a critical factor in your decision-making.\n\n2. **Cell Tower Options**: There are 29 potential cell tower locations, each with a unique construction cost. The costs range from 210 units for Tower 1 to 498 units for Tower 6. Building a tower at any of these locations will enable coverage for specific areas, depending on the tower's range and location.\n\n3. **Coverage Requirements**: For an area to be considered covered, at least one of the cell towers that can serve it must be built. For example, Area 0 can be covered if any of Towers 0, 2, 5, 6, 11, 18, 20, 21, 26, or 27 are built. Similar coverage relationships exist for all 32 areas.\n\n4. **Budget Constraint**: The total cost of building the selected cell towers must not exceed 3,226 units. This budget must be carefully allocated to maximize population coverage while staying within the financial limit.\n\n5. **Decision Variables**:\n   - **Build Decisions**: For each of the 29 cell tower locations, you must decide whether to build the tower (yes or no).\n   - **Coverage Decisions**: For each of the 32 areas, you must determine whether it will be covered (yes or no), based on the towers built.\n\n#### Objective:\nYour primary objective is to maximize the total population covered by the cell towers. This means selecting a combination of towers to build that ensures the largest possible number of people across the 32 areas have access to cell service, while staying within the budget.\n\n#### Constraints:\n1. **Coverage Logic**: An area can only be considered covered if at least one of the cell towers capable of serving it is built. For example, Area 1 can only be covered if at least one of Towers 0, 2, 3, 4, 5, 7, 10, 11, 15, 16, 17, 20, 23, or 28 is built.\n\n2. **Budget Limit**: The total cost of building the selected towers must not exceed 3,226 units. This requires careful selection of towers to balance coverage and cost.\n\n3. **Binary Decisions**: Both the decision to build a tower and the decision to cover an area are binary (yes or no). You cannot partially build a tower or partially cover an area.\n\n#### Numerical Parameters:\n- **Population Sizes**: The populations of the 32 areas are as follows:\n  - Area 0: 2,285\n  - Area 1: 3,023\n  - Area 2: 3,557\n  - Area 3: 3,938\n  - Area 4: 3,689\n  - Area 5: 2,426\n  - Area 6: 4,697\n  - Area 7: 3,214\n  - Area 8: 2,580\n  - Area 9: 2,010\n  - Area 10: 3,180\n  - Area 11: 4,083\n  - Area 12: 2,787\n  - Area 13: 3,095\n  - Area 14: 2,898\n  - Area 15: 4,374\n  - Area 16: 4,970\n  - Area 17: 3,689\n  - Area 18: 4,612\n  - Area 19: 3,232\n  - Area 20: 4,177\n  - Area 21: 2,211\n  - Area 22: 3,123\n  - Area 23: 4,194\n  - Area 24: 3,774\n  - Area 25: 3,391\n  - Area 26: 3,959\n  - Area 27: 3,010\n  - Area 28: 3,213\n  - Area 29: 3,106\n  - Area 30: 2,652\n  - Area 31: 3,441\n\n- **Tower Costs**: The construction costs for the 29 towers are as follows:\n  - Tower 0: 323 units\n  - Tower 1: 210 units\n  - Tower 2: 360 units\n  - Tower 3: 480 units\n  - Tower 4: 375 units\n  - Tower 5: 491 units\n  - Tower 6: 498 units\n  - Tower 7: 267 units\n  - Tower 8: 413 units\n  - Tower 9: 417 units\n  - Tower 10: 291 units\n  - Tower 11: 388 units\n  - Tower 12: 284 units\n  - Tower 13: 463 units\n  - Tower 14: 309 units\n  - Tower 15: 382 units\n  - Tower 16: 476 units\n  - Tower 17: 325 units\n  - Tower 18: 428 units\n  - Tower 19: 265 units\n  - Tower 20: 323 units\n  - Tower 21: 282 units\n  - Tower 22: 441 units\n  - Tower 23: 467 units\n  - Tower 24: 491 units\n  - Tower 25: 232 units\n  - Tower 26: 396 units\n  - Tower 27: 370 units\n  - Tower 28: 309 units\n\n#### Summary:\nYour task is to select which cell towers to build and which areas to cover, ensuring that the total population covered is maximized while staying within the budget of 3,226 units. The decisions must respect the coverage requirements for each area and the binary nature of the build and coverage decisions.",
    "ground_truth": 108590
  },
  {
    "question": "Assign six staff members to four projects such that each staff member is assigned to exactly one project. Each staff member has specific skill levels in three skills, and each project has required skill levels for each skill. The skill level attained for each project is determined by the highest skill level among the staff members assigned to that project. The skill shortage for each project is the difference between the required skill level and the attained skill level. The goal is to minimize the maximum skill shortage across all projects and skills. Staff members and their skill levels are as follows: Person 0 has Skill 0 (Level 5), Skill 1 (Level 5), Skill 2 (Level 5); Person 1 has Skill 0 (Level 6), Skill 1 (Level 5), Skill 2 (Level 7); Person 2 has Skill 0 (Level 6), Skill 1 (Level 5), Skill 2 (Level 7); Person 3 has Skill 0 (Level 5), Skill 1 (Level 5), Skill 2 (Level 6); Person 4 has Skill 0 (Level 7), Skill 1 (Level 5), Skill 2 (Level 6); Person 5 has Skill 0 (Level 6), Skill 1 (Level 7), Skill 2 (Level 5). Project skill requirements are as follows: Project 0 requires Skill 0 (Level 9), Skill 1 (Level 9), Skill 2 (Level 7); Project 1 requires Skill 0 (Level 7), Skill 1 (Level 7), Skill 2 (Level 8); Project 2 requires Skill 0 (Level 9), Skill 1 (Level 9), Skill 2 (Level 7); Project 3 requires Skill 0 (Level 7), Skill 1 (Level 8), Skill 2 (Level 9). The objective is to minimize the maximum skill shortage across all projects and skills.",
    "answer": 0,
    "ori": "13_optmath_bench",
    "index": 89,
    "description": "Assign six staff members to four projects such that each staff member is assigned to exactly one project. Each staff member has specific skill levels in three skills, and each project has required skill levels for each skill. The skill level attained for each project is determined by the highest skill level among the staff members assigned to that project. The skill shortage for each project is the difference between the required skill level and the attained skill level. The goal is to minimize the maximum skill shortage across all projects and skills. Staff members and their skill levels are as follows: Person 0 has Skill 0 (Level 5), Skill 1 (Level 5), Skill 2 (Level 5); Person 1 has Skill 0 (Level 6), Skill 1 (Level 5), Skill 2 (Level 7); Person 2 has Skill 0 (Level 6), Skill 1 (Level 5), Skill 2 (Level 7); Person 3 has Skill 0 (Level 5), Skill 1 (Level 5), Skill 2 (Level 6); Person 4 has Skill 0 (Level 7), Skill 1 (Level 5), Skill 2 (Level 6); Person 5 has Skill 0 (Level 6), Skill 1 (Level 7), Skill 2 (Level 5). Project skill requirements are as follows: Project 0 requires Skill 0 (Level 9), Skill 1 (Level 9), Skill 2 (Level 7); Project 1 requires Skill 0 (Level 7), Skill 1 (Level 7), Skill 2 (Level 8); Project 2 requires Skill 0 (Level 9), Skill 1 (Level 9), Skill 2 (Level 7); Project 3 requires Skill 0 (Level 7), Skill 1 (Level 8), Skill 2 (Level 9). The objective is to minimize the maximum skill shortage across all projects and skills.",
    "ground_truth": 0
  },
  {
    "question": " Facility Dispersion in a Network of Locations\n\nImagine you are tasked with selecting a subset of facilities to open across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, and your goal is to ensure that the selected facilities are as spread out as possible to optimize coverage and minimize redundancy.\n\n#### Key Details:\n1. **Facility Selection**: You must select exactly **2 facilities** to open from the five available locations. Each location can either be chosen (1) or not chosen (0) to host a facility.\n2. **Dispersion Values**: The pairwise distances (dispersion values) between the locations are as follows:\n   - Node 0 and Node 1: 20 units\n   - Node 0 and Node 2: 20 units\n   - Node 0 and Node 3: 18 units\n   - Node 0 and Node 4: 18 units\n   - Node 1 and Node 0: 22 units\n   - Node 1 and Node 2: 21 units\n   - Node 1 and Node 3: 16 units\n   - Node 1 and Node 4: 17 units\n   - Node 2 and Node 0: 16 units\n   - Node 2 and Node 1: 23 units\n   - Node 2 and Node 3: 15 units\n   - Node 2 and Node 4: 24 units\n   - Node 3 and Node 0: 23 units\n   - Node 3 and Node 1: 16 units\n   - Node 3 and Node 2: 23 units\n   - Node 3 and Node 4: 20 units\n   - Node 4 and Node 0: 19 units\n   - Node 4 and Node 1: 21 units\n   - Node 4 and Node 2: 15 units\n   - Node 4 and Node 3: 25 units\n\n3. **Objective**: Maximize the total dispersion between the selected facilities. This means you want to choose the two facilities such that the sum of their pairwise distances is as large as possible.\n\n4. **Constraints**:\n   - **Selection Constraint**: Exactly two facilities must be selected from the five locations.\n   - **Pairwise Activation**: For any two locations, the pairwise dispersion value is only counted if both locations are selected. For example, the dispersion between Node 0 and Node 1 (20 units) is only included in the total if both Node 0 and Node 1 are chosen.\n   - **Logical Relationships**: If a location is not selected, no pairwise dispersion involving that location can be included in the total.\n\n#### Example:\nIf you select Node 0 and Node 1, the total dispersion would be 20 units (from Node 0 to Node 1). If you select Node 2 and Node 4, the total dispersion would be 24 units (from Node 2 to Node 4). Your goal is to find the pair of locations that yields the highest possible total dispersion.\n\n#### Decision to Make:\n- Which two facilities to open from the five available locations to maximize the total pairwise dispersion.\n\n#### Numerical Parameters:\n- All pairwise dispersion values are provided above.\n- The total number of facilities to select is fixed at 2.\n\nThis problem requires balancing the selection of facilities to ensure they are as dispersed as possible, while adhering to the constraint of selecting exactly two locations. The solution will provide the optimal pair of facilities to open, maximizing the overall dispersion across the network.",
    "answer": 45,
    "ori": "13_optmath_bench",
    "index": 90,
    "description": " Facility Dispersion in a Network of Locations\n\nImagine you are tasked with selecting a subset of facilities to open across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, and your goal is to ensure that the selected facilities are as spread out as possible to optimize coverage and minimize redundancy.\n\n#### Key Details:\n1. **Facility Selection**: You must select exactly **2 facilities** to open from the five available locations. Each location can either be chosen (1) or not chosen (0) to host a facility.\n2. **Dispersion Values**: The pairwise distances (dispersion values) between the locations are as follows:\n   - Node 0 and Node 1: 20 units\n   - Node 0 and Node 2: 20 units\n   - Node 0 and Node 3: 18 units\n   - Node 0 and Node 4: 18 units\n   - Node 1 and Node 0: 22 units\n   - Node 1 and Node 2: 21 units\n   - Node 1 and Node 3: 16 units\n   - Node 1 and Node 4: 17 units\n   - Node 2 and Node 0: 16 units\n   - Node 2 and Node 1: 23 units\n   - Node 2 and Node 3: 15 units\n   - Node 2 and Node 4: 24 units\n   - Node 3 and Node 0: 23 units\n   - Node 3 and Node 1: 16 units\n   - Node 3 and Node 2: 23 units\n   - Node 3 and Node 4: 20 units\n   - Node 4 and Node 0: 19 units\n   - Node 4 and Node 1: 21 units\n   - Node 4 and Node 2: 15 units\n   - Node 4 and Node 3: 25 units\n\n3. **Objective**: Maximize the total dispersion between the selected facilities. This means you want to choose the two facilities such that the sum of their pairwise distances is as large as possible.\n\n4. **Constraints**:\n   - **Selection Constraint**: Exactly two facilities must be selected from the five locations.\n   - **Pairwise Activation**: For any two locations, the pairwise dispersion value is only counted if both locations are selected. For example, the dispersion between Node 0 and Node 1 (20 units) is only included in the total if both Node 0 and Node 1 are chosen.\n   - **Logical Relationships**: If a location is not selected, no pairwise dispersion involving that location can be included in the total.\n\n#### Example:\nIf you select Node 0 and Node 1, the total dispersion would be 20 units (from Node 0 to Node 1). If you select Node 2 and Node 4, the total dispersion would be 24 units (from Node 2 to Node 4). Your goal is to find the pair of locations that yields the highest possible total dispersion.\n\n#### Decision to Make:\n- Which two facilities to open from the five available locations to maximize the total pairwise dispersion.\n\n#### Numerical Parameters:\n- All pairwise dispersion values are provided above.\n- The total number of facilities to select is fixed at 2.\n\nThis problem requires balancing the selection of facilities to ensure they are as dispersed as possible, while adhering to the constraint of selecting exactly two locations. The solution will provide the optimal pair of facilities to open, maximizing the overall dispersion across the network.",
    "ground_truth": 45
  },
  {
    "question": "Select a set of facilities from five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the minimum distance between any two selected facilities. The decision variables include binary choices for selecting each location and binary variables for selecting pairs of locations. The objective is to maximize the minimum distance (MinDistance) between any two selected facilities. Exactly two facilities must be selected. For each pair of locations, if both are selected, the distance between them must be at least MinDistance. If either or both locations in a pair are not selected, the distance constraint is relaxed using a large constant (1,000,000). The pairwise selection variables are symmetric, meaning selecting Node i and Node j is the same as selecting Node j and Node i. Additionally, the pairwise selection variables for the same node (e.g., Node 0 and Node 0) are set to 0. The distances between locations are as follows: Node 0 and Node 1 (41 units), Node 0 and Node 2 (31 units), Node 0 and Node 3 (43 units), Node 0 and Node 4 (10 units), Node 1 and Node 2 (34 units), Node 1 and Node 3 (46 units), Node 1 and Node 4 (12 units), Node 2 and Node 3 (41 units), Node 2 and Node 4 (24 units), and Node 3 and Node 4 (23 units). All decision variables are binary, and the constraints ensure that pairwise selections are consistent with individual selections.",
    "answer": 46,
    "ori": "13_optmath_bench",
    "index": 91,
    "description": "Select a set of facilities from five potential locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the minimum distance between any two selected facilities. The decision variables include binary choices for selecting each location and binary variables for selecting pairs of locations. The objective is to maximize the minimum distance (MinDistance) between any two selected facilities. Exactly two facilities must be selected. For each pair of locations, if both are selected, the distance between them must be at least MinDistance. If either or both locations in a pair are not selected, the distance constraint is relaxed using a large constant (1,000,000). The pairwise selection variables are symmetric, meaning selecting Node i and Node j is the same as selecting Node j and Node i. Additionally, the pairwise selection variables for the same node (e.g., Node 0 and Node 0) are set to 0. The distances between locations are as follows: Node 0 and Node 1 (41 units), Node 0 and Node 2 (31 units), Node 0 and Node 3 (43 units), Node 0 and Node 4 (10 units), Node 1 and Node 2 (34 units), Node 1 and Node 3 (46 units), Node 1 and Node 4 (12 units), Node 2 and Node 3 (41 units), Node 2 and Node 4 (24 units), and Node 3 and Node 4 (23 units). All decision variables are binary, and the constraints ensure that pairwise selections are consistent with individual selections.",
    "ground_truth": 46
  },
  {
    "question": "Managing Resource Distribution Across Cities\n\nYou are responsible for managing the distribution of a critical resource (e.g., medical supplies, food, or energy) across eight interconnected cities. Each city has a specific supply or demand for the resource, and your goal is to ensure that all cities receive the required amount while minimizing the total transportation cost. The transportation costs vary depending on the routes between cities, and each route has a maximum capacity limit for resource shipments.\n\n#### City Requirements:\n- **City 0** has a surplus of 51 units of the resource.\n- **City 1** requires an additional 2 units to meet its demand.\n- **City 2** requires an additional 7 units.\n- **City 3** requires an additional 11 units.\n- **City 4** requires an additional 9 units.\n- **City 5** requires an additional 25 units.\n- **City 6** has a surplus of 19 units.\n- **City 7** requires an additional 16 units.\n\n#### Transportation Costs and Capacities:\nThe cost of transporting one unit of the resource between cities varies. Below are the costs and maximum capacities for each route:\n\n- **From City 0**:  \n  - To City 1: Cost = 10, Capacity = 42  \n  - To City 2: Cost = 10, Capacity = 47  \n  - To City 3: Cost = 10, Capacity = 31  \n  - To City 4: Cost = 9, Capacity = 54  \n  - To City 5: Cost = 8, Capacity = 41  \n  - To City 6: Cost = 9, Capacity = 55  \n  - To City 7: Cost = 10, Capacity = 52  \n\n- **From City 1**:  \n  - To City 0: Cost = 9, Capacity = 40  \n  - To City 2: Cost = 7, Capacity = 57  \n  - To City 3: Cost = 10, Capacity = 56  \n  - To City 4: Cost = 10, Capacity = 57  \n  - To City 5: Cost = 10, Capacity = 44  \n  - To City 6: Cost = 9, Capacity = 60  \n  - To City 7: Cost = 7, Capacity = 50  \n\n- **From City 2**:  \n  - To City 0: Cost = 7, Capacity = 45  \n  - To City 1: Cost = 7, Capacity = 43  \n  - To City 3: Cost = 8, Capacity = 50  \n  - To City 4: Cost = 9, Capacity = 36  \n  - To City 5: Cost = 10, Capacity = 42  \n  - To City 6: Cost = 6, Capacity = 58  \n  - To City 7: Cost = 10, Capacity = 33  \n\n- **From City 3**:  \n  - To City 0: Cost = 9, Capacity = 57  \n  - To City 1: Cost = 9, Capacity = 42  \n  - To City 2: Cost = 6, Capacity = 30  \n  - To City 4: Cost = 9, Capacity = 55  \n  - To City 5: Cost = 10, Capacity = 60  \n  - To City 6: Cost = 10, Capacity = 41  \n  - To City 7: Cost = 8, Capacity = 40  \n\n- **From City 4**:  \n  - To City 0: Cost = 10, Capacity = 42  \n  - To City 1: Cost = 6, Capacity = 42  \n  - To City 2: Cost = 9, Capacity = 33  \n  - To City 3: Cost = 8, Capacity = 52  \n  - To City 5: Cost = 10, Capacity = 33  \n  - To City 6: Cost = 7, Capacity = 36  \n  - To City 7: Cost = 8, Capacity = 31  \n\n- **From City 5**:  \n  - To City 0: Cost = 7, Capacity = 48  \n  - To City 1: Cost = 8, Capacity = 42  \n  - To City 2: Cost = 9, Capacity = 49  \n  - To City 3: Cost = 6, Capacity = 34  \n  - To City 4: Cost = 9, Capacity = 48  \n  - To City 6: Cost = 7, Capacity = 58  \n  - To City 7: Cost = 7, Capacity = 38  \n\n- **From City 6**:  \n  - To City 0: Cost = 7, Capacity = 41  \n  - To City 1: Cost = 7, Capacity = 31  \n  - To City 2: Cost = 8, Capacity = 31  \n  - To City 3: Cost = 7, Capacity = 34  \n  - To City 4: Cost = 6, Capacity = 42  \n  - To City 5: Cost = 7, Capacity = 48  \n  - To City 7: Cost = 9, Capacity = 49  \n\n- **From City 7**:  \n  - To City 0: Cost = 9, Capacity = 49  \n  - To City 1: Cost = 6, Capacity = 31  \n  - To City 2: Cost = 6, Capacity = 34  \n  - To City 3: Cost = 9, Capacity = 50  \n  - To City 4: Cost = 10, Capacity = 59  \n  - To City 5: Cost = 10, Capacity = 49  \n  - To City 6: Cost = 10, Capacity = 60  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that:\n1. The total amount of resources shipped into each city equals the total amount shipped out, adjusted for the city's supply or demand.\n2. No shipment exceeds the capacity of its respective route.\n3. All shipments are non-negative.\n\nBy solving this problem, you will ensure efficient resource distribution across the cities at the lowest possible cost.",
    "answer": 541,
    "ori": "13_optmath_bench",
    "index": 92,
    "description": "Managing Resource Distribution Across Cities\n\nYou are responsible for managing the distribution of a critical resource (e.g., medical supplies, food, or energy) across eight interconnected cities. Each city has a specific supply or demand for the resource, and your goal is to ensure that all cities receive the required amount while minimizing the total transportation cost. The transportation costs vary depending on the routes between cities, and each route has a maximum capacity limit for resource shipments.\n\n#### City Requirements:\n- **City 0** has a surplus of 51 units of the resource.\n- **City 1** requires an additional 2 units to meet its demand.\n- **City 2** requires an additional 7 units.\n- **City 3** requires an additional 11 units.\n- **City 4** requires an additional 9 units.\n- **City 5** requires an additional 25 units.\n- **City 6** has a surplus of 19 units.\n- **City 7** requires an additional 16 units.\n\n#### Transportation Costs and Capacities:\nThe cost of transporting one unit of the resource between cities varies. Below are the costs and maximum capacities for each route:\n\n- **From City 0**:  \n  - To City 1: Cost = 10, Capacity = 42  \n  - To City 2: Cost = 10, Capacity = 47  \n  - To City 3: Cost = 10, Capacity = 31  \n  - To City 4: Cost = 9, Capacity = 54  \n  - To City 5: Cost = 8, Capacity = 41  \n  - To City 6: Cost = 9, Capacity = 55  \n  - To City 7: Cost = 10, Capacity = 52  \n\n- **From City 1**:  \n  - To City 0: Cost = 9, Capacity = 40  \n  - To City 2: Cost = 7, Capacity = 57  \n  - To City 3: Cost = 10, Capacity = 56  \n  - To City 4: Cost = 10, Capacity = 57  \n  - To City 5: Cost = 10, Capacity = 44  \n  - To City 6: Cost = 9, Capacity = 60  \n  - To City 7: Cost = 7, Capacity = 50  \n\n- **From City 2**:  \n  - To City 0: Cost = 7, Capacity = 45  \n  - To City 1: Cost = 7, Capacity = 43  \n  - To City 3: Cost = 8, Capacity = 50  \n  - To City 4: Cost = 9, Capacity = 36  \n  - To City 5: Cost = 10, Capacity = 42  \n  - To City 6: Cost = 6, Capacity = 58  \n  - To City 7: Cost = 10, Capacity = 33  \n\n- **From City 3**:  \n  - To City 0: Cost = 9, Capacity = 57  \n  - To City 1: Cost = 9, Capacity = 42  \n  - To City 2: Cost = 6, Capacity = 30  \n  - To City 4: Cost = 9, Capacity = 55  \n  - To City 5: Cost = 10, Capacity = 60  \n  - To City 6: Cost = 10, Capacity = 41  \n  - To City 7: Cost = 8, Capacity = 40  \n\n- **From City 4**:  \n  - To City 0: Cost = 10, Capacity = 42  \n  - To City 1: Cost = 6, Capacity = 42  \n  - To City 2: Cost = 9, Capacity = 33  \n  - To City 3: Cost = 8, Capacity = 52  \n  - To City 5: Cost = 10, Capacity = 33  \n  - To City 6: Cost = 7, Capacity = 36  \n  - To City 7: Cost = 8, Capacity = 31  \n\n- **From City 5**:  \n  - To City 0: Cost = 7, Capacity = 48  \n  - To City 1: Cost = 8, Capacity = 42  \n  - To City 2: Cost = 9, Capacity = 49  \n  - To City 3: Cost = 6, Capacity = 34  \n  - To City 4: Cost = 9, Capacity = 48  \n  - To City 6: Cost = 7, Capacity = 58  \n  - To City 7: Cost = 7, Capacity = 38  \n\n- **From City 6**:  \n  - To City 0: Cost = 7, Capacity = 41  \n  - To City 1: Cost = 7, Capacity = 31  \n  - To City 2: Cost = 8, Capacity = 31  \n  - To City 3: Cost = 7, Capacity = 34  \n  - To City 4: Cost = 6, Capacity = 42  \n  - To City 5: Cost = 7, Capacity = 48  \n  - To City 7: Cost = 9, Capacity = 49  \n\n- **From City 7**:  \n  - To City 0: Cost = 9, Capacity = 49  \n  - To City 1: Cost = 6, Capacity = 31  \n  - To City 2: Cost = 6, Capacity = 34  \n  - To City 3: Cost = 9, Capacity = 50  \n  - To City 4: Cost = 10, Capacity = 59  \n  - To City 5: Cost = 10, Capacity = 49  \n  - To City 6: Cost = 10, Capacity = 60  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that:\n1. The total amount of resources shipped into each city equals the total amount shipped out, adjusted for the city's supply or demand.\n2. No shipment exceeds the capacity of its respective route.\n3. All shipments are non-negative.\n\nBy solving this problem, you will ensure efficient resource distribution across the cities at the lowest possible cost.",
    "ground_truth": 541
  },
  {
    "question": "The problem involves assigning employees to shifts across two restaurants to meet specific skill demands while minimizing costs. There are seven employees, each with specific availability and skill capabilities. Each shift at each restaurant requires one employee with Skill 0. Assigning an employee to a shift incurs a cost: some assignments cost 1 unit, while others cost 3 units. If a shift cannot be filled, a penalty of 100 units is incurred per unfulfilled position.\n\nEmployees are only available for certain shifts, as specified by the availability constraints. For example, Employee 0 is available for Shift 0 but not for Shift 1 at Restaurant 1, and Employee 1 is available for Shift 0 but not for Shift 1 at Restaurant 1. Employees can only be assigned to roles that match their skills, and each employee can be assigned to at most one shift across all restaurants and roles. The total number of employees assigned to a shift plus any unfulfilled positions must equal the demand for that shift.\n\nThe objective is to minimize the total cost, which includes the cost of assigning employees to roles based on their preferences and the penalty cost for any unfulfilled positions. The preference costs for assignments range from 1 to 3 units, and the penalty cost for unfulfilled positions is 100 units each. The demand for each shift is one employee with the required skill.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 93,
    "description": "The problem involves assigning employees to shifts across two restaurants to meet specific skill demands while minimizing costs. There are seven employees, each with specific availability and skill capabilities. Each shift at each restaurant requires one employee with Skill 0. Assigning an employee to a shift incurs a cost: some assignments cost 1 unit, while others cost 3 units. If a shift cannot be filled, a penalty of 100 units is incurred per unfulfilled position.\n\nEmployees are only available for certain shifts, as specified by the availability constraints. For example, Employee 0 is available for Shift 0 but not for Shift 1 at Restaurant 1, and Employee 1 is available for Shift 0 but not for Shift 1 at Restaurant 1. Employees can only be assigned to roles that match their skills, and each employee can be assigned to at most one shift across all restaurants and roles. The total number of employees assigned to a shift plus any unfulfilled positions must equal the demand for that shift.\n\nThe objective is to minimize the total cost, which includes the cost of assigning employees to roles based on their preferences and the penalty cost for any unfulfilled positions. The preference costs for assignments range from 1 to 3 units, and the penalty cost for unfulfilled positions is 100 units each. The demand for each shift is one employee with the required skill.",
    "ground_truth": 4
  },
  {
    "question": "Minimize the total travel distance for a delivery route across six cities, labeled City 0 through City 5, starting and ending at City 0. Each city must be visited exactly once, and the route must form a single loop without subtours. The distances between cities are as follows:  \n- From City 0: To City 1: 301 km, To City 2: 313 km, To City 3: 298 km, To City 4: 280 km, To City 5: 300 km.  \n- From City 1: To City 0: 309 km, To City 2: 317 km, To City 3: 317 km, To City 4: 279 km, To City 5: 321 km.  \n- From City 2: To City 0: 297 km, To City 1: 290 km, To City 3: 302 km, To City 4: 278 km, To City 5: 323 km.  \n- From City 3: To City 0: 292 km, To City 1: 305 km, To City 2: 321 km, To City 4: 292 km, To City 5: 321 km.  \n- From City 4: To City 0: 299 km, To City 1: 295 km, To City 2: 282 km, To City 3: 284 km, To City 5: 300 km.  \n- From City 5: To City 0: 318 km, To City 1: 317 km, To City 2: 304 km, To City 3: 278 km, To City 4: 284 km.  \n\nEach city must be visited exactly once, and each city must be departed exactly once. To prevent subtours, auxiliary variables represent the position of each city in the tour, with positions ranging from 0 to 5. Subtour elimination constraints ensure that if a route segment from City i to City j is included, the position of City i must be less than the position of City j. Specifically, for each pair of cities i and j, the constraint 6 times the route segment from i to j plus the position of City i minus the position of City j must be less than or equal to 5. The decision variables are binary, indicating whether a route segment is included, and the auxiliary variables are general, representing the position of each city in the tour. The goal is to determine the sequence of cities that minimizes the total travel distance while satisfying all constraints.",
    "answer": 1741,
    "ori": "13_optmath_bench",
    "index": 94,
    "description": "Minimize the total travel distance for a delivery route across six cities, labeled City 0 through City 5, starting and ending at City 0. Each city must be visited exactly once, and the route must form a single loop without subtours. The distances between cities are as follows:  \n- From City 0: To City 1: 301 km, To City 2: 313 km, To City 3: 298 km, To City 4: 280 km, To City 5: 300 km.  \n- From City 1: To City 0: 309 km, To City 2: 317 km, To City 3: 317 km, To City 4: 279 km, To City 5: 321 km.  \n- From City 2: To City 0: 297 km, To City 1: 290 km, To City 3: 302 km, To City 4: 278 km, To City 5: 323 km.  \n- From City 3: To City 0: 292 km, To City 1: 305 km, To City 2: 321 km, To City 4: 292 km, To City 5: 321 km.  \n- From City 4: To City 0: 299 km, To City 1: 295 km, To City 2: 282 km, To City 3: 284 km, To City 5: 300 km.  \n- From City 5: To City 0: 318 km, To City 1: 317 km, To City 2: 304 km, To City 3: 278 km, To City 4: 284 km.  \n\nEach city must be visited exactly once, and each city must be departed exactly once. To prevent subtours, auxiliary variables represent the position of each city in the tour, with positions ranging from 0 to 5. Subtour elimination constraints ensure that if a route segment from City i to City j is included, the position of City i must be less than the position of City j. Specifically, for each pair of cities i and j, the constraint 6 times the route segment from i to j plus the position of City i minus the position of City j must be less than or equal to 5. The decision variables are binary, indicating whether a route segment is included, and the auxiliary variables are general, representing the position of each city in the tour. The goal is to determine the sequence of cities that minimizes the total travel distance while satisfying all constraints.",
    "ground_truth": 1741
  },
  {
    "question": "You are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 35 distinct areas, each with a specific population size that needs to be covered by the cell towers. The goal is to determine which towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 29 potential tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage**: For each of the 35 regions, you must determine whether it will be covered by at least one of the built towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for each region are as follows:\n- Region 0: 2,328 people\n- Region 1: 2,364 people\n- Region 2: 2,101 people\n- Region 3: 4,451 people\n- Region 4: 4,175 people\n- Region 5: 3,684 people\n- Region 6: 3,871 people\n- Region 7: 4,018 people\n- Region 8: 2,922 people\n- Region 9: 3,610 people\n- Region 10: 4,982 people\n- Region 11: 3,296 people\n- Region 12: 3,211 people\n- Region 13: 3,875 people\n- Region 14: 4,545 people\n- Region 15: 4,382 people\n- Region 16: 3,873 people\n- Region 17: 3,481 people\n- Region 18: 2,656 people\n- Region 19: 3,621 people\n- Region 20: 4,167 people\n- Region 21: 2,027 people\n- Region 22: 4,889 people\n- Region 23: 3,684 people\n- Region 24: 3,987 people\n- Region 25: 2,597 people\n- Region 26: 4,578 people\n- Region 27: 2,159 people\n- Region 28: 2,635 people\n- Region 29: 2,699 people\n- Region 30: 3,364 people\n- Region 31: 3,164 people\n- Region 32: 4,867 people\n- Region 33: 3,938 people\n- Region 34: 3,341 people\n\n#### Constraints:\n1. **Coverage Requirement**: For a region to be considered covered, at least one of the towers that can serve it must be built. The specific towers that can cover each region are listed in the problem data. For example:\n   - Region 0 can be covered by towers 0, 1, 2, 4, 6, 9, 15, 18, 20, 21, 23, 24, 25, or 28.\n   - Region 1 can be covered by towers 0, 3, 4, 5, 6, 10, 13, 16, 17, 19, 20, 25, or 28.\n   - Similar constraints apply to all 35 regions.\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 2,968 units. The cost of building each tower is as follows:\n   - Tower 0: 476 units\n   - Tower 1: 388 units\n   - Tower 2: 444 units\n   - Tower 3: 230 units\n   - Tower 4: 449 units\n   - Tower 5: 363 units\n   - Tower 6: 458 units\n   - Tower 7: 400 units\n   - Tower 8: 208 units\n   - Tower 9: 373 units\n   - Tower 10: 454 units\n   - Tower 11: 348 units\n   - Tower 12: 465 units\n   - Tower 13: 445 units\n   - Tower 14: 378 units\n   - Tower 15: 288 units\n   - Tower 16: 335 units\n   - Tower 17: 361 units\n   - Tower 18: 254 units\n   - Tower 19: 362 units\n   - Tower 20: 290 units\n   - Tower 21: 287 units\n   - Tower 22: 291 units\n   - Tower 23: 213 units\n   - Tower 24: 237 units\n   - Tower 25: 232 units\n   - Tower 26: 356 units\n   - Tower 27: 221 units\n   - Tower 28: 289 units\n\n#### Summary:\nYour task is to select which towers to build and which regions to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each region depends on the specific towers built, and the total cost of building the selected towers must not exceed 2,968 units. The goal is to make strategic decisions that balance coverage and cost to achieve the best possible outcome for the region.",
    "answer": 123542,
    "ori": "13_optmath_bench",
    "index": 95,
    "description": "You are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 35 distinct areas, each with a specific population size that needs to be covered by the cell towers. The goal is to determine which towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 29 potential tower locations, you must decide whether to build the tower (a binary decision: build or not build).\n2. **Coverage**: For each of the 35 regions, you must determine whether it will be covered by at least one of the built towers (a binary decision: covered or not covered).\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for each region are as follows:\n- Region 0: 2,328 people\n- Region 1: 2,364 people\n- Region 2: 2,101 people\n- Region 3: 4,451 people\n- Region 4: 4,175 people\n- Region 5: 3,684 people\n- Region 6: 3,871 people\n- Region 7: 4,018 people\n- Region 8: 2,922 people\n- Region 9: 3,610 people\n- Region 10: 4,982 people\n- Region 11: 3,296 people\n- Region 12: 3,211 people\n- Region 13: 3,875 people\n- Region 14: 4,545 people\n- Region 15: 4,382 people\n- Region 16: 3,873 people\n- Region 17: 3,481 people\n- Region 18: 2,656 people\n- Region 19: 3,621 people\n- Region 20: 4,167 people\n- Region 21: 2,027 people\n- Region 22: 4,889 people\n- Region 23: 3,684 people\n- Region 24: 3,987 people\n- Region 25: 2,597 people\n- Region 26: 4,578 people\n- Region 27: 2,159 people\n- Region 28: 2,635 people\n- Region 29: 2,699 people\n- Region 30: 3,364 people\n- Region 31: 3,164 people\n- Region 32: 4,867 people\n- Region 33: 3,938 people\n- Region 34: 3,341 people\n\n#### Constraints:\n1. **Coverage Requirement**: For a region to be considered covered, at least one of the towers that can serve it must be built. The specific towers that can cover each region are listed in the problem data. For example:\n   - Region 0 can be covered by towers 0, 1, 2, 4, 6, 9, 15, 18, 20, 21, 23, 24, 25, or 28.\n   - Region 1 can be covered by towers 0, 3, 4, 5, 6, 10, 13, 16, 17, 19, 20, 25, or 28.\n   - Similar constraints apply to all 35 regions.\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 2,968 units. The cost of building each tower is as follows:\n   - Tower 0: 476 units\n   - Tower 1: 388 units\n   - Tower 2: 444 units\n   - Tower 3: 230 units\n   - Tower 4: 449 units\n   - Tower 5: 363 units\n   - Tower 6: 458 units\n   - Tower 7: 400 units\n   - Tower 8: 208 units\n   - Tower 9: 373 units\n   - Tower 10: 454 units\n   - Tower 11: 348 units\n   - Tower 12: 465 units\n   - Tower 13: 445 units\n   - Tower 14: 378 units\n   - Tower 15: 288 units\n   - Tower 16: 335 units\n   - Tower 17: 361 units\n   - Tower 18: 254 units\n   - Tower 19: 362 units\n   - Tower 20: 290 units\n   - Tower 21: 287 units\n   - Tower 22: 291 units\n   - Tower 23: 213 units\n   - Tower 24: 237 units\n   - Tower 25: 232 units\n   - Tower 26: 356 units\n   - Tower 27: 221 units\n   - Tower 28: 289 units\n\n#### Summary:\nYour task is to select which towers to build and which regions to cover, ensuring that the total population covered is maximized while staying within the budget. The coverage of each region depends on the specific towers built, and the total cost of building the selected towers must not exceed 2,968 units. The goal is to make strategic decisions that balance coverage and cost to achieve the best possible outcome for the region.",
    "ground_truth": 123542
  },
  {
    "question": "Minimize the total production costs, which include setup costs, startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period. The setup cost is **121.0782541217011** per production run, and the startup cost is **69.65555018358044** per startup. The inventory holding cost for Product 0 is **1.196682091019819** per unit per period, and for Product 1, it is **1.146459407730801** per unit per period. The backlogging cost for Product 0 is **7.384397449671641** per unit per period, and for Product 1, it is **6.58642780982885** per unit per period. \n\nThe production facility manufactures two types of products (Product 0 and Product 1) using two machines (Machine 0 and Machine 1) over four time periods (Period 0 to Period 3). The demand for Product 0 in Period 0 is **22.28694038228271**, in Period 1 is **15.40553617195959**, in Period 2 is **16.19622794603683**, and in Period 3 is **23.77133167016131**. The demand for Product 1 in Period 0 is **16.51020937307772**, in Period 1 is **15.41395287058592**, in Period 2 is **23.98409764196543**, and in Period 3 is **18.84683167137874**.\n\nEach machine has a limited capacity: Machine 0 has a capacity of **63.4339018881536**, and Machine 1 has a capacity of **67.51600987446864**. The startup time for Machine 0 is **7.917022863645049**, and for Machine 1, it is **7.682853596177669**. Each machine can produce only one product at a time in any given period. A machine can only be started up for a product if it was not producing that product in the previous period.\n\nThe total production, inventory, and backlog must balance customer demand for each product in each period. Production quantities, inventory, and backlog must be non-negative. Production and startup decisions are binary (either 0 or 1). The goal is to determine the optimal production schedule, inventory levels, and backlog amounts to minimize the total cost while meeting all constraints and customer demand.",
    "answer": 763.27,
    "ori": "13_optmath_bench",
    "index": 96,
    "description": "Minimize the total production costs, which include setup costs, startup costs, inventory holding costs, and backlogging costs, while meeting customer demand for each product in each period. The setup cost is **121.0782541217011** per production run, and the startup cost is **69.65555018358044** per startup. The inventory holding cost for Product 0 is **1.196682091019819** per unit per period, and for Product 1, it is **1.146459407730801** per unit per period. The backlogging cost for Product 0 is **7.384397449671641** per unit per period, and for Product 1, it is **6.58642780982885** per unit per period. \n\nThe production facility manufactures two types of products (Product 0 and Product 1) using two machines (Machine 0 and Machine 1) over four time periods (Period 0 to Period 3). The demand for Product 0 in Period 0 is **22.28694038228271**, in Period 1 is **15.40553617195959**, in Period 2 is **16.19622794603683**, and in Period 3 is **23.77133167016131**. The demand for Product 1 in Period 0 is **16.51020937307772**, in Period 1 is **15.41395287058592**, in Period 2 is **23.98409764196543**, and in Period 3 is **18.84683167137874**.\n\nEach machine has a limited capacity: Machine 0 has a capacity of **63.4339018881536**, and Machine 1 has a capacity of **67.51600987446864**. The startup time for Machine 0 is **7.917022863645049**, and for Machine 1, it is **7.682853596177669**. Each machine can produce only one product at a time in any given period. A machine can only be started up for a product if it was not producing that product in the previous period.\n\nThe total production, inventory, and backlog must balance customer demand for each product in each period. Production quantities, inventory, and backlog must be non-negative. Production and startup decisions are binary (either 0 or 1). The goal is to determine the optimal production schedule, inventory levels, and backlog amounts to minimize the total cost while meeting all constraints and customer demand.",
    "ground_truth": 763.27
  },
  {
    "question": "Minimize the total completion time (makespan) required to process all jobs in a manufacturing facility. There are 7 jobs, each consisting of 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit. Operations from different jobs may share the same machine, but a machine can only handle one operation at a time. To avoid overlaps, the order of operations on shared machines must be determined. \n\nThe start time of each operation must be non-negative, and the start time of an operation in a job must be at least 1 unit after the completion of the previous operation in the same job. For operations sharing a machine, one operation must finish before the other starts. This is enforced using binary decision variables that determine the order of operations on shared machines. A large constant (100,000) is used in the constraints to ensure logical consistency when determining the order of operations. \n\nThe makespan must be at least as large as the completion time of every operation across all jobs. The objective is to minimize the makespan while ensuring that all precedence and machine capacity constraints are satisfied. The decision variables include the start times of all operations, the binary variables determining the order of operations on shared machines, and the makespan itself.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 97,
    "description": "Minimize the total completion time (makespan) required to process all jobs in a manufacturing facility. There are 7 jobs, each consisting of 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit. Operations from different jobs may share the same machine, but a machine can only handle one operation at a time. To avoid overlaps, the order of operations on shared machines must be determined. \n\nThe start time of each operation must be non-negative, and the start time of an operation in a job must be at least 1 unit after the completion of the previous operation in the same job. For operations sharing a machine, one operation must finish before the other starts. This is enforced using binary decision variables that determine the order of operations on shared machines. A large constant (100,000) is used in the constraints to ensure logical consistency when determining the order of operations. \n\nThe makespan must be at least as large as the completion time of every operation across all jobs. The objective is to minimize the makespan while ensuring that all precedence and machine capacity constraints are satisfied. The decision variables include the start times of all operations, the binary variables determining the order of operations on shared machines, and the makespan itself.",
    "ground_truth": 5
  },
  {
    "question": "There are five jobs, labeled Job 0 through Job 4, each consisting of two operations that must be processed in sequence. Each operation takes exactly 1 unit of time to complete and is assigned to a specific machine. The goal is to schedule these operations to minimize the total completion time, known as the makespan, which is the maximum completion time across all operations.\n\nFor each job, the second operation cannot start until the first operation is completed. This ensures that the operations within a job follow a strict sequence. Additionally, each machine can process only one operation at a time. If two operations are assigned to the same machine, they cannot overlap. A binary decision variable determines the order in which these operations are scheduled on the machine. If the variable is 1, the first operation is scheduled before the second; if it is 0, the order is reversed.\n\nThe constraints ensure that the start time of the second operation in a job is at least 1 unit of time after the start time of the first operation. For operations assigned to the same machine, the start time of one operation must be at least 1 unit of time after the completion of the other operation. A large number (100,000) is used in the constraints to enforce this order without overlapping.\n\nThe objective is to determine the start times for all operations and the order in which operations are processed on shared machines, such that the total makespan is minimized. This involves ensuring that all precedence constraints within jobs are satisfied, preventing overlapping operations on the same machine, and minimizing the latest completion time across all operations.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 98,
    "description": "There are five jobs, labeled Job 0 through Job 4, each consisting of two operations that must be processed in sequence. Each operation takes exactly 1 unit of time to complete and is assigned to a specific machine. The goal is to schedule these operations to minimize the total completion time, known as the makespan, which is the maximum completion time across all operations.\n\nFor each job, the second operation cannot start until the first operation is completed. This ensures that the operations within a job follow a strict sequence. Additionally, each machine can process only one operation at a time. If two operations are assigned to the same machine, they cannot overlap. A binary decision variable determines the order in which these operations are scheduled on the machine. If the variable is 1, the first operation is scheduled before the second; if it is 0, the order is reversed.\n\nThe constraints ensure that the start time of the second operation in a job is at least 1 unit of time after the start time of the first operation. For operations assigned to the same machine, the start time of one operation must be at least 1 unit of time after the completion of the other operation. A large number (100,000) is used in the constraints to enforce this order without overlapping.\n\nThe objective is to determine the start times for all operations and the order in which operations are processed on shared machines, such that the total makespan is minimized. This involves ensuring that all precedence constraints within jobs are satisfied, preventing overlapping operations on the same machine, and minimizing the latest completion time across all operations.",
    "ground_truth": 3
  },
  {
    "question": "Facility Dispersion in a Network\n\nImagine you are tasked with selecting a set of facilities to maximize their dispersion across a network of five locations (nodes). The goal is to ensure that the selected facilities are as spread out as possible, which is measured by the pairwise distances between them. You must select exactly two facilities out of the five available locations.\n\nEach pair of locations has a specific distance value associated with it, representing how far apart they are. These distances are as follows:\n\n- Distance between Node 0 and Node 1: 24 units  \n- Distance between Node 0 and Node 2: 22 units  \n- Distance between Node 0 and Node 3: 23 units  \n- Distance between Node 0 and Node 4: 21 units  \n- Distance between Node 1 and Node 0: 20 units  \n- Distance between Node 1 and Node 2: 19 units  \n- Distance between Node 1 and Node 3: 19 units  \n- Distance between Node 1 and Node 4: 25 units  \n- Distance between Node 2 and Node 0: 17 units  \n- Distance between Node 2 and Node 1: 20 units  \n- Distance between Node 2 and Node 3: 18 units  \n- Distance between Node 2 and Node 4: 20 units  \n- Distance between Node 3 and Node 0: 25 units  \n- Distance between Node 3 and Node 1: 18 units  \n- Distance between Node 3 and Node 2: 21 units  \n- Distance between Node 3 and Node 4: 24 units  \n- Distance between Node 4 and Node 0: 21 units  \n- Distance between Node 4 and Node 1: 18 units  \n- Distance between Node 4 and Node 2: 15 units  \n- Distance between Node 4 and Node 3: 23 units  \n\nYour objective is to maximize the total dispersion, which is the sum of the distances between all pairs of selected facilities. However, there are specific rules governing the selection process:\n\n1. **Selection Constraint**: Exactly two facilities must be selected from the five available locations.  \n2. **Pairwise Activation**: A distance between two locations is only counted if both locations are selected as facilities. For example, the distance between Node 0 and Node 1 (24 units) is only included in the total dispersion if both Node 0 and Node 1 are chosen.  \n3. **Logical Consistency**: If a pair of locations is selected, the distance between them must be fully accounted for in the total dispersion. Conversely, if either location in a pair is not selected, the distance between them must not contribute to the total dispersion.  \n\nYour task is to determine which two locations to select as facilities to maximize the total dispersion while adhering to the constraints above. The solution must ensure that the selection of facilities is logically consistent and that the total dispersion is calculated accurately based on the pairwise distances provided.",
    "answer": 48,
    "ori": "13_optmath_bench",
    "index": 99,
    "description": "Facility Dispersion in a Network\n\nImagine you are tasked with selecting a set of facilities to maximize their dispersion across a network of five locations (nodes). The goal is to ensure that the selected facilities are as spread out as possible, which is measured by the pairwise distances between them. You must select exactly two facilities out of the five available locations.\n\nEach pair of locations has a specific distance value associated with it, representing how far apart they are. These distances are as follows:\n\n- Distance between Node 0 and Node 1: 24 units  \n- Distance between Node 0 and Node 2: 22 units  \n- Distance between Node 0 and Node 3: 23 units  \n- Distance between Node 0 and Node 4: 21 units  \n- Distance between Node 1 and Node 0: 20 units  \n- Distance between Node 1 and Node 2: 19 units  \n- Distance between Node 1 and Node 3: 19 units  \n- Distance between Node 1 and Node 4: 25 units  \n- Distance between Node 2 and Node 0: 17 units  \n- Distance between Node 2 and Node 1: 20 units  \n- Distance between Node 2 and Node 3: 18 units  \n- Distance between Node 2 and Node 4: 20 units  \n- Distance between Node 3 and Node 0: 25 units  \n- Distance between Node 3 and Node 1: 18 units  \n- Distance between Node 3 and Node 2: 21 units  \n- Distance between Node 3 and Node 4: 24 units  \n- Distance between Node 4 and Node 0: 21 units  \n- Distance between Node 4 and Node 1: 18 units  \n- Distance between Node 4 and Node 2: 15 units  \n- Distance between Node 4 and Node 3: 23 units  \n\nYour objective is to maximize the total dispersion, which is the sum of the distances between all pairs of selected facilities. However, there are specific rules governing the selection process:\n\n1. **Selection Constraint**: Exactly two facilities must be selected from the five available locations.  \n2. **Pairwise Activation**: A distance between two locations is only counted if both locations are selected as facilities. For example, the distance between Node 0 and Node 1 (24 units) is only included in the total dispersion if both Node 0 and Node 1 are chosen.  \n3. **Logical Consistency**: If a pair of locations is selected, the distance between them must be fully accounted for in the total dispersion. Conversely, if either location in a pair is not selected, the distance between them must not contribute to the total dispersion.  \n\nYour task is to determine which two locations to select as facilities to maximize the total dispersion while adhering to the constraints above. The solution must ensure that the selection of facilities is logically consistent and that the total dispersion is calculated accurately based on the pairwise distances provided.",
    "ground_truth": 48
  },
  {
    "question": "There are 5 jobs, each consisting of 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. Operations are assigned to machines, and each machine can process only one operation at a time. The goal is to minimize the total completion time (makespan) of all jobs by determining the start times of each operation and the order in which operations are processed on the machines.\n\nFor each job, the second operation cannot start until the first operation has been completed. For example, Operation 1 of Job 0 must start at least 1 unit of time after Operation 0 of Job 0 starts. This applies to all jobs. Operations assigned to the same machine cannot overlap in time. For every pair of operations on the same machine, one must be processed before the other. If Operation A is processed before Operation B, then Operation B must start at least 1 unit of time after Operation A completes. Conversely, if Operation B is processed before Operation A, then Operation A must start at least 1 unit of time after Operation B completes. These constraints apply to all relevant pairs of operations.\n\nThe makespan must be at least as large as the completion time of every operation. For example, the makespan must be at least 1 unit of time after the start of Operation 0 of Job 0, and this applies to all operations across all jobs. All start times must be non-negative, and the order variables, which determine the sequence of operations on the machines, must be binary (0 or 1). A large constant (100,000) is used in the constraints to ensure the correct order of operations is enforced. The objective is to minimize the makespan, ensuring all operations are scheduled efficiently without violating the constraints.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 100,
    "description": "There are 5 jobs, each consisting of 2 operations that must be performed in sequence. Each operation has a processing time of 1 unit of time. Operations are assigned to machines, and each machine can process only one operation at a time. The goal is to minimize the total completion time (makespan) of all jobs by determining the start times of each operation and the order in which operations are processed on the machines.\n\nFor each job, the second operation cannot start until the first operation has been completed. For example, Operation 1 of Job 0 must start at least 1 unit of time after Operation 0 of Job 0 starts. This applies to all jobs. Operations assigned to the same machine cannot overlap in time. For every pair of operations on the same machine, one must be processed before the other. If Operation A is processed before Operation B, then Operation B must start at least 1 unit of time after Operation A completes. Conversely, if Operation B is processed before Operation A, then Operation A must start at least 1 unit of time after Operation B completes. These constraints apply to all relevant pairs of operations.\n\nThe makespan must be at least as large as the completion time of every operation. For example, the makespan must be at least 1 unit of time after the start of Operation 0 of Job 0, and this applies to all operations across all jobs. All start times must be non-negative, and the order variables, which determine the sequence of operations on the machines, must be binary (0 or 1). A large constant (100,000) is used in the constraints to ensure the correct order of operations is enforced. The objective is to minimize the makespan, ensuring all operations are scheduled efficiently without violating the constraints.",
    "ground_truth": 5
  },
  {
    "question": " Facility Dispersion in a Network of Locations\n\nYou are tasked with selecting a subset of facilities to open across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, with higher distances indicating better dispersion. The goal is to ensure that the selected facilities are as spread out as possible within the network.\n\n#### Key Decisions:\n1. **Facility Selection**: You must decide which facilities to open. Specifically, you need to select exactly 2 out of the 5 available locations to open facilities. Each location can either be selected (1) or not selected (0).\n2. **Pairwise Dispersion Activation**: For each pair of selected facilities, you must determine whether their dispersion contributes to the overall objective. This is represented by a binary decision variable that activates only if both facilities in the pair are selected.\n\n#### Objective:\nMaximize the total dispersion across all pairs of selected facilities. The dispersion values between each pair of locations are as follows:\n- Node 0 and Node 1: 18 units\n- Node 0 and Node 2: 24 units\n- Node 0 and Node 3: 21 units\n- Node 0 and Node 4: 24 units\n- Node 1 and Node 0: 17 units\n- Node 1 and Node 2: 21 units\n- Node 1 and Node 3: 21 units\n- Node 1 and Node 4: 17 units\n- Node 2 and Node 0: 19 units\n- Node 2 and Node 1: 15 units\n- Node 2 and Node 3: 19 units\n- Node 2 and Node 4: 22 units\n- Node 3 and Node 0: 15 units\n- Node 3 and Node 1: 17 units\n- Node 3 and Node 2: 22 units\n- Node 3 and Node 4: 16 units\n- Node 4 and Node 0: 25 units\n- Node 4 and Node 1: 24 units\n- Node 4 and Node 2: 16 units\n- Node 4 and Node 3: 23 units\n\nThe objective is to maximize the sum of these dispersion values for all pairs of selected facilities.\n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected out of the 5 available locations. This ensures that the solution is neither too sparse nor too dense.\n2. **Pairwise Dispersion Activation Rules**:\n   - For any pair of locations, their dispersion can only contribute to the objective if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, their dispersion cannot be counted.\n   - If both facilities in a pair are selected, their dispersion must be counted.\n\n#### Numerical Parameters:\n- The number of facilities to select: 2.\n- The dispersion values between each pair of locations are explicitly provided above.\n\n#### Summary:\nYour task is to select 2 out of 5 locations to open facilities such that the total dispersion between the selected facilities is maximized. The dispersion values between each pair of locations are given, and the solution must adhere to the constraints on facility selection and pairwise dispersion activation. The goal is to ensure that the selected facilities are as spread out as possible within the network.",
    "answer": 49,
    "ori": "13_optmath_bench",
    "index": 101,
    "description": " Facility Dispersion in a Network of Locations\n\nYou are tasked with selecting a subset of facilities to open across a network of five locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall dispersion between the selected facilities. Dispersion is measured by the pairwise distances between the facilities, with higher distances indicating better dispersion. The goal is to ensure that the selected facilities are as spread out as possible within the network.\n\n#### Key Decisions:\n1. **Facility Selection**: You must decide which facilities to open. Specifically, you need to select exactly 2 out of the 5 available locations to open facilities. Each location can either be selected (1) or not selected (0).\n2. **Pairwise Dispersion Activation**: For each pair of selected facilities, you must determine whether their dispersion contributes to the overall objective. This is represented by a binary decision variable that activates only if both facilities in the pair are selected.\n\n#### Objective:\nMaximize the total dispersion across all pairs of selected facilities. The dispersion values between each pair of locations are as follows:\n- Node 0 and Node 1: 18 units\n- Node 0 and Node 2: 24 units\n- Node 0 and Node 3: 21 units\n- Node 0 and Node 4: 24 units\n- Node 1 and Node 0: 17 units\n- Node 1 and Node 2: 21 units\n- Node 1 and Node 3: 21 units\n- Node 1 and Node 4: 17 units\n- Node 2 and Node 0: 19 units\n- Node 2 and Node 1: 15 units\n- Node 2 and Node 3: 19 units\n- Node 2 and Node 4: 22 units\n- Node 3 and Node 0: 15 units\n- Node 3 and Node 1: 17 units\n- Node 3 and Node 2: 22 units\n- Node 3 and Node 4: 16 units\n- Node 4 and Node 0: 25 units\n- Node 4 and Node 1: 24 units\n- Node 4 and Node 2: 16 units\n- Node 4 and Node 3: 23 units\n\nThe objective is to maximize the sum of these dispersion values for all pairs of selected facilities.\n\n#### Constraints:\n1. **Facility Selection Limit**: Exactly 2 facilities must be selected out of the 5 available locations. This ensures that the solution is neither too sparse nor too dense.\n2. **Pairwise Dispersion Activation Rules**:\n   - For any pair of locations, their dispersion can only contribute to the objective if both facilities in the pair are selected.\n   - If either facility in a pair is not selected, their dispersion cannot be counted.\n   - If both facilities in a pair are selected, their dispersion must be counted.\n\n#### Numerical Parameters:\n- The number of facilities to select: 2.\n- The dispersion values between each pair of locations are explicitly provided above.\n\n#### Summary:\nYour task is to select 2 out of 5 locations to open facilities such that the total dispersion between the selected facilities is maximized. The dispersion values between each pair of locations are given, and the solution must adhere to the constraints on facility selection and pairwise dispersion activation. The goal is to ensure that the selected facilities are as spread out as possible within the network.",
    "ground_truth": 49
  },
  {
    "question": "You are managing a factory that produces three types of products: **product_0**, **product_1**, and **product_2**, over a five-period planning horizon. The factory operates with three types of machines: **grinders**, **drills**, and **borers**, each with specific capacities and maintenance schedules. Your goal is to maximize the factory's profit by optimizing production, inventory, and sales decisions while adhering to operational constraints.\n\nThe profit per unit sold is **$249** for **product_0**, **$222** for **product_1**, and **$249** for **product_2**. The holding cost for each unit in inventory is **$15** per period.\n\nIn the first period, the production of each product must equal the sum of its sales and inventory for that period. For subsequent periods, the inventory from the previous period plus the current production must equal the sum of current sales and inventory.\n\nEach unit of **product_0** requires **2 hours** on grinders, **2 hours** on drills, and **1 hour** on borers. Each unit of **product_1** requires **1 hour** on grinders, **2 hours** on drills, and **1 hour** on borers. Each unit of **product_2** requires **1 hour** on grinders, **2 hours** on drills, and **2 hours** on borers.\n\nThe total available grinding capacity is **480 hours** per period, except in period 3, where it is **480 hours**. The total available drilling capacity is **320 hours** per period, except in period 1, where it is reduced to **160 hours**. The total available boring capacity is **160 hours** per period, except in period 0, where it is **0 hours**.\n\nThe maximum inventory capacity for each product is **80 units** per period. The maximum number of units that can be sold for each product in each period is as follows: **product_0**: **63** (period 0), **68** (period 1), **42** (period 2), **58** (period 3), **54** (period 4); **product_1**: **53** (period 0), **62** (period 1), **67** (period 2), **46** (period 3), **56** (period 4); **product_2**: **64** (period 0), **67** (period 1), **65** (period 2), **65** (period 3), **58** (period 4).\n\nAt the end of the planning horizon (period 4), the inventory for each product must be exactly **20 units**. All production, inventory, and sales quantities must be non-negative. Machine downtime for maintenance is accounted for in the capacity constraints.\n\nYour task is to determine the optimal production, inventory, and sales plan that maximizes profit while satisfying all operational constraints.",
    "answer": 104245.5,
    "ori": "13_optmath_bench",
    "index": 102,
    "description": "You are managing a factory that produces three types of products: **product_0**, **product_1**, and **product_2**, over a five-period planning horizon. The factory operates with three types of machines: **grinders**, **drills**, and **borers**, each with specific capacities and maintenance schedules. Your goal is to maximize the factory's profit by optimizing production, inventory, and sales decisions while adhering to operational constraints.\n\nThe profit per unit sold is **$249** for **product_0**, **$222** for **product_1**, and **$249** for **product_2**. The holding cost for each unit in inventory is **$15** per period.\n\nIn the first period, the production of each product must equal the sum of its sales and inventory for that period. For subsequent periods, the inventory from the previous period plus the current production must equal the sum of current sales and inventory.\n\nEach unit of **product_0** requires **2 hours** on grinders, **2 hours** on drills, and **1 hour** on borers. Each unit of **product_1** requires **1 hour** on grinders, **2 hours** on drills, and **1 hour** on borers. Each unit of **product_2** requires **1 hour** on grinders, **2 hours** on drills, and **2 hours** on borers.\n\nThe total available grinding capacity is **480 hours** per period, except in period 3, where it is **480 hours**. The total available drilling capacity is **320 hours** per period, except in period 1, where it is reduced to **160 hours**. The total available boring capacity is **160 hours** per period, except in period 0, where it is **0 hours**.\n\nThe maximum inventory capacity for each product is **80 units** per period. The maximum number of units that can be sold for each product in each period is as follows: **product_0**: **63** (period 0), **68** (period 1), **42** (period 2), **58** (period 3), **54** (period 4); **product_1**: **53** (period 0), **62** (period 1), **67** (period 2), **46** (period 3), **56** (period 4); **product_2**: **64** (period 0), **67** (period 1), **65** (period 2), **65** (period 3), **58** (period 4).\n\nAt the end of the planning horizon (period 4), the inventory for each product must be exactly **20 units**. All production, inventory, and sales quantities must be non-negative. Machine downtime for maintenance is accounted for in the capacity constraints.\n\nYour task is to determine the optimal production, inventory, and sales plan that maximizes profit while satisfying all operational constraints.",
    "ground_truth": 104245.5
  },
  {
    "question": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 32 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 30 potential cell tower locations, you must decide whether to build the tower (yes or no). Building a tower incurs a specific cost, which varies by location.\n2. **Coverage Assignment**: For each of the 32 areas, you must determine whether it will be covered by at least one of the built towers (yes or no). An area is considered covered if at least one of the towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 32 areas are as follows:\n- Area 0: 4,657\n- Area 1: 4,663\n- Area 2: 3,139\n- Area 3: 2,579\n- Area 4: 3,171\n- Area 5: 2,796\n- Area 6: 3,502\n- Area 7: 4,951\n- Area 8: 4,211\n- Area 9: 2,885\n- Area 10: 4,948\n- Area 11: 2,195\n- Area 12: 4,002\n- Area 13: 3,856\n- Area 14: 2,663\n- Area 15: 3,197\n- Area 16: 4,465\n- Area 17: 4,648\n- Area 18: 3,796\n- Area 19: 4,714\n- Area 20: 4,952\n- Area 21: 3,088\n- Area 22: 4,029\n- Area 23: 3,379\n- Area 24: 2,002\n- Area 25: 3,840\n- Area 26: 4,037\n- Area 27: 4,246\n- Area 28: 4,852\n- Area 29: 4,423\n- Area 30: 2,630\n- Area 31: 4,951\n\n#### Constraints:\n1. **Coverage Requirements**: Each area must be covered by at least one of the built towers. The specific towers that can cover each area are listed below:\n   - Area 0 can be covered by Towers 2, 3, 4, 5, 8, 9, 10, 13, 14, 15, 20, 21, 22, 23, 26, or 28.\n   - Area 1 can be covered by Towers 1, 3, 5, 6, 9, 14, 15, 17, 18, 20, 21, 25, or 27.\n   - (Similar detailed coverage relationships apply for all 32 areas, as specified in the LP data.)\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 3,204 units. The costs for building each tower are as follows:\n   - Tower 0: 455\n   - Tower 1: 288\n   - Tower 2: 208\n   - Tower 3: 441\n   - Tower 4: 428\n   - Tower 5: 424\n   - Tower 6: 285\n   - Tower 7: 414\n   - Tower 8: 459\n   - Tower 9: 488\n   - Tower 10: 362\n   - Tower 11: 233\n   - Tower 12: 341\n   - Tower 13: 251\n   - Tower 14: 422\n   - Tower 15: 261\n   - Tower 16: 437\n   - Tower 17: 384\n   - Tower 18: 442\n   - Tower 19: 310\n   - Tower 20: 218\n   - Tower 21: 491\n   - Tower 22: 412\n   - Tower 23: 243\n   - Tower 24: 311\n   - Tower 25: 247\n   - Tower 26: 352\n   - Tower 27: 318\n   - Tower 28: 380\n   - Tower 29: 375\n\n3. **Binary Decisions**: Both the decision to build a tower and the decision to cover an area are binary (yes or no). You cannot partially build a tower or partially cover an area.\n\n#### Summary:\nYour task is to select which cell towers to build and which areas to cover, ensuring that:\n- Each area is served by at least one built tower.\n- The total cost of building the towers does not exceed the budget of 3,204 units.\n- The total population covered by the selected towers is maximized.\n\nThis problem requires careful balancing of costs and coverage to achieve the best possible outcome within the given constraints.",
    "answer": 121467,
    "ori": "13_optmath_bench",
    "index": 103,
    "description": "Cell Tower Coverage Planning\n\nYou are tasked with planning the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 32 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover, ensuring that the total cost of building the towers does not exceed the available budget.\n\n#### Key Decisions:\n1. **Build or Not Build**: For each of the 30 potential cell tower locations, you must decide whether to build the tower (yes or no). Building a tower incurs a specific cost, which varies by location.\n2. **Coverage Assignment**: For each of the 32 areas, you must determine whether it will be covered by at least one of the built towers (yes or no). An area is considered covered if at least one of the towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 32 areas are as follows:\n- Area 0: 4,657\n- Area 1: 4,663\n- Area 2: 3,139\n- Area 3: 2,579\n- Area 4: 3,171\n- Area 5: 2,796\n- Area 6: 3,502\n- Area 7: 4,951\n- Area 8: 4,211\n- Area 9: 2,885\n- Area 10: 4,948\n- Area 11: 2,195\n- Area 12: 4,002\n- Area 13: 3,856\n- Area 14: 2,663\n- Area 15: 3,197\n- Area 16: 4,465\n- Area 17: 4,648\n- Area 18: 3,796\n- Area 19: 4,714\n- Area 20: 4,952\n- Area 21: 3,088\n- Area 22: 4,029\n- Area 23: 3,379\n- Area 24: 2,002\n- Area 25: 3,840\n- Area 26: 4,037\n- Area 27: 4,246\n- Area 28: 4,852\n- Area 29: 4,423\n- Area 30: 2,630\n- Area 31: 4,951\n\n#### Constraints:\n1. **Coverage Requirements**: Each area must be covered by at least one of the built towers. The specific towers that can cover each area are listed below:\n   - Area 0 can be covered by Towers 2, 3, 4, 5, 8, 9, 10, 13, 14, 15, 20, 21, 22, 23, 26, or 28.\n   - Area 1 can be covered by Towers 1, 3, 5, 6, 9, 14, 15, 17, 18, 20, 21, 25, or 27.\n   - (Similar detailed coverage relationships apply for all 32 areas, as specified in the LP data.)\n\n2. **Budget Constraint**: The total cost of building the selected towers must not exceed the available budget of 3,204 units. The costs for building each tower are as follows:\n   - Tower 0: 455\n   - Tower 1: 288\n   - Tower 2: 208\n   - Tower 3: 441\n   - Tower 4: 428\n   - Tower 5: 424\n   - Tower 6: 285\n   - Tower 7: 414\n   - Tower 8: 459\n   - Tower 9: 488\n   - Tower 10: 362\n   - Tower 11: 233\n   - Tower 12: 341\n   - Tower 13: 251\n   - Tower 14: 422\n   - Tower 15: 261\n   - Tower 16: 437\n   - Tower 17: 384\n   - Tower 18: 442\n   - Tower 19: 310\n   - Tower 20: 218\n   - Tower 21: 491\n   - Tower 22: 412\n   - Tower 23: 243\n   - Tower 24: 311\n   - Tower 25: 247\n   - Tower 26: 352\n   - Tower 27: 318\n   - Tower 28: 380\n   - Tower 29: 375\n\n3. **Binary Decisions**: Both the decision to build a tower and the decision to cover an area are binary (yes or no). You cannot partially build a tower or partially cover an area.\n\n#### Summary:\nYour task is to select which cell towers to build and which areas to cover, ensuring that:\n- Each area is served by at least one built tower.\n- The total cost of building the towers does not exceed the budget of 3,204 units.\n- The total population covered by the selected towers is maximized.\n\nThis problem requires careful balancing of costs and coverage to achieve the best possible outcome within the given constraints.",
    "ground_truth": 121467
  },
  {
    "question": "In a manufacturing facility, you are tasked with scheduling a set of jobs across multiple machines to minimize the total completion time, known as the makespan. Each job consists of a sequence of operations that must be performed in a specific order, and each operation is assigned to a particular machine. The goal is to determine the start times for each operation on its assigned machine while respecting the following constraints:\n\nEach job has a predefined sequence of operations. For example, Job 0 has two operations: Operation 0 must be completed before Operation 1 can begin. Similarly, Job 1 has Operation 0 and Operation 1, with Operation 0 preceding Operation 1. This pattern applies to all jobs, ensuring that no operation starts before its predecessor in the same job has finished. Specifically, for Job 0, Operation 1 cannot start until Operation 0 has been completed, and for Job 1, Operation 1 cannot start until Operation 0 has been completed. This logic applies to all jobs, ensuring the correct sequence of operations.\n\nEach machine can process only one operation at a time. To prevent overlapping, the start times of operations assigned to the same machine must be carefully scheduled. For example, if Operation 0 of Job 0 and Operation 0 of Job 1 are assigned to the same machine, they cannot overlap. A binary decision variable determines the order in which these operations are processed. If Operation 0 of Job 0 is scheduled first, Operation 0 of Job 1 must start only after Operation 0 of Job 0 has finished, and vice versa. Similar constraints apply to all pairs of operations assigned to the same machine, ensuring no two operations overlap. A large constant (100,000) is used in the constraints to enforce the order of operations on shared machines.\n\nThe makespan is defined as the total time required to complete all jobs. It must be at least as large as the completion time of the last operation across all jobs. For example, if Operation 1 of Job 6 finishes at time 100, the makespan must be at least 100. This ensures that the makespan accurately reflects the total time needed to complete all operations.\n\nThe start time of every operation must be non-negative, meaning no operation can start before time zero. Binary variables are used to determine the order of operations on shared machines. These variables can only take values of 0 or 1, representing the scheduling decisions. The processing time for each operation is implicitly defined by the constraints. For example, the precedence constraints specify that Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has been completed, with a required gap of at least 1 time unit. The binary variables determine the order of operations on shared machines. For instance, if the binary variable for Operation 0 of Job 0 and Operation 0 of Job 1 is 1, Operation 0 of Job 0 is scheduled before Operation 0 of Job 1 on the same machine. The makespan must be at least as large as the completion time of every operation. For example, if Operation 0 of Job 0 finishes at time 10, the makespan must be at least 10.\n\nThe objective is to minimize the makespan, ensuring that all jobs are completed in the shortest possible time while respecting the precedence and machine capacity constraints. This problem requires determining the optimal start times for all operations and the sequence of operations on shared machines to achieve the minimum total completion time.",
    "answer": 3,
    "ori": "13_optmath_bench",
    "index": 104,
    "description": "In a manufacturing facility, you are tasked with scheduling a set of jobs across multiple machines to minimize the total completion time, known as the makespan. Each job consists of a sequence of operations that must be performed in a specific order, and each operation is assigned to a particular machine. The goal is to determine the start times for each operation on its assigned machine while respecting the following constraints:\n\nEach job has a predefined sequence of operations. For example, Job 0 has two operations: Operation 0 must be completed before Operation 1 can begin. Similarly, Job 1 has Operation 0 and Operation 1, with Operation 0 preceding Operation 1. This pattern applies to all jobs, ensuring that no operation starts before its predecessor in the same job has finished. Specifically, for Job 0, Operation 1 cannot start until Operation 0 has been completed, and for Job 1, Operation 1 cannot start until Operation 0 has been completed. This logic applies to all jobs, ensuring the correct sequence of operations.\n\nEach machine can process only one operation at a time. To prevent overlapping, the start times of operations assigned to the same machine must be carefully scheduled. For example, if Operation 0 of Job 0 and Operation 0 of Job 1 are assigned to the same machine, they cannot overlap. A binary decision variable determines the order in which these operations are processed. If Operation 0 of Job 0 is scheduled first, Operation 0 of Job 1 must start only after Operation 0 of Job 0 has finished, and vice versa. Similar constraints apply to all pairs of operations assigned to the same machine, ensuring no two operations overlap. A large constant (100,000) is used in the constraints to enforce the order of operations on shared machines.\n\nThe makespan is defined as the total time required to complete all jobs. It must be at least as large as the completion time of the last operation across all jobs. For example, if Operation 1 of Job 6 finishes at time 100, the makespan must be at least 100. This ensures that the makespan accurately reflects the total time needed to complete all operations.\n\nThe start time of every operation must be non-negative, meaning no operation can start before time zero. Binary variables are used to determine the order of operations on shared machines. These variables can only take values of 0 or 1, representing the scheduling decisions. The processing time for each operation is implicitly defined by the constraints. For example, the precedence constraints specify that Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has been completed, with a required gap of at least 1 time unit. The binary variables determine the order of operations on shared machines. For instance, if the binary variable for Operation 0 of Job 0 and Operation 0 of Job 1 is 1, Operation 0 of Job 0 is scheduled before Operation 0 of Job 1 on the same machine. The makespan must be at least as large as the completion time of every operation. For example, if Operation 0 of Job 0 finishes at time 10, the makespan must be at least 10.\n\nThe objective is to minimize the makespan, ensuring that all jobs are completed in the shortest possible time while respecting the precedence and machine capacity constraints. This problem requires determining the optimal start times for all operations and the sequence of operations on shared machines to achieve the minimum total completion time.",
    "ground_truth": 3
  },
  {
    "question": "There are 7 jobs, labeled Job 0 through Job 6, each consisting of 2 operations that must be performed in sequence. Each operation takes 1 unit of time to complete. The facility has a limited number of machines, and some operations from different jobs must be performed on the same machine. To avoid conflicts, no two operations can be scheduled on the same machine at the same time. A binary decision variable determines the order in which these operations are scheduled. For example, if Operation 1 of Job 0 and Operation 0 of Job 3 are assigned to the same machine, the binary variable ensures that one operation starts at least 1 unit of time after the other. Within each job, operations must be performed in the specified order. For instance, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has been completed. The makespan, defined as the total time required to complete all jobs, must be at least as large as the completion time of the last operation across all jobs. For every pair of operations that share the same machine, a binary variable determines the order in which they are scheduled. The objective is to minimize the makespan, ensuring that all jobs are completed in the shortest possible time. The start time of the second operation in each job must be at least 1 unit of time after the start time of the first operation. For every pair of operations assigned to the same machine, the schedule must ensure that they do not overlap. The makespan must be at least as large as the completion time of every operation. All start times must be non-negative. The binary variables that determine the order of operations on the same machine must be either 0 or 1. A large constant, 100,000, is used in the constraints to enforce the order of operations on shared machines. The processing time for every operation is 1 unit of time. The objective is to minimize the total time required to complete all jobs, ensuring that all operations are scheduled efficiently without violating any constraints.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 105,
    "description": "There are 7 jobs, labeled Job 0 through Job 6, each consisting of 2 operations that must be performed in sequence. Each operation takes 1 unit of time to complete. The facility has a limited number of machines, and some operations from different jobs must be performed on the same machine. To avoid conflicts, no two operations can be scheduled on the same machine at the same time. A binary decision variable determines the order in which these operations are scheduled. For example, if Operation 1 of Job 0 and Operation 0 of Job 3 are assigned to the same machine, the binary variable ensures that one operation starts at least 1 unit of time after the other. Within each job, operations must be performed in the specified order. For instance, Operation 1 of Job 0 cannot start until Operation 0 of Job 0 has been completed. The makespan, defined as the total time required to complete all jobs, must be at least as large as the completion time of the last operation across all jobs. For every pair of operations that share the same machine, a binary variable determines the order in which they are scheduled. The objective is to minimize the makespan, ensuring that all jobs are completed in the shortest possible time. The start time of the second operation in each job must be at least 1 unit of time after the start time of the first operation. For every pair of operations assigned to the same machine, the schedule must ensure that they do not overlap. The makespan must be at least as large as the completion time of every operation. All start times must be non-negative. The binary variables that determine the order of operations on the same machine must be either 0 or 1. A large constant, 100,000, is used in the constraints to enforce the order of operations on shared machines. The processing time for every operation is 1 unit of time. The objective is to minimize the total time required to complete all jobs, ensuring that all operations are scheduled efficiently without violating any constraints.",
    "ground_truth": 5
  },
  {
    "question": "The problem involves managing the distribution of a critical resource across seven interconnected cities to minimize the total transportation cost while meeting the demand or surplus of each city and respecting capacity constraints. Each city has a specific net demand or surplus: City 0 requires 3 additional units, City 1 requires 1 additional unit, City 2 has a surplus of 2 units, City 3 is balanced with no net demand, City 4 has a surplus of 2 units, City 5 has a surplus of 1 unit, and City 6 requires 1 additional unit. The cost of transporting resources between cities varies by route, with costs ranging from 1 to 3 units per resource. For example, transporting from City 0 to City 1 costs 1 unit, while transporting from City 0 to City 2 costs 2 units. Each city has a maximum capacity for receiving resources: City 0 can receive up to 18 units, City 1 up to 18 units, City 2 up to 12 units, City 3 up to 12 units, City 4 up to 14 units, City 5 up to 18 units, and City 6 up to 18 units. Additionally, each transportation link between cities has a maximum capacity, such as the link from City 0 to City 1, which can handle up to 9 units, and the link from City 0 to City 2, which can handle up to 8 units. The objective is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. This requires ensuring that the net flow of resources into each city matches its demand or surplus, respecting the capacity limits of both the cities and the transportation links, and ensuring that no transportation link carries more resources than its maximum capacity. All transportation amounts must be non-negative.",
    "answer": 9,
    "ori": "13_optmath_bench",
    "index": 106,
    "description": "The problem involves managing the distribution of a critical resource across seven interconnected cities to minimize the total transportation cost while meeting the demand or surplus of each city and respecting capacity constraints. Each city has a specific net demand or surplus: City 0 requires 3 additional units, City 1 requires 1 additional unit, City 2 has a surplus of 2 units, City 3 is balanced with no net demand, City 4 has a surplus of 2 units, City 5 has a surplus of 1 unit, and City 6 requires 1 additional unit. The cost of transporting resources between cities varies by route, with costs ranging from 1 to 3 units per resource. For example, transporting from City 0 to City 1 costs 1 unit, while transporting from City 0 to City 2 costs 2 units. Each city has a maximum capacity for receiving resources: City 0 can receive up to 18 units, City 1 up to 18 units, City 2 up to 12 units, City 3 up to 12 units, City 4 up to 14 units, City 5 up to 18 units, and City 6 up to 18 units. Additionally, each transportation link between cities has a maximum capacity, such as the link from City 0 to City 1, which can handle up to 9 units, and the link from City 0 to City 2, which can handle up to 8 units. The objective is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. This requires ensuring that the net flow of resources into each city matches its demand or surplus, respecting the capacity limits of both the cities and the transportation links, and ensuring that no transportation link carries more resources than its maximum capacity. All transportation amounts must be non-negative.",
    "ground_truth": 9
  },
  {
    "question": "Imagine you are managing the distribution of resources across nine interconnected cities. Each city has a specific supply or demand for resources, and your task is to ensure that the flow of resources between cities meets these requirements while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit that cannot be exceeded.\n\n#### City Requirements:\n- **City 0** has a surplus of 69 units of resources.\n- **City 1** has a deficit of 3 units.\n- **City 2** has a surplus of 8 units.\n- **City 3** has a deficit of 10 units.\n- **City 4** has a deficit of 28 units.\n- **City 5** has a deficit of 15 units.\n- **City 6** has a surplus of 8 units.\n- **City 7** has a deficit of 20 units.\n- **City 8** has a deficit of 9 units.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies as follows:\n- From **City 0**: To City 1 costs 7, City 2 costs 6, City 3 costs 6, City 4 costs 10, City 5 costs 6, City 6 costs 8, City 7 costs 7, and City 8 costs 6.\n- From **City 1**: To City 0 costs 10, City 2 costs 7, City 3 costs 9, City 4 costs 10, City 5 costs 10, City 6 costs 9, City 7 costs 8, and City 8 costs 6.\n- From **City 2**: To City 0 costs 6, City 1 costs 6, City 3 costs 7, City 4 costs 8, City 5 costs 6, City 6 costs 7, City 7 costs 7, and City 8 costs 6.\n- From **City 3**: To City 0 costs 8, City 1 costs 9, City 2 costs 6, City 4 costs 8, City 5 costs 8, City 6 costs 8, City 7 costs 10, and City 8 costs 10.\n- From **City 4**: To City 0 costs 8, City 1 costs 7, City 2 costs 8, City 3 costs 7, City 5 costs 8, City 6 costs 7, City 7 costs 10, and City 8 costs 10.\n- From **City 5**: To City 0 costs 10, City 1 costs 9, City 2 costs 6, City 3 costs 8, City 4 costs 10, City 6 costs 9, City 7 costs 8, and City 8 costs 9.\n- From **City 6**: To City 0 costs 9, City 1 costs 7, City 2 costs 10, City 3 costs 7, City 4 costs 10, City 5 costs 10, City 7 costs 7, and City 8 costs 9.\n- From **City 7**: To City 0 costs 10, City 1 costs 6, City 2 costs 6, City 3 costs 10, City 4 costs 9, City 5 costs 9, City 6 costs 10, and City 8 costs 10.\n- From **City 8**: To City 0 costs 9, City 1 costs 10, City 2 costs 10, City 3 costs 10, City 4 costs 7, City 5 costs 9, City 6 costs 6, and City 7 costs 8.\n\n#### Capacity Constraints:\nEach route between cities has a maximum capacity limit:\n- **City 0**: To City 1 (59), City 2 (51), City 3 (49), City 4 (36), City 5 (38), City 6 (37), City 7 (55), City 8 (33).\n- **City 1**: To City 0 (59), City 2 (36), City 3 (43), City 4 (38), City 5 (35), City 6 (41), City 7 (45), City 8 (47).\n- **City 2**: To City 0 (47), City 1 (50), City 3 (58), City 4 (48), City 5 (53), City 6 (55), City 7 (50), City 8 (60).\n- **City 3**: To City 0 (32), City 1 (34), City 2 (54), City 4 (31), City 5 (55), City 6 (45), City 7 (34), City 8 (49).\n- **City 4**: To City 0 (59), City 1 (50), City 2 (57), City 3 (47), City 5 (33), City 6 (59), City 7 (56), City 8 (58).\n- **City 5**: To City 0 (38), City 1 (34), City 2 (37), City 3 (40), City 4 (35), City 6 (46), City 7 (36), City 8 (59).\n- **City 6**: To City 0 (51), City 1 (46), City 2 (54), City 3 (48), City 4 (35), City 5 (34), City 7 (39), City 8 (45).\n- **City 7**: To City 0 (33), City 1 (55), City 2 (54), City 3 (35), City 4 (44), City 5 (56), City 6 (52), City 8 (35).\n- **City 8**: To City 0 (59), City 1 (43), City 2 (56), City 3 (53), City 4 (53), City 5 (55), City 6 (38), City 7 (56).\n\n#### Objective:\nYour goal is to determine the optimal flow of resources between cities to meet all supply and demand requirements while minimizing the total transportation cost. Ensure that the flow on each route does not exceed its capacity and that all resource flows are non-negative.\n\nThis problem requires balancing the flow of resources across the network of cities, respecting the capacity limits of each route, and achieving the lowest possible transportation cost.",
    "answer": 709,
    "ori": "13_optmath_bench",
    "index": 107,
    "description": "Imagine you are managing the distribution of resources across nine interconnected cities. Each city has a specific supply or demand for resources, and your task is to ensure that the flow of resources between cities meets these requirements while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit that cannot be exceeded.\n\n#### City Requirements:\n- **City 0** has a surplus of 69 units of resources.\n- **City 1** has a deficit of 3 units.\n- **City 2** has a surplus of 8 units.\n- **City 3** has a deficit of 10 units.\n- **City 4** has a deficit of 28 units.\n- **City 5** has a deficit of 15 units.\n- **City 6** has a surplus of 8 units.\n- **City 7** has a deficit of 20 units.\n- **City 8** has a deficit of 9 units.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies as follows:\n- From **City 0**: To City 1 costs 7, City 2 costs 6, City 3 costs 6, City 4 costs 10, City 5 costs 6, City 6 costs 8, City 7 costs 7, and City 8 costs 6.\n- From **City 1**: To City 0 costs 10, City 2 costs 7, City 3 costs 9, City 4 costs 10, City 5 costs 10, City 6 costs 9, City 7 costs 8, and City 8 costs 6.\n- From **City 2**: To City 0 costs 6, City 1 costs 6, City 3 costs 7, City 4 costs 8, City 5 costs 6, City 6 costs 7, City 7 costs 7, and City 8 costs 6.\n- From **City 3**: To City 0 costs 8, City 1 costs 9, City 2 costs 6, City 4 costs 8, City 5 costs 8, City 6 costs 8, City 7 costs 10, and City 8 costs 10.\n- From **City 4**: To City 0 costs 8, City 1 costs 7, City 2 costs 8, City 3 costs 7, City 5 costs 8, City 6 costs 7, City 7 costs 10, and City 8 costs 10.\n- From **City 5**: To City 0 costs 10, City 1 costs 9, City 2 costs 6, City 3 costs 8, City 4 costs 10, City 6 costs 9, City 7 costs 8, and City 8 costs 9.\n- From **City 6**: To City 0 costs 9, City 1 costs 7, City 2 costs 10, City 3 costs 7, City 4 costs 10, City 5 costs 10, City 7 costs 7, and City 8 costs 9.\n- From **City 7**: To City 0 costs 10, City 1 costs 6, City 2 costs 6, City 3 costs 10, City 4 costs 9, City 5 costs 9, City 6 costs 10, and City 8 costs 10.\n- From **City 8**: To City 0 costs 9, City 1 costs 10, City 2 costs 10, City 3 costs 10, City 4 costs 7, City 5 costs 9, City 6 costs 6, and City 7 costs 8.\n\n#### Capacity Constraints:\nEach route between cities has a maximum capacity limit:\n- **City 0**: To City 1 (59), City 2 (51), City 3 (49), City 4 (36), City 5 (38), City 6 (37), City 7 (55), City 8 (33).\n- **City 1**: To City 0 (59), City 2 (36), City 3 (43), City 4 (38), City 5 (35), City 6 (41), City 7 (45), City 8 (47).\n- **City 2**: To City 0 (47), City 1 (50), City 3 (58), City 4 (48), City 5 (53), City 6 (55), City 7 (50), City 8 (60).\n- **City 3**: To City 0 (32), City 1 (34), City 2 (54), City 4 (31), City 5 (55), City 6 (45), City 7 (34), City 8 (49).\n- **City 4**: To City 0 (59), City 1 (50), City 2 (57), City 3 (47), City 5 (33), City 6 (59), City 7 (56), City 8 (58).\n- **City 5**: To City 0 (38), City 1 (34), City 2 (37), City 3 (40), City 4 (35), City 6 (46), City 7 (36), City 8 (59).\n- **City 6**: To City 0 (51), City 1 (46), City 2 (54), City 3 (48), City 4 (35), City 5 (34), City 7 (39), City 8 (45).\n- **City 7**: To City 0 (33), City 1 (55), City 2 (54), City 3 (35), City 4 (44), City 5 (56), City 6 (52), City 8 (35).\n- **City 8**: To City 0 (59), City 1 (43), City 2 (56), City 3 (53), City 4 (53), City 5 (55), City 6 (38), City 7 (56).\n\n#### Objective:\nYour goal is to determine the optimal flow of resources between cities to meet all supply and demand requirements while minimizing the total transportation cost. Ensure that the flow on each route does not exceed its capacity and that all resource flows are non-negative.\n\nThis problem requires balancing the flow of resources across the network of cities, respecting the capacity limits of each route, and achieving the lowest possible transportation cost.",
    "ground_truth": 709
  },
  {
    "question": "Minimize the total operational cost, which includes the base cost of operating generators, the variable cost based on power output, and the startup cost for generators. The base cost is 80 units per generator per period for Type 0 and Type 2 generators, and 78 units for Type 1 generators. The variable cost is 4 units per MW for Type 0 and Type 1 generators, and 3 units per MW for Type 2 generators. The startup cost is 353 units for Type 0 generators, 349 units for Type 1 generators, and 351 units for Type 2 generators.\n\nThe total power output from all generators must meet or exceed the demand in each period, which is 163 MW in Period 0, 180 MW in Period 1, 208 MW in Period 2, 183 MW in Period 3, and 227 MW in Period 4. Each generator type has a minimum and maximum power output per generator: Type 0 generators must produce at least 35 MW and at most 126 MW, Type 1 generators must produce at least 35 MW and at most 130 MW, and Type 2 generators must produce at least 35 MW and at most 125 MW.\n\nThe total maximum possible output from all generators must be at least 15% higher than the demand in each period. For example, in Period 0, the total maximum output must be at least 187.45 MW. The number of generators operating in each period cannot exceed the available capacity: up to 5 Type 0 generators, 2 Type 1 generators, and 1 Type 2 generator can be operated in any period.\n\nThe number of generators started in a period is limited by the change in the number of generators operating from the previous period to the current period. For example, in Period 1, the number of Type 0 generators started cannot exceed the difference between the number of Type 0 generators operating in Period 1 and Period 0. This rule applies similarly for Type 1 and Type 2 generators across all periods.\n\nThe goal is to determine the optimal number of generators to operate, the power output for each generator type, and the number of generators to start in each period to minimize the total operational cost while meeting all constraints.",
    "answer": 4436,
    "ori": "13_optmath_bench",
    "index": 108,
    "description": "Minimize the total operational cost, which includes the base cost of operating generators, the variable cost based on power output, and the startup cost for generators. The base cost is 80 units per generator per period for Type 0 and Type 2 generators, and 78 units for Type 1 generators. The variable cost is 4 units per MW for Type 0 and Type 1 generators, and 3 units per MW for Type 2 generators. The startup cost is 353 units for Type 0 generators, 349 units for Type 1 generators, and 351 units for Type 2 generators.\n\nThe total power output from all generators must meet or exceed the demand in each period, which is 163 MW in Period 0, 180 MW in Period 1, 208 MW in Period 2, 183 MW in Period 3, and 227 MW in Period 4. Each generator type has a minimum and maximum power output per generator: Type 0 generators must produce at least 35 MW and at most 126 MW, Type 1 generators must produce at least 35 MW and at most 130 MW, and Type 2 generators must produce at least 35 MW and at most 125 MW.\n\nThe total maximum possible output from all generators must be at least 15% higher than the demand in each period. For example, in Period 0, the total maximum output must be at least 187.45 MW. The number of generators operating in each period cannot exceed the available capacity: up to 5 Type 0 generators, 2 Type 1 generators, and 1 Type 2 generator can be operated in any period.\n\nThe number of generators started in a period is limited by the change in the number of generators operating from the previous period to the current period. For example, in Period 1, the number of Type 0 generators started cannot exceed the difference between the number of Type 0 generators operating in Period 1 and Period 0. This rule applies similarly for Type 1 and Type 2 generators across all periods.\n\nThe goal is to determine the optimal number of generators to operate, the power output for each generator type, and the number of generators to start in each period to minimize the total operational cost while meeting all constraints.",
    "ground_truth": 4436
  },
  {
    "question": "A manufacturing facility processes six jobs (Job 0 through Job 5) on four machines (Machine 0 through Machine 3). Each job must be processed on all four machines in sequence, and the facility must determine the optimal schedule to minimize the total production time. Each job has a unique processing time on each machine, as follows:\n\n- **Job 0**: 5 hours on Machine 0, 8 hours on Machine 1, 8 hours on Machine 2, and 5 hours on Machine 3.\n- **Job 1**: 7 hours on Machine 0, 6 hours on Machine 1, 7 hours on Machine 2, and 5 hours on Machine 3.\n- **Job 2**: 10 hours on Machine 0, 10 hours on Machine 1, 8 hours on Machine 2, and 7 hours on Machine 3.\n- **Job 3**: 7 hours on Machine 0, 10 hours on Machine 1, 5 hours on Machine 2, and 8 hours on Machine 3.\n- **Job 4**: 9 hours on Machine 0, 9 hours on Machine 1, 5 hours on Machine 2, and 6 hours on Machine 3.\n- **Job 5**: 6 hours on Machine 0, 9 hours on Machine 1, 6 hours on Machine 2, and 6 hours on Machine 3.\n\nThe facility must adhere to the following constraints:\n\n1. **One Job per Schedule Position**: Each of the six schedule positions (Position 0 through Position 5) must be assigned exactly one job. No two positions can have the same job.\n\n2. **One Schedule Position per Job**: Each job must be assigned to exactly one schedule position. No job can be assigned to multiple positions.\n\n3. **Machine Precedence**: The processing of a job on Machine 1 cannot start until it has completed processing on Machine 0. Similarly, processing on Machine 2 cannot begin until the job has finished on Machine 1, and processing on Machine 3 cannot start until the job has completed on Machine 2.\n\n4. **Job Precedence**: The processing of a job in a later schedule position cannot start on any machine until the job in the previous position has completed its processing on that machine. For example, if Job 0 is in Position 0 and Job 1 is in Position 1, Job 1 cannot start on Machine 0 until Job 0 has finished its processing on Machine 0.\n\nThe objective is to determine the optimal schedule for processing the six jobs across the four machines to minimize the total production time, ensuring that all constraints are satisfied. The total production time is defined as the time when the last job completes its processing on Machine 3, plus any additional processing time required for the last job in the schedule.",
    "answer": 68,
    "ori": "13_optmath_bench",
    "index": 109,
    "description": "A manufacturing facility processes six jobs (Job 0 through Job 5) on four machines (Machine 0 through Machine 3). Each job must be processed on all four machines in sequence, and the facility must determine the optimal schedule to minimize the total production time. Each job has a unique processing time on each machine, as follows:\n\n- **Job 0**: 5 hours on Machine 0, 8 hours on Machine 1, 8 hours on Machine 2, and 5 hours on Machine 3.\n- **Job 1**: 7 hours on Machine 0, 6 hours on Machine 1, 7 hours on Machine 2, and 5 hours on Machine 3.\n- **Job 2**: 10 hours on Machine 0, 10 hours on Machine 1, 8 hours on Machine 2, and 7 hours on Machine 3.\n- **Job 3**: 7 hours on Machine 0, 10 hours on Machine 1, 5 hours on Machine 2, and 8 hours on Machine 3.\n- **Job 4**: 9 hours on Machine 0, 9 hours on Machine 1, 5 hours on Machine 2, and 6 hours on Machine 3.\n- **Job 5**: 6 hours on Machine 0, 9 hours on Machine 1, 6 hours on Machine 2, and 6 hours on Machine 3.\n\nThe facility must adhere to the following constraints:\n\n1. **One Job per Schedule Position**: Each of the six schedule positions (Position 0 through Position 5) must be assigned exactly one job. No two positions can have the same job.\n\n2. **One Schedule Position per Job**: Each job must be assigned to exactly one schedule position. No job can be assigned to multiple positions.\n\n3. **Machine Precedence**: The processing of a job on Machine 1 cannot start until it has completed processing on Machine 0. Similarly, processing on Machine 2 cannot begin until the job has finished on Machine 1, and processing on Machine 3 cannot start until the job has completed on Machine 2.\n\n4. **Job Precedence**: The processing of a job in a later schedule position cannot start on any machine until the job in the previous position has completed its processing on that machine. For example, if Job 0 is in Position 0 and Job 1 is in Position 1, Job 1 cannot start on Machine 0 until Job 0 has finished its processing on Machine 0.\n\nThe objective is to determine the optimal schedule for processing the six jobs across the four machines to minimize the total production time, ensuring that all constraints are satisfied. The total production time is defined as the time when the last job completes its processing on Machine 3, plus any additional processing time required for the last job in the schedule.",
    "ground_truth": 68
  },
  {
    "question": "The problem involves scheduling the landing times of five aircraft to minimize the total penalty costs associated with deviations from their target landing times while ensuring safe separation between landings and adhering to time windows. Each aircraft has a target landing time, earliest and latest possible landing times, and penalty costs for landing early or late. The aircraft details are as follows: Aircraft 0 has a target landing time of 83 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$16 per minute. Aircraft 1 has a target landing time of 79 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$10 per minute. Aircraft 2 has a target landing time of 75 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$13 per minute. Aircraft 3 has a target landing time of 95 minutes, earliest landing time of 65 minutes, latest landing time of 100 minutes, early penalty cost of \\$19 per minute, and late penalty cost of \\$19 per minute. Aircraft 4 has a target landing time of 98 minutes, earliest landing time of 68 minutes, latest landing time of 100 minutes, early penalty cost of \\$14 per minute, and late penalty cost of \\$15 per minute.\n\nTo ensure safety, the following minimum separation times must be maintained between landings: 5 minutes between Aircraft 0 and Aircraft 1, 5 minutes between Aircraft 0 and Aircraft 2, 5 minutes between Aircraft 0 and Aircraft 3, 5 minutes between Aircraft 0 and Aircraft 4, 7 minutes between Aircraft 1 and Aircraft 2, 7 minutes between Aircraft 1 and Aircraft 3, 5 minutes between Aircraft 1 and Aircraft 4, 6 minutes between Aircraft 2 and Aircraft 3, 7 minutes between Aircraft 2 and Aircraft 4, and 5 minutes between Aircraft 3 and Aircraft 4.\n\nThe landing times of each aircraft must fall within their specified earliest and latest possible landing times. The separation constraints must be respected, meaning that the landing times of any two aircraft must maintain the required separation based on their order of landing. The penalty for landing early is calculated as the number of minutes early multiplied by the early penalty cost, and the penalty for landing late is calculated as the number of minutes late multiplied by the late penalty cost. The objective is to determine the landing times for all five aircraft such that the total penalty cost is minimized, and all separation requirements and landing time windows are strictly adhered to. This involves deciding the exact landing time for each aircraft and the order in which they land, ensuring that the schedule is both safe and cost-effective.",
    "answer": 94,
    "ori": "13_optmath_bench",
    "index": 110,
    "description": "The problem involves scheduling the landing times of five aircraft to minimize the total penalty costs associated with deviations from their target landing times while ensuring safe separation between landings and adhering to time windows. Each aircraft has a target landing time, earliest and latest possible landing times, and penalty costs for landing early or late. The aircraft details are as follows: Aircraft 0 has a target landing time of 83 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$16 per minute. Aircraft 1 has a target landing time of 79 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$10 per minute. Aircraft 2 has a target landing time of 75 minutes, earliest landing time of 60 minutes, latest landing time of 100 minutes, early penalty cost of \\$16 per minute, and late penalty cost of \\$13 per minute. Aircraft 3 has a target landing time of 95 minutes, earliest landing time of 65 minutes, latest landing time of 100 minutes, early penalty cost of \\$19 per minute, and late penalty cost of \\$19 per minute. Aircraft 4 has a target landing time of 98 minutes, earliest landing time of 68 minutes, latest landing time of 100 minutes, early penalty cost of \\$14 per minute, and late penalty cost of \\$15 per minute.\n\nTo ensure safety, the following minimum separation times must be maintained between landings: 5 minutes between Aircraft 0 and Aircraft 1, 5 minutes between Aircraft 0 and Aircraft 2, 5 minutes between Aircraft 0 and Aircraft 3, 5 minutes between Aircraft 0 and Aircraft 4, 7 minutes between Aircraft 1 and Aircraft 2, 7 minutes between Aircraft 1 and Aircraft 3, 5 minutes between Aircraft 1 and Aircraft 4, 6 minutes between Aircraft 2 and Aircraft 3, 7 minutes between Aircraft 2 and Aircraft 4, and 5 minutes between Aircraft 3 and Aircraft 4.\n\nThe landing times of each aircraft must fall within their specified earliest and latest possible landing times. The separation constraints must be respected, meaning that the landing times of any two aircraft must maintain the required separation based on their order of landing. The penalty for landing early is calculated as the number of minutes early multiplied by the early penalty cost, and the penalty for landing late is calculated as the number of minutes late multiplied by the late penalty cost. The objective is to determine the landing times for all five aircraft such that the total penalty cost is minimized, and all separation requirements and landing time windows are strictly adhered to. This involves deciding the exact landing time for each aircraft and the order in which they land, ensuring that the schedule is both safe and cost-effective.",
    "ground_truth": 94
  },
  {
    "question": "The problem involves assigning employees to shifts across two restaurants to meet skill demands while minimizing costs. There are 2 restaurants, 6 shifts per restaurant, and 6 employees. Each employee has specific skills and availability for shifts. Employees have preference costs for certain skills, and unfulfilled positions incur a penalty cost of 100 units. The demand for skills varies by restaurant, shift, and skill type. For example, Restaurant 0, Shift 0 requires 2 employees with Skill 0, and Restaurant 1, Shift 0 requires 1 employee with Skill 0. Employees can only be assigned to shifts they are available for and to roles they are skilled in. Each employee can be assigned to at most one shift across all restaurants and skills. The objective is to minimize the total cost, which includes preference costs for employee assignments and penalty costs for unfulfilled positions. Constraints ensure that the total number of employees assigned to a specific skill in a shift, plus any unfulfilled positions, equals the demand for that skill. Employee availability and skill requirements are respected, and each employee is limited to one assignment. The preference costs for assignments are as follows: Employee 0 to Skill 0 costs 1 unit, Employee 1 to Skill 0 costs 2 units, and Employee 3 to Skill 0 costs 3 units. The penalty cost for unfulfilled positions is 100 units per position. The goal is to assign employees to shifts and roles in a way that meets all demands while minimizing the total cost.",
    "answer": 6,
    "ori": "13_optmath_bench",
    "index": 111,
    "description": "The problem involves assigning employees to shifts across two restaurants to meet skill demands while minimizing costs. There are 2 restaurants, 6 shifts per restaurant, and 6 employees. Each employee has specific skills and availability for shifts. Employees have preference costs for certain skills, and unfulfilled positions incur a penalty cost of 100 units. The demand for skills varies by restaurant, shift, and skill type. For example, Restaurant 0, Shift 0 requires 2 employees with Skill 0, and Restaurant 1, Shift 0 requires 1 employee with Skill 0. Employees can only be assigned to shifts they are available for and to roles they are skilled in. Each employee can be assigned to at most one shift across all restaurants and skills. The objective is to minimize the total cost, which includes preference costs for employee assignments and penalty costs for unfulfilled positions. Constraints ensure that the total number of employees assigned to a specific skill in a shift, plus any unfulfilled positions, equals the demand for that skill. Employee availability and skill requirements are respected, and each employee is limited to one assignment. The preference costs for assignments are as follows: Employee 0 to Skill 0 costs 1 unit, Employee 1 to Skill 0 costs 2 units, and Employee 3 to Skill 0 costs 3 units. The penalty cost for unfulfilled positions is 100 units per position. The goal is to assign employees to shifts and roles in a way that meets all demands while minimizing the total cost.",
    "ground_truth": 6
  },
  {
    "question": "You are responsible for managing the distribution of emergency medical supplies across eight cities in a region. Each city has a specific supply of medical resources and a demand that must be met to ensure adequate healthcare coverage. The goal is to minimize the total transportation cost while ensuring that all cities receive the necessary supplies and that no distribution routes exceed their capacity.\n\n### City Supply and Demand:\n- **City 0** has a net demand of 1 unit of medical supplies.\n- **City 1** has a balanced supply and demand (net demand of 0 units).\n- **City 2** has a net supply of 1 unit of medical supplies.\n- **City 3** has a net demand of 2 units of medical supplies.\n- **City 4** has a balanced supply and demand (net demand of 0 units).\n- **City 5** has a balanced supply and demand (net demand of 0 units).\n- **City 6** has a net supply of 2 units of medical supplies.\n- **City 7** has a balanced supply and demand (net demand of 0 units).\n\n### Transportation Costs:\nThe cost of transporting medical supplies between cities varies depending on the route. Below are the transportation costs per unit of supplies:\n\n- **From City 0**: To City 1 costs 3, to City 2 costs 2, to City 3 costs 2, to City 4 costs 2, to City 5 costs 3, to City 6 costs 3, and to City 7 costs 1.\n- **From City 1**: To City 0 costs 1, to City 2 costs 2, to City 3 costs 3, to City 4 costs 1, to City 5 costs 2, to City 6 costs 1, and to City 7 costs 2.\n- **From City 2**: To City 0 costs 2, to City 1 costs 2, to City 3 costs 3, to City 4 costs 3, to City 5 costs 2, to City 6 costs 1, and to City 7 costs 2.\n- **From City 3**: To City 0 costs 1, to City 1 costs 2, to City 2 costs 1, to City 4 costs 3, to City 5 costs 3, to City 6 costs 2, and to City 7 costs 3.\n- **From City 4**: To City 0 costs 3, to City 1 costs 2, to City 2 costs 1, to City 3 costs 1, to City 5 costs 3, to City 6 costs 2, and to City 7 costs 2.\n- **From City 5**: To City 0 costs 1, to City 1 costs 2, to City 2 costs 1, to City 3 costs 2, to City 4 costs 1, to City 6 costs 2, and to City 7 costs 1.\n- **From City 6**: To City 0 costs 2, to City 1 costs 3, to City 2 costs 1, to City 3 costs 1, to City 4 costs 1, to City 5 costs 1, and to City 7 costs 1.\n- **From City 7**: To City 0 costs 1, to City 1 costs 1, to City 2 costs 3, to City 3 costs 1, to City 4 costs 2, to City 5 costs 3, and to City 6 costs 2.\n\n### Route Capacity Constraints:\nEach route between cities has a maximum capacity for transporting medical supplies:\n\n- **From City 0**: To City 1 (7 units), to City 2 (7 units), to City 3 (7 units), to City 4 (7 units), to City 5 (8 units), to City 6 (8 units), and to City 7 (8 units).\n- **From City 1**: To City 0 (8 units), to City 2 (7 units), to City 3 (8 units), to City 4 (8 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (9 units).\n- **From City 2**: To City 0 (8 units), to City 1 (7 units), to City 3 (7 units), to City 4 (7 units), to City 5 (7 units), to City 6 (9 units), and to City 7 (7 units).\n- **From City 3**: To City 0 (7 units), to City 1 (7 units), to City 2 (9 units), to City 4 (8 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (9 units).\n- **From City 4**: To City 0 (9 units), to City 1 (7 units), to City 2 (8 units), to City 3 (9 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (7 units).\n- **From City 5**: To City 0 (7 units), to City 1 (8 units), to City 2 (9 units), to City 3 (9 units), to City 4 (8 units), to City 6 (9 units), and to City 7 (8 units).\n- **From City 6**: To City 0 (9 units), to City 1 (8 units), to City 2 (7 units), to City 3 (8 units), to City 4 (8 units), to City 5 (7 units), and to City 7 (8 units).\n- **From City 7**: To City 0 (9 units), to City 1 (8 units), to City 2 (7 units), to City 3 (9 units), to City 4 (9 units), to City 5 (8 units), and to City 6 (8 units).\n\n### City Capacity Constraints:\nEach city has a maximum capacity for receiving medical supplies:\n\n- **City 0**: Can receive up to 19 units.\n- **City 1**: Can receive up to 15 units.\n- **City 2**: Can receive up to 15 units.\n- **City 3**: Can receive up to 14 units.\n- **City 4**: Can receive up to 15 units.\n- **City 5**: Can receive up to 15 units.\n- **City 6**: Can receive up to 14 units.\n- **City 7**: Can receive up to 16 units.\n\n### Objective:\nYour task is to determine the optimal distribution of medical supplies between the cities to minimize the total transportation cost while ensuring that all cities meet their supply and demand requirements, no route exceeds its capacity, and no city exceeds its receiving capacity.",
    "answer": 6,
    "ori": "13_optmath_bench",
    "index": 112,
    "description": "You are responsible for managing the distribution of emergency medical supplies across eight cities in a region. Each city has a specific supply of medical resources and a demand that must be met to ensure adequate healthcare coverage. The goal is to minimize the total transportation cost while ensuring that all cities receive the necessary supplies and that no distribution routes exceed their capacity.\n\n### City Supply and Demand:\n- **City 0** has a net demand of 1 unit of medical supplies.\n- **City 1** has a balanced supply and demand (net demand of 0 units).\n- **City 2** has a net supply of 1 unit of medical supplies.\n- **City 3** has a net demand of 2 units of medical supplies.\n- **City 4** has a balanced supply and demand (net demand of 0 units).\n- **City 5** has a balanced supply and demand (net demand of 0 units).\n- **City 6** has a net supply of 2 units of medical supplies.\n- **City 7** has a balanced supply and demand (net demand of 0 units).\n\n### Transportation Costs:\nThe cost of transporting medical supplies between cities varies depending on the route. Below are the transportation costs per unit of supplies:\n\n- **From City 0**: To City 1 costs 3, to City 2 costs 2, to City 3 costs 2, to City 4 costs 2, to City 5 costs 3, to City 6 costs 3, and to City 7 costs 1.\n- **From City 1**: To City 0 costs 1, to City 2 costs 2, to City 3 costs 3, to City 4 costs 1, to City 5 costs 2, to City 6 costs 1, and to City 7 costs 2.\n- **From City 2**: To City 0 costs 2, to City 1 costs 2, to City 3 costs 3, to City 4 costs 3, to City 5 costs 2, to City 6 costs 1, and to City 7 costs 2.\n- **From City 3**: To City 0 costs 1, to City 1 costs 2, to City 2 costs 1, to City 4 costs 3, to City 5 costs 3, to City 6 costs 2, and to City 7 costs 3.\n- **From City 4**: To City 0 costs 3, to City 1 costs 2, to City 2 costs 1, to City 3 costs 1, to City 5 costs 3, to City 6 costs 2, and to City 7 costs 2.\n- **From City 5**: To City 0 costs 1, to City 1 costs 2, to City 2 costs 1, to City 3 costs 2, to City 4 costs 1, to City 6 costs 2, and to City 7 costs 1.\n- **From City 6**: To City 0 costs 2, to City 1 costs 3, to City 2 costs 1, to City 3 costs 1, to City 4 costs 1, to City 5 costs 1, and to City 7 costs 1.\n- **From City 7**: To City 0 costs 1, to City 1 costs 1, to City 2 costs 3, to City 3 costs 1, to City 4 costs 2, to City 5 costs 3, and to City 6 costs 2.\n\n### Route Capacity Constraints:\nEach route between cities has a maximum capacity for transporting medical supplies:\n\n- **From City 0**: To City 1 (7 units), to City 2 (7 units), to City 3 (7 units), to City 4 (7 units), to City 5 (8 units), to City 6 (8 units), and to City 7 (8 units).\n- **From City 1**: To City 0 (8 units), to City 2 (7 units), to City 3 (8 units), to City 4 (8 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (9 units).\n- **From City 2**: To City 0 (8 units), to City 1 (7 units), to City 3 (7 units), to City 4 (7 units), to City 5 (7 units), to City 6 (9 units), and to City 7 (7 units).\n- **From City 3**: To City 0 (7 units), to City 1 (7 units), to City 2 (9 units), to City 4 (8 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (9 units).\n- **From City 4**: To City 0 (9 units), to City 1 (7 units), to City 2 (8 units), to City 3 (9 units), to City 5 (7 units), to City 6 (7 units), and to City 7 (7 units).\n- **From City 5**: To City 0 (7 units), to City 1 (8 units), to City 2 (9 units), to City 3 (9 units), to City 4 (8 units), to City 6 (9 units), and to City 7 (8 units).\n- **From City 6**: To City 0 (9 units), to City 1 (8 units), to City 2 (7 units), to City 3 (8 units), to City 4 (8 units), to City 5 (7 units), and to City 7 (8 units).\n- **From City 7**: To City 0 (9 units), to City 1 (8 units), to City 2 (7 units), to City 3 (9 units), to City 4 (9 units), to City 5 (8 units), and to City 6 (8 units).\n\n### City Capacity Constraints:\nEach city has a maximum capacity for receiving medical supplies:\n\n- **City 0**: Can receive up to 19 units.\n- **City 1**: Can receive up to 15 units.\n- **City 2**: Can receive up to 15 units.\n- **City 3**: Can receive up to 14 units.\n- **City 4**: Can receive up to 15 units.\n- **City 5**: Can receive up to 15 units.\n- **City 6**: Can receive up to 14 units.\n- **City 7**: Can receive up to 16 units.\n\n### Objective:\nYour task is to determine the optimal distribution of medical supplies between the cities to minimize the total transportation cost while ensuring that all cities meet their supply and demand requirements, no route exceeds its capacity, and no city exceeds its receiving capacity.",
    "ground_truth": 6
  },
  {
    "question": "Imagine you are managing a power generation system responsible for supplying electricity to a region over five distinct periods. The system consists of three types of power generators, each with unique operational characteristics and costs. Your goal is to determine the optimal number of generators to operate, the amount of power each generator should produce, and when to start up additional generators to meet the region's electricity demand at the lowest possible cost.\n\n#### Key Decisions:\n1. **Number of Generators to Operate**: For each generator type (Type 0, Type 1, Type 2) and each period (Period 0 to Period 4), decide how many generators should be active.\n2. **Power Output**: Determine the amount of power (in MW) each active generator should produce during each period.\n3. **Generator Startups**: Decide whether to start up additional generators in each period, incurring a startup cost.\n\n#### Objective:\nMinimize the total cost of operating the power generation system, which includes:\n- **Base Costs**: Each active generator incurs a fixed cost of 79 units per period, regardless of its power output.\n- **Per-MW Costs**: Each generator also incurs a variable cost based on its power output: 3 units per MW for Type 0, 4 units per MW for Type 1, and 4 units per MW for Type 2.\n- **Startup Costs**: Starting up a generator incurs a one-time cost of 355 units for Type 0 and 349 units for Types 1 and 2.\n\n#### Constraints:\n1. **Demand Satisfaction**: The total power output across all generators must meet or exceed the region's electricity demand in each period. The demands are:\n   - Period 0: 167 MW\n   - Period 1: 212 MW\n   - Period 2: 224 MW\n   - Period 3: 221 MW\n   - Period 4: 189 MW\n\n2. **Generator Capacity Limits**:\n   - Each generator has a minimum and maximum power output:\n     - Type 0: Minimum 35 MW, Maximum 128 MW\n     - Type 1: Minimum 35 MW, Maximum 129 MW\n     - Type 2: Minimum 35 MW, Maximum 125 MW\n   - The power output of each generator must be within these limits based on whether it is active.\n\n3. **Reserve Margin**: To ensure reliability, the total maximum possible power output across all generators must be at least 15% higher than the demand in each period. This translates to:\n   - Period 0: 192.05 MW\n   - Period 1: 243.8 MW\n   - Period 2: 257.6 MW\n   - Period 3: 254.15 MW\n   - Period 4: 217.35 MW\n\n4. **Generator Availability**:\n   - The number of generators that can be active is limited:\n     - Type 0: Maximum 1 generator per period\n     - Type 1: Maximum 4 generators per period\n     - Type 2: Maximum 3 generators per period\n\n5. **Startup Logic**:\n   - If a generator is started in a period, it must have been inactive in the previous period.\n   - For Type 2 generators, up to 2 additional generators can be started in Period 0 without requiring a startup in the previous period.\n\n#### Numerical Parameters:\n- **Base Costs**: 79 units per active generator per period.\n- **Per-MW Costs**: 3 units for Type 0, 4 units for Types 1 and 2.\n- **Startup Costs**: 355 units for Type 0, 349 units for Types 1 and 2.\n- **Demands**: 167 MW (Period 0), 212 MW (Period 1), 224 MW (Period 2), 221 MW (Period 3), 189 MW (Period 4).\n- **Capacity Limits**: \n  - Type 0: 35 MW (min), 128 MW (max)\n  - Type 1: 35 MW (min), 129 MW (max)\n  - Type 2: 35 MW (min), 125 MW (max)\n- **Reserve Margins**: 192.05 MW (Period 0), 243.8 MW (Period 1), 257.6 MW (Period 2), 254.15 MW (Period 3), 217.35 MW (Period 4).\n\nYour task is to determine the optimal combination of active generators, their power outputs, and startup decisions to meet the region's electricity demand at the lowest total cost while adhering to all operational constraints.",
    "answer": 4904,
    "ori": "13_optmath_bench",
    "index": 113,
    "description": "Imagine you are managing a power generation system responsible for supplying electricity to a region over five distinct periods. The system consists of three types of power generators, each with unique operational characteristics and costs. Your goal is to determine the optimal number of generators to operate, the amount of power each generator should produce, and when to start up additional generators to meet the region's electricity demand at the lowest possible cost.\n\n#### Key Decisions:\n1. **Number of Generators to Operate**: For each generator type (Type 0, Type 1, Type 2) and each period (Period 0 to Period 4), decide how many generators should be active.\n2. **Power Output**: Determine the amount of power (in MW) each active generator should produce during each period.\n3. **Generator Startups**: Decide whether to start up additional generators in each period, incurring a startup cost.\n\n#### Objective:\nMinimize the total cost of operating the power generation system, which includes:\n- **Base Costs**: Each active generator incurs a fixed cost of 79 units per period, regardless of its power output.\n- **Per-MW Costs**: Each generator also incurs a variable cost based on its power output: 3 units per MW for Type 0, 4 units per MW for Type 1, and 4 units per MW for Type 2.\n- **Startup Costs**: Starting up a generator incurs a one-time cost of 355 units for Type 0 and 349 units for Types 1 and 2.\n\n#### Constraints:\n1. **Demand Satisfaction**: The total power output across all generators must meet or exceed the region's electricity demand in each period. The demands are:\n   - Period 0: 167 MW\n   - Period 1: 212 MW\n   - Period 2: 224 MW\n   - Period 3: 221 MW\n   - Period 4: 189 MW\n\n2. **Generator Capacity Limits**:\n   - Each generator has a minimum and maximum power output:\n     - Type 0: Minimum 35 MW, Maximum 128 MW\n     - Type 1: Minimum 35 MW, Maximum 129 MW\n     - Type 2: Minimum 35 MW, Maximum 125 MW\n   - The power output of each generator must be within these limits based on whether it is active.\n\n3. **Reserve Margin**: To ensure reliability, the total maximum possible power output across all generators must be at least 15% higher than the demand in each period. This translates to:\n   - Period 0: 192.05 MW\n   - Period 1: 243.8 MW\n   - Period 2: 257.6 MW\n   - Period 3: 254.15 MW\n   - Period 4: 217.35 MW\n\n4. **Generator Availability**:\n   - The number of generators that can be active is limited:\n     - Type 0: Maximum 1 generator per period\n     - Type 1: Maximum 4 generators per period\n     - Type 2: Maximum 3 generators per period\n\n5. **Startup Logic**:\n   - If a generator is started in a period, it must have been inactive in the previous period.\n   - For Type 2 generators, up to 2 additional generators can be started in Period 0 without requiring a startup in the previous period.\n\n#### Numerical Parameters:\n- **Base Costs**: 79 units per active generator per period.\n- **Per-MW Costs**: 3 units for Type 0, 4 units for Types 1 and 2.\n- **Startup Costs**: 355 units for Type 0, 349 units for Types 1 and 2.\n- **Demands**: 167 MW (Period 0), 212 MW (Period 1), 224 MW (Period 2), 221 MW (Period 3), 189 MW (Period 4).\n- **Capacity Limits**: \n  - Type 0: 35 MW (min), 128 MW (max)\n  - Type 1: 35 MW (min), 129 MW (max)\n  - Type 2: 35 MW (min), 125 MW (max)\n- **Reserve Margins**: 192.05 MW (Period 0), 243.8 MW (Period 1), 257.6 MW (Period 2), 254.15 MW (Period 3), 217.35 MW (Period 4).\n\nYour task is to determine the optimal combination of active generators, their power outputs, and startup decisions to meet the region's electricity demand at the lowest total cost while adhering to all operational constraints.",
    "ground_truth": 4904
  },
  {
    "question": "Minimize the total cost, which includes production costs of 143.7514410203047 units per production decision, startup costs of 65.60228476581376 units per machine startup, inventory holding costs of 1.164609943740513 units for Product 0, 1.188814519462053 units for Product 1, and 0.8889238919759239 units for Product 2 per period, and backlogging costs of 6.772870896644705 units for Product 0, 7.291249122946056 units for Product 1, and 6.513011399630116 units for Product 2 per period. The production decisions are binary, indicating whether a product is produced on a specific machine in a given period, and the startup decisions are binary, indicating whether a machine is started up for a specific product in a given period. The production quantities must be non-negative, and the inventory and backlog levels must balance to meet the demand for each product in each period. The demand for Product 0 is 16.86823685495585 units in Period 0, 21.66307881187974 units in Period 1, and 22.77330720589323 units in Period 2. The demand for Product 1 is 23.97615061004427 units in Period 0, 19.60905873481086 units in Period 1, and 23.31252847872402 units in Period 2. The demand for Product 2 is 23.6195969696504 units in Period 0, 18.33370330296734 units in Period 1, and 22.95855759036257 units in Period 2. Each machine has a limited capacity, and the total production on a machine in a given period cannot exceed this capacity. For Machine 0, the capacity constraints are -71.6204295699619 times the production decision plus 6.477399095211152 times the startup decision plus the production quantity must be less than or equal to zero for each product and period. For Machine 1, the capacity constraints are -71.47086166745689 times the production decision plus 6.845777110793686 times the startup decision plus the production quantity must be less than or equal to zero for each product and period. Each machine can only produce one product at a time in a given period, and the production and startup decisions must follow logical constraints to ensure that a machine is only started up if it was not already producing the same product in the previous period. The production and startup decisions are binary, and the production quantities, inventory, and backlog levels must be non-negative.",
    "answer": 914.66,
    "ori": "13_optmath_bench",
    "index": 114,
    "description": "Minimize the total cost, which includes production costs of 143.7514410203047 units per production decision, startup costs of 65.60228476581376 units per machine startup, inventory holding costs of 1.164609943740513 units for Product 0, 1.188814519462053 units for Product 1, and 0.8889238919759239 units for Product 2 per period, and backlogging costs of 6.772870896644705 units for Product 0, 7.291249122946056 units for Product 1, and 6.513011399630116 units for Product 2 per period. The production decisions are binary, indicating whether a product is produced on a specific machine in a given period, and the startup decisions are binary, indicating whether a machine is started up for a specific product in a given period. The production quantities must be non-negative, and the inventory and backlog levels must balance to meet the demand for each product in each period. The demand for Product 0 is 16.86823685495585 units in Period 0, 21.66307881187974 units in Period 1, and 22.77330720589323 units in Period 2. The demand for Product 1 is 23.97615061004427 units in Period 0, 19.60905873481086 units in Period 1, and 23.31252847872402 units in Period 2. The demand for Product 2 is 23.6195969696504 units in Period 0, 18.33370330296734 units in Period 1, and 22.95855759036257 units in Period 2. Each machine has a limited capacity, and the total production on a machine in a given period cannot exceed this capacity. For Machine 0, the capacity constraints are -71.6204295699619 times the production decision plus 6.477399095211152 times the startup decision plus the production quantity must be less than or equal to zero for each product and period. For Machine 1, the capacity constraints are -71.47086166745689 times the production decision plus 6.845777110793686 times the startup decision plus the production quantity must be less than or equal to zero for each product and period. Each machine can only produce one product at a time in a given period, and the production and startup decisions must follow logical constraints to ensure that a machine is only started up if it was not already producing the same product in the previous period. The production and startup decisions are binary, and the production quantities, inventory, and backlog levels must be non-negative.",
    "ground_truth": 914.66
  },
  {
    "question": "In a manufacturing facility, the goal is to schedule the production of seven jobs, each consisting of two operations that must be performed in sequence, to minimize the total production time (makespan). Each operation has a processing time of 1 unit of time. Operations from different jobs may share machines, requiring careful scheduling to avoid overlaps. Binary variables determine the order of operations on shared machines, ensuring that one operation finishes before another starts. A large constant (100,000) is used to enforce this order in the constraints. \n\nThe constraints include precedence constraints within each job, ensuring that the second operation cannot start until the first operation is completed. Machine capacity constraints prevent overlapping operations on shared machines, with specific pairs of operations (e.g., Operation 1 of Job 2 and Operation 0 of Job 4, Operation 1 of Job 2 and Operation 0 of Job 6, etc.) requiring explicit ordering. The makespan is defined as the maximum completion time across all operations, ensuring it is at least as long as the last operation's finish time. All start times for operations must be non-negative, and binary variables are restricted to 0 or 1. \n\nThe objective is to minimize the makespan, ensuring all operations are completed efficiently while respecting machine usage and operation sequencing constraints. The problem involves 26 pairs of operations on shared machines, with binary variables determining their order.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 115,
    "description": "In a manufacturing facility, the goal is to schedule the production of seven jobs, each consisting of two operations that must be performed in sequence, to minimize the total production time (makespan). Each operation has a processing time of 1 unit of time. Operations from different jobs may share machines, requiring careful scheduling to avoid overlaps. Binary variables determine the order of operations on shared machines, ensuring that one operation finishes before another starts. A large constant (100,000) is used to enforce this order in the constraints. \n\nThe constraints include precedence constraints within each job, ensuring that the second operation cannot start until the first operation is completed. Machine capacity constraints prevent overlapping operations on shared machines, with specific pairs of operations (e.g., Operation 1 of Job 2 and Operation 0 of Job 4, Operation 1 of Job 2 and Operation 0 of Job 6, etc.) requiring explicit ordering. The makespan is defined as the maximum completion time across all operations, ensuring it is at least as long as the last operation's finish time. All start times for operations must be non-negative, and binary variables are restricted to 0 or 1. \n\nThe objective is to minimize the makespan, ensuring all operations are completed efficiently while respecting machine usage and operation sequencing constraints. The problem involves 26 pairs of operations on shared machines, with binary variables determining their order.",
    "ground_truth": 5
  },
  {
    "question": "The problem involves scheduling operations for six products, each requiring two operations to be performed in sequence. Each operation is assigned to a specific machine, and the goal is to minimize the total production time (makespan). Each operation has a processing time of 1 unit. The start time of each operation must be determined, and the order of operations on shared machines must be decided to avoid overlaps. Precedence constraints ensure that the second operation of a product cannot start until the first operation is completed. Machine capacity constraints ensure that operations assigned to the same machine do not overlap in time. The makespan must be at least as long as the completion time of the last operation across all products. Binary decision variables determine the order of operations on shared machines, and a large number (100,000) is used in the constraints to enforce this order without overlapping. The objective is to minimize the makespan by determining the start times of all operations and the order of operations on shared machines, ensuring all products are completed as quickly as possible.",
    "answer": 6,
    "ori": "13_optmath_bench",
    "index": 116,
    "description": "The problem involves scheduling operations for six products, each requiring two operations to be performed in sequence. Each operation is assigned to a specific machine, and the goal is to minimize the total production time (makespan). Each operation has a processing time of 1 unit. The start time of each operation must be determined, and the order of operations on shared machines must be decided to avoid overlaps. Precedence constraints ensure that the second operation of a product cannot start until the first operation is completed. Machine capacity constraints ensure that operations assigned to the same machine do not overlap in time. The makespan must be at least as long as the completion time of the last operation across all products. Binary decision variables determine the order of operations on shared machines, and a large number (100,000) is used in the constraints to enforce this order without overlapping. The objective is to minimize the makespan by determining the start times of all operations and the order of operations on shared machines, ensuring all products are completed as quickly as possible.",
    "ground_truth": 6
  },
  {
    "question": "There are 7 jobs, each consisting of 2 operations that must be performed in sequence. Each operation takes exactly 1 unit of time to complete. The operations are assigned to specific machines, and each machine can process only one operation at a time. The goal is to schedule the operations on the machines to minimize the total completion time, known as the makespan, while satisfying all constraints.\n\nFor each job, the second operation cannot start until the first operation is completed. If two operations are assigned to the same machine, they cannot overlap in time. Binary decision variables are used to determine the order of operations on shared machines. If one operation is scheduled before another on the same machine, the corresponding binary variable is set to 1; otherwise, it is set to 0. A large constant (100000) is used in the constraints to ensure that the binary variables correctly enforce the order of operations on shared machines.\n\nThe start time of each operation must be non-negative, and the makespan must be at least as large as the completion time of every operation. The objective is to determine the start times for all operations on their respective machines such that all precedence and machine capacity constraints are satisfied, and the total completion time is minimized.",
    "answer": 5,
    "ori": "13_optmath_bench",
    "index": 117,
    "description": "There are 7 jobs, each consisting of 2 operations that must be performed in sequence. Each operation takes exactly 1 unit of time to complete. The operations are assigned to specific machines, and each machine can process only one operation at a time. The goal is to schedule the operations on the machines to minimize the total completion time, known as the makespan, while satisfying all constraints.\n\nFor each job, the second operation cannot start until the first operation is completed. If two operations are assigned to the same machine, they cannot overlap in time. Binary decision variables are used to determine the order of operations on shared machines. If one operation is scheduled before another on the same machine, the corresponding binary variable is set to 1; otherwise, it is set to 0. A large constant (100000) is used in the constraints to ensure that the binary variables correctly enforce the order of operations on shared machines.\n\nThe start time of each operation must be non-negative, and the makespan must be at least as large as the completion time of every operation. The objective is to determine the start times for all operations on their respective machines such that all precedence and machine capacity constraints are satisfied, and the total completion time is minimized.",
    "ground_truth": 5
  },
  {
    "question": "Determine the production amounts, inventory levels, and setup decisions for two products, Product A and Product B, over a seven-period planning horizon to minimize total costs, including production, setup, and inventory holding costs, while meeting demand and adhering to resource constraints. Production costs vary by period: producing one unit of Product A costs 42 units in Period 0, 44 in Period 1, 40 in Period 2, 43 in Period 3, 45 in Period 4, 45 in Period 5, and 42 in Period 6. Producing one unit of Product B costs 46 units in Period 0, 44 in Period 1, 50 in Period 2, 40 in Period 3, 41 in Period 4, 41 in Period 5, and 43 in Period 6. Setup costs are fixed: setting up production for Product A costs 1032 units in Period 0, 1318 in Period 1, 1002 in Period 2, 1073 in Period 3, 1387 in Period 4, 1491 in Period 5, and 1063 in Period 6. For Product B, setup costs are 1260 units in Period 0, 1418 in Period 1, 1455 in Period 2, 1266 in Period 3, 1095 in Period 4, 1431 in Period 5, and 1420 in Period 6. Inventory holding costs are constant: holding one unit of Product A costs 5 units in all periods except Periods 5 and 6, where it costs 4 units. Holding one unit of Product B costs 5 units in Periods 0, 2, 4, 5, and 6, and 4 units in Periods 1 and 3. \n\nDemand must be satisfied in each period: cumulative demand for Product A is 67 units in Period 0, 160 in Period 1, 213 in Period 2, 309 in Period 3, 376 in Period 4, 464 in Period 5, and 564 in Period 6. For Product B, cumulative demand is 100 units in Period 0, 199 in Period 1, 250 in Period 2, 332 in Period 3, 394 in Period 4, 450 in Period 5, and 516 in Period 6. Resource capacity limits production: in Period 0, the combined production of Product A and Product B cannot exceed 1138 units of resource capacity, with Product A consuming 1.547487551721541 units and Product B consuming 1.91801512951683 units per unit produced. Capacity limits are 1019 units in Period 1, 1166 in Period 2, 1163 in Period 3, 1042 in Period 4, 1098 in Period 5, and 1166 in Period 6. \n\nProduction of a product in a period can only occur if the setup for that product is activated in that period. For Product A, production in Period 0 cannot exceed 564 units if the setup is activated, 497 in Period 1, 404 in Period 2, 351 in Period 3, 255 in Period 4, 188 in Period 5, and 100 in Period 6. For Product B, production in Period 0 cannot exceed 516 units if the setup is activated, 416 in Period 1, 317 in Period 2, 266 in Period 3, 184 in Period 4, 122 in Period 5, and 66 in Period 6. \n\nInitial inventory for both products is zero at the start of Period 0, and all inventory must be depleted by the end of Period 6. Production amounts and inventory levels must be non-negative. The objective is to minimize the total cost, which includes production costs, setup costs, and inventory holding costs, while ensuring all constraints are satisfied.",
    "answer": 56408,
    "ori": "13_optmath_bench",
    "index": 118,
    "description": "Determine the production amounts, inventory levels, and setup decisions for two products, Product A and Product B, over a seven-period planning horizon to minimize total costs, including production, setup, and inventory holding costs, while meeting demand and adhering to resource constraints. Production costs vary by period: producing one unit of Product A costs 42 units in Period 0, 44 in Period 1, 40 in Period 2, 43 in Period 3, 45 in Period 4, 45 in Period 5, and 42 in Period 6. Producing one unit of Product B costs 46 units in Period 0, 44 in Period 1, 50 in Period 2, 40 in Period 3, 41 in Period 4, 41 in Period 5, and 43 in Period 6. Setup costs are fixed: setting up production for Product A costs 1032 units in Period 0, 1318 in Period 1, 1002 in Period 2, 1073 in Period 3, 1387 in Period 4, 1491 in Period 5, and 1063 in Period 6. For Product B, setup costs are 1260 units in Period 0, 1418 in Period 1, 1455 in Period 2, 1266 in Period 3, 1095 in Period 4, 1431 in Period 5, and 1420 in Period 6. Inventory holding costs are constant: holding one unit of Product A costs 5 units in all periods except Periods 5 and 6, where it costs 4 units. Holding one unit of Product B costs 5 units in Periods 0, 2, 4, 5, and 6, and 4 units in Periods 1 and 3. \n\nDemand must be satisfied in each period: cumulative demand for Product A is 67 units in Period 0, 160 in Period 1, 213 in Period 2, 309 in Period 3, 376 in Period 4, 464 in Period 5, and 564 in Period 6. For Product B, cumulative demand is 100 units in Period 0, 199 in Period 1, 250 in Period 2, 332 in Period 3, 394 in Period 4, 450 in Period 5, and 516 in Period 6. Resource capacity limits production: in Period 0, the combined production of Product A and Product B cannot exceed 1138 units of resource capacity, with Product A consuming 1.547487551721541 units and Product B consuming 1.91801512951683 units per unit produced. Capacity limits are 1019 units in Period 1, 1166 in Period 2, 1163 in Period 3, 1042 in Period 4, 1098 in Period 5, and 1166 in Period 6. \n\nProduction of a product in a period can only occur if the setup for that product is activated in that period. For Product A, production in Period 0 cannot exceed 564 units if the setup is activated, 497 in Period 1, 404 in Period 2, 351 in Period 3, 255 in Period 4, 188 in Period 5, and 100 in Period 6. For Product B, production in Period 0 cannot exceed 516 units if the setup is activated, 416 in Period 1, 317 in Period 2, 266 in Period 3, 184 in Period 4, 122 in Period 5, and 66 in Period 6. \n\nInitial inventory for both products is zero at the start of Period 0, and all inventory must be depleted by the end of Period 6. Production amounts and inventory levels must be non-negative. The objective is to minimize the total cost, which includes production costs, setup costs, and inventory holding costs, while ensuring all constraints are satisfied.",
    "ground_truth": 56408
  },
  {
    "question": " Inventory Management for a Retail Supply Chain\n\nYou are responsible for managing the inventory and ordering process for a retail supply chain over a 21-week period. The goal is to minimize the total costs associated with ordering and holding inventory while ensuring that customer demand is met each week. The costs include ordering costs, unit purchase costs, and inventory holding costs. Additionally, there are specific constraints on inventory levels and ordering decisions.\n\n#### Key Decisions:\n1. **Ordering Decisions**: Each week, you must decide whether to place an order (a binary decision) and, if so, how much to order. Placing an order incurs a fixed cost, and the amount ordered cannot exceed a certain limit based on the total demand over the 21-week period.\n2. **Inventory Levels**: You must manage the ending inventory each week, ensuring that it meets the flow balance constraints (i.e., the inventory carried over from the previous week plus the amount ordered equals the ending inventory plus the demand for that week).\n\n#### Objective:\nMinimize the total cost, which includes:\n- **Ordering Costs**: Fixed costs for placing an order in a given week. These costs vary by week and are as follows: 459 in week 1, 555 in week 2, 547 in week 3, 530 in week 4, 436 in week 5, 401 in week 6, 490 in week 7, 462 in week 8, 479 in week 9, 563 in week 10, 456 in week 11, 442 in week 12, 530 in week 13, 427 in week 14, 512 in week 15, 574 in week 16, 430 in week 17, 424 in week 18, 484 in week 19, 507 in week 20, and 446 in week 21.\n- **Unit Purchase Costs**: Variable costs for each unit ordered. These costs also vary by week and are as follows: 49 in week 1, 48 in week 2, 55 in week 3, 44 in week 4, 51 in week 5, 48 in week 6, 53 in week 7, 43 in week 8, 42 in week 9, 52 in week 10, 45 in week 11, 42 in week 12, 43 in week 13, 42 in week 14, 59 in week 15, 57 in week 16, 57 in week 17, 44 in week 18, 57 in week 19, 60 in week 20, and 43 in week 21.\n- **Holding Costs**: Costs for holding inventory at the end of each week. These costs are as follows: 23 in week 1, 28 in week 2, 28 in week 3, 25 in week 4, 30 in week 5, 25 in week 6, 28 in week 7, 22 in week 8, 30 in week 9, 30 in week 10, 23 in week 11, 28 in week 12, 27 in week 13, 22 in week 14, 22 in week 15, 23 in week 16, 20 in week 17, 28 in week 18, 30 in week 19, 30 in week 20, and 24 in week 21.\n\n#### Constraints:\n1. **Flow Balance**: The ending inventory for each week must satisfy the following relationship:\n   - Ending inventory from the previous week + amount ordered = ending inventory for the current week + demand for the current week.\n   - The demand for each week is as follows: 150 in week 1, 132 in week 2, 135 in week 3, 178 in week 4, 133 in week 5, 173 in week 6, 161 in week 7, 195 in week 8, 110 in week 9, 118 in week 10, 131 in week 11, 198 in week 12, 118 in week 13, 120 in week 14, 129 in week 15, 148 in week 16, 189 in week 17, 178 in week 18, 145 in week 19, 161 in week 20, and 155 in week 21.\n\n2. **Ordering Limits**: The amount ordered in any week cannot exceed the total demand over the 21-week period (3157 units) if an order is placed. If no order is placed, the amount ordered must be zero.\n\n3. **Starting and Ending Inventory**: The starting inventory at the beginning of week 1 is zero, and the ending inventory at the end of week 21 must also be zero.\n\n#### Goal:\nYour task is to determine the optimal ordering and inventory management plan that minimizes the total cost while meeting all constraints. This includes deciding when to place orders, how much to order each week, and how much inventory to carry over each week to meet demand without exceeding the budget or violating any constraints.",
    "answer": 165425,
    "ori": "13_optmath_bench",
    "index": 119,
    "description": " Inventory Management for a Retail Supply Chain\n\nYou are responsible for managing the inventory and ordering process for a retail supply chain over a 21-week period. The goal is to minimize the total costs associated with ordering and holding inventory while ensuring that customer demand is met each week. The costs include ordering costs, unit purchase costs, and inventory holding costs. Additionally, there are specific constraints on inventory levels and ordering decisions.\n\n#### Key Decisions:\n1. **Ordering Decisions**: Each week, you must decide whether to place an order (a binary decision) and, if so, how much to order. Placing an order incurs a fixed cost, and the amount ordered cannot exceed a certain limit based on the total demand over the 21-week period.\n2. **Inventory Levels**: You must manage the ending inventory each week, ensuring that it meets the flow balance constraints (i.e., the inventory carried over from the previous week plus the amount ordered equals the ending inventory plus the demand for that week).\n\n#### Objective:\nMinimize the total cost, which includes:\n- **Ordering Costs**: Fixed costs for placing an order in a given week. These costs vary by week and are as follows: 459 in week 1, 555 in week 2, 547 in week 3, 530 in week 4, 436 in week 5, 401 in week 6, 490 in week 7, 462 in week 8, 479 in week 9, 563 in week 10, 456 in week 11, 442 in week 12, 530 in week 13, 427 in week 14, 512 in week 15, 574 in week 16, 430 in week 17, 424 in week 18, 484 in week 19, 507 in week 20, and 446 in week 21.\n- **Unit Purchase Costs**: Variable costs for each unit ordered. These costs also vary by week and are as follows: 49 in week 1, 48 in week 2, 55 in week 3, 44 in week 4, 51 in week 5, 48 in week 6, 53 in week 7, 43 in week 8, 42 in week 9, 52 in week 10, 45 in week 11, 42 in week 12, 43 in week 13, 42 in week 14, 59 in week 15, 57 in week 16, 57 in week 17, 44 in week 18, 57 in week 19, 60 in week 20, and 43 in week 21.\n- **Holding Costs**: Costs for holding inventory at the end of each week. These costs are as follows: 23 in week 1, 28 in week 2, 28 in week 3, 25 in week 4, 30 in week 5, 25 in week 6, 28 in week 7, 22 in week 8, 30 in week 9, 30 in week 10, 23 in week 11, 28 in week 12, 27 in week 13, 22 in week 14, 22 in week 15, 23 in week 16, 20 in week 17, 28 in week 18, 30 in week 19, 30 in week 20, and 24 in week 21.\n\n#### Constraints:\n1. **Flow Balance**: The ending inventory for each week must satisfy the following relationship:\n   - Ending inventory from the previous week + amount ordered = ending inventory for the current week + demand for the current week.\n   - The demand for each week is as follows: 150 in week 1, 132 in week 2, 135 in week 3, 178 in week 4, 133 in week 5, 173 in week 6, 161 in week 7, 195 in week 8, 110 in week 9, 118 in week 10, 131 in week 11, 198 in week 12, 118 in week 13, 120 in week 14, 129 in week 15, 148 in week 16, 189 in week 17, 178 in week 18, 145 in week 19, 161 in week 20, and 155 in week 21.\n\n2. **Ordering Limits**: The amount ordered in any week cannot exceed the total demand over the 21-week period (3157 units) if an order is placed. If no order is placed, the amount ordered must be zero.\n\n3. **Starting and Ending Inventory**: The starting inventory at the beginning of week 1 is zero, and the ending inventory at the end of week 21 must also be zero.\n\n#### Goal:\nYour task is to determine the optimal ordering and inventory management plan that minimizes the total cost while meeting all constraints. This includes deciding when to place orders, how much to order each week, and how much inventory to carry over each week to meet demand without exceeding the budget or violating any constraints.",
    "ground_truth": 165425
  },
  {
    "question": "You are tasked with managing the distribution of resources across eight interconnected cities to ensure each city meets its specific demand while minimizing the total transportation cost. Each city has a unique supply of resources, a specific demand, and a limited capacity to handle incoming shipments. Additionally, the transportation links between cities have varying costs and capacity constraints.\n\nCity 0 has a net outflow of 5 units, meaning it is a supply node, and it can handle up to 13 units of incoming shipments. City 1 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 14 units of incoming shipments. City 2 is balanced, with no net demand or surplus, and can handle up to 17 units of incoming shipments. City 3 is also balanced, with no net demand or surplus, and can handle up to 12 units of incoming shipments. City 4 has a net outflow of 1 unit, meaning it is a supply node, and it can handle up to 16 units of incoming shipments. City 5 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 19 units of incoming shipments. City 6 is balanced, with no net demand or surplus, and can handle up to 16 units of incoming shipments. City 7 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 14 units of incoming shipments.\n\nThe cost of transporting resources between cities varies, and each transportation link has a maximum capacity. From City 0: To City 1: Cost = 2, Capacity = 8; To City 2: Cost = 2, Capacity = 7; To City 3: Cost = 2, Capacity = 7; To City 4: Cost = 2, Capacity = 9; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 1, Capacity = 9; To City 7: Cost = 2, Capacity = 7. From City 1: To City 0: Cost = 1, Capacity = 8; To City 2: Cost = 1, Capacity = 8; To City 3: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 8; To City 5: Cost = 1, Capacity = 7; To City 6: Cost = 3, Capacity = 9; To City 7: Cost = 1, Capacity = 9. From City 2: To City 0: Cost = 1, Capacity = 8; To City 1: Cost = 2, Capacity = 9; To City 3: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 9; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 3, Capacity = 8; To City 7: Cost = 1, Capacity = 8. From City 3: To City 0: Cost = 3, Capacity = 7; To City 1: Cost = 3, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 7; To City 5: Cost = 3, Capacity = 7; To City 6: Cost = 2, Capacity = 9; To City 7: Cost = 3, Capacity = 9. From City 4: To City 0: Cost = 2, Capacity = 9; To City 1: Cost = 3, Capacity = 8; To City 2: Cost = 3, Capacity = 8; To City 3: Cost = 1, Capacity = 8; To City 5: Cost = 1, Capacity = 7; To City 6: Cost = 3, Capacity = 8; To City 7: Cost = 2, Capacity = 9. From City 5: To City 0: Cost = 1, Capacity = 7; To City 1: Cost = 3, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 3: Cost = 3, Capacity = 9; To City 4: Cost = 2, Capacity = 8; To City 6: Cost = 2, Capacity = 9; To City 7: Cost = 3, Capacity = 8. From City 6: To City 0: Cost = 2, Capacity = 8; To City 1: Cost = 2, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 3: Cost = 2, Capacity = 7; To City 4: Cost = 1, Capacity = 9; To City 5: Cost = 1, Capacity = 8; To City 7: Cost = 3, Capacity = 7. From City 7: To City 0: Cost = 2, Capacity = 8; To City 1: Cost = 2, Capacity = 8; To City 2: Cost = 2, Capacity = 7; To City 3: Cost = 3, Capacity = 9; To City 4: Cost = 1, Capacity = 7; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 3, Capacity = 7.\n\nYour goal is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that each city's net resource flow matches its demand or surplus, no transportation link exceeds its capacity, and no city exceeds its capacity to handle incoming shipments.",
    "answer": 11,
    "ori": "13_optmath_bench",
    "index": 120,
    "description": "You are tasked with managing the distribution of resources across eight interconnected cities to ensure each city meets its specific demand while minimizing the total transportation cost. Each city has a unique supply of resources, a specific demand, and a limited capacity to handle incoming shipments. Additionally, the transportation links between cities have varying costs and capacity constraints.\n\nCity 0 has a net outflow of 5 units, meaning it is a supply node, and it can handle up to 13 units of incoming shipments. City 1 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 14 units of incoming shipments. City 2 is balanced, with no net demand or surplus, and can handle up to 17 units of incoming shipments. City 3 is also balanced, with no net demand or surplus, and can handle up to 12 units of incoming shipments. City 4 has a net outflow of 1 unit, meaning it is a supply node, and it can handle up to 16 units of incoming shipments. City 5 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 19 units of incoming shipments. City 6 is balanced, with no net demand or surplus, and can handle up to 16 units of incoming shipments. City 7 has a net inflow of 2 units, meaning it is a demand node, and it can accommodate up to 14 units of incoming shipments.\n\nThe cost of transporting resources between cities varies, and each transportation link has a maximum capacity. From City 0: To City 1: Cost = 2, Capacity = 8; To City 2: Cost = 2, Capacity = 7; To City 3: Cost = 2, Capacity = 7; To City 4: Cost = 2, Capacity = 9; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 1, Capacity = 9; To City 7: Cost = 2, Capacity = 7. From City 1: To City 0: Cost = 1, Capacity = 8; To City 2: Cost = 1, Capacity = 8; To City 3: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 8; To City 5: Cost = 1, Capacity = 7; To City 6: Cost = 3, Capacity = 9; To City 7: Cost = 1, Capacity = 9. From City 2: To City 0: Cost = 1, Capacity = 8; To City 1: Cost = 2, Capacity = 9; To City 3: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 9; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 3, Capacity = 8; To City 7: Cost = 1, Capacity = 8. From City 3: To City 0: Cost = 3, Capacity = 7; To City 1: Cost = 3, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 4: Cost = 2, Capacity = 7; To City 5: Cost = 3, Capacity = 7; To City 6: Cost = 2, Capacity = 9; To City 7: Cost = 3, Capacity = 9. From City 4: To City 0: Cost = 2, Capacity = 9; To City 1: Cost = 3, Capacity = 8; To City 2: Cost = 3, Capacity = 8; To City 3: Cost = 1, Capacity = 8; To City 5: Cost = 1, Capacity = 7; To City 6: Cost = 3, Capacity = 8; To City 7: Cost = 2, Capacity = 9. From City 5: To City 0: Cost = 1, Capacity = 7; To City 1: Cost = 3, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 3: Cost = 3, Capacity = 9; To City 4: Cost = 2, Capacity = 8; To City 6: Cost = 2, Capacity = 9; To City 7: Cost = 3, Capacity = 8. From City 6: To City 0: Cost = 2, Capacity = 8; To City 1: Cost = 2, Capacity = 7; To City 2: Cost = 3, Capacity = 7; To City 3: Cost = 2, Capacity = 7; To City 4: Cost = 1, Capacity = 9; To City 5: Cost = 1, Capacity = 8; To City 7: Cost = 3, Capacity = 7. From City 7: To City 0: Cost = 2, Capacity = 8; To City 1: Cost = 2, Capacity = 8; To City 2: Cost = 2, Capacity = 7; To City 3: Cost = 3, Capacity = 9; To City 4: Cost = 1, Capacity = 7; To City 5: Cost = 2, Capacity = 8; To City 6: Cost = 3, Capacity = 7.\n\nYour goal is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that each city's net resource flow matches its demand or surplus, no transportation link exceeds its capacity, and no city exceeds its capacity to handle incoming shipments.",
    "ground_truth": 11
  },
  {
    "question": "The problem involves scheduling operations for five jobs (Job 0 through Job 4) in a manufacturing facility, where each job consists of two operations that must be performed in sequence. Each operation takes exactly 1 unit of time to complete. The facility has a limited number of machines, and multiple operations from different jobs may need to be assigned to the same machine. A machine can only handle one operation at a time, so the order of operations on shared machines must be determined to avoid overlaps. \n\nThe goal is to minimize the total completion time, known as the makespan, which is the time at which the last operation across all jobs finishes. To achieve this, the start times of all operations must be scheduled such that: (1) for each job, the second operation starts only after the first operation is completed; (2) if two operations are assigned to the same machine, one must finish before the other starts; and (3) the makespan is at least as large as the completion time of every operation. \n\nThe order of operations on shared machines is determined using binary decision variables, which indicate whether one operation is scheduled before another. A large constant (100000) is used in the constraints to enforce the sequencing of operations on shared machines. The start times of operations and the makespan are continuous variables, while the binary variables are restricted to values of 0 or 1. The objective is to minimize the makespan, ensuring all jobs are completed as quickly as possible.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 121,
    "description": "The problem involves scheduling operations for five jobs (Job 0 through Job 4) in a manufacturing facility, where each job consists of two operations that must be performed in sequence. Each operation takes exactly 1 unit of time to complete. The facility has a limited number of machines, and multiple operations from different jobs may need to be assigned to the same machine. A machine can only handle one operation at a time, so the order of operations on shared machines must be determined to avoid overlaps. \n\nThe goal is to minimize the total completion time, known as the makespan, which is the time at which the last operation across all jobs finishes. To achieve this, the start times of all operations must be scheduled such that: (1) for each job, the second operation starts only after the first operation is completed; (2) if two operations are assigned to the same machine, one must finish before the other starts; and (3) the makespan is at least as large as the completion time of every operation. \n\nThe order of operations on shared machines is determined using binary decision variables, which indicate whether one operation is scheduled before another. A large constant (100000) is used in the constraints to enforce the sequencing of operations on shared machines. The start times of operations and the makespan are continuous variables, while the binary variables are restricted to values of 0 or 1. The objective is to minimize the makespan, ensuring all jobs are completed as quickly as possible.",
    "ground_truth": 4
  },
  {
    "question": "There are 2 restaurants, 7 employees, and 2 shifts per day. Each shift requires employees with specific skills, and each employee has a set of skills they are qualified to perform. Employees have preferences for certain skills, and assigning them to tasks they prefer incurs lower costs. The cost of leaving a position unfulfilled is significantly higher, so the goal is to minimize both the preference costs and the number of unfulfilled positions.\n\nRestaurant 0, Shift 0, Skill 0 requires 1 employee. Restaurant 0, Shift 1, Skill 0 requires 1 employee. Restaurant 1, Shift 0, Skill 0 requires 2 employees. Restaurant 1, Shift 1, Skill 0 requires 1 employee.\n\nEmployees have varying availability for shifts. For example, Employee 0 is available for Shift 0 but not for Shift 1. Employee 1 is unavailable for Shift 1. Employee 3 is unavailable for Shift 0. Each employee is qualified for specific skills. For instance, Employee 0 is qualified for Skill 0, while Employee 3 is not qualified for Skill 0.\n\nAssigning employees to tasks they prefer incurs lower costs. For example, assigning Employee 0 to Skill 0 costs 1 unit, and assigning Employee 1 to Skill 0 costs 2 units. Each unfulfilled position costs 100 units, which is significantly higher than preference costs.\n\nThe goal is to assign employees to specific shifts and restaurants based on their skills and availability while determining the number of unfulfilled positions for each shift and restaurant. The total cost to minimize includes the cost of assigning employees to tasks they prefer and the penalty cost for unfulfilled positions.\n\nThe total number of employees assigned to a shift at a restaurant, plus any unfulfilled positions, must equal the demand for that shift and skill. Employees can only be assigned to shifts they are available for and tasks they are qualified for. Each employee can be assigned to at most one shift across all restaurants and skills.\n\nPreference costs for assignments range from 1 to 3 units. The cost of an unfulfilled position is 100 units. Specific demands and constraints are as outlined above.",
    "answer": 9,
    "ori": "13_optmath_bench",
    "index": 122,
    "description": "There are 2 restaurants, 7 employees, and 2 shifts per day. Each shift requires employees with specific skills, and each employee has a set of skills they are qualified to perform. Employees have preferences for certain skills, and assigning them to tasks they prefer incurs lower costs. The cost of leaving a position unfulfilled is significantly higher, so the goal is to minimize both the preference costs and the number of unfulfilled positions.\n\nRestaurant 0, Shift 0, Skill 0 requires 1 employee. Restaurant 0, Shift 1, Skill 0 requires 1 employee. Restaurant 1, Shift 0, Skill 0 requires 2 employees. Restaurant 1, Shift 1, Skill 0 requires 1 employee.\n\nEmployees have varying availability for shifts. For example, Employee 0 is available for Shift 0 but not for Shift 1. Employee 1 is unavailable for Shift 1. Employee 3 is unavailable for Shift 0. Each employee is qualified for specific skills. For instance, Employee 0 is qualified for Skill 0, while Employee 3 is not qualified for Skill 0.\n\nAssigning employees to tasks they prefer incurs lower costs. For example, assigning Employee 0 to Skill 0 costs 1 unit, and assigning Employee 1 to Skill 0 costs 2 units. Each unfulfilled position costs 100 units, which is significantly higher than preference costs.\n\nThe goal is to assign employees to specific shifts and restaurants based on their skills and availability while determining the number of unfulfilled positions for each shift and restaurant. The total cost to minimize includes the cost of assigning employees to tasks they prefer and the penalty cost for unfulfilled positions.\n\nThe total number of employees assigned to a shift at a restaurant, plus any unfulfilled positions, must equal the demand for that shift and skill. Employees can only be assigned to shifts they are available for and tasks they are qualified for. Each employee can be assigned to at most one shift across all restaurants and skills.\n\nPreference costs for assignments range from 1 to 3 units. The cost of an unfulfilled position is 100 units. Specific demands and constraints are as outlined above.",
    "ground_truth": 9
  },
  {
    "question": "Minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand and adhering to machine capacity constraints. The setup cost is 136.3292413778485 units per production run, and the startup cost is 72.14543590644504 units per machine startup. The inventory holding cost for Product 0 is 1.097996170356003 units per unit per period, and for Product 1, it is 0.9303010222262446 units per unit per period. The backlogging cost for Product 0 is 7.343834540408109 units per unit per period, and for Product 1, it is 6.589388559571906 units per unit per period.\n\nThe production system must meet the following demand constraints: for Product 0, the demand is 17.38664149749027 units in Period 0, 18.25024949764659 units in Period 1, and 20.01141977261751 units in Period 2. For Product 1, the demand is 17.8541958922009 units in Period 0, 16.38473840141418 units in Period 1, and 15.49890198357548 units in Period 2.\n\nMachine 0 can handle up to 77.29936140903678 units of production in Period 0, adjusted for startup time, while Machine 1 can handle up to 74.94692092032173 units in the same period. Only one product can be produced on a machine in a given time period. If a machine was not producing in the previous period but is producing in the current period, a startup cost is incurred. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions are binary (0 or 1).\n\nThe objective is to determine the optimal production schedule, machine startups, inventory levels, and backlogs to minimize total costs while meeting all operational constraints.",
    "answer": 525.01,
    "ori": "13_optmath_bench",
    "index": 123,
    "description": "Minimize the total operational costs, which include production setup costs, machine startup costs, inventory holding costs, and backlogging costs, while meeting customer demand and adhering to machine capacity constraints. The setup cost is 136.3292413778485 units per production run, and the startup cost is 72.14543590644504 units per machine startup. The inventory holding cost for Product 0 is 1.097996170356003 units per unit per period, and for Product 1, it is 0.9303010222262446 units per unit per period. The backlogging cost for Product 0 is 7.343834540408109 units per unit per period, and for Product 1, it is 6.589388559571906 units per unit per period.\n\nThe production system must meet the following demand constraints: for Product 0, the demand is 17.38664149749027 units in Period 0, 18.25024949764659 units in Period 1, and 20.01141977261751 units in Period 2. For Product 1, the demand is 17.8541958922009 units in Period 0, 16.38473840141418 units in Period 1, and 15.49890198357548 units in Period 2.\n\nMachine 0 can handle up to 77.29936140903678 units of production in Period 0, adjusted for startup time, while Machine 1 can handle up to 74.94692092032173 units in the same period. Only one product can be produced on a machine in a given time period. If a machine was not producing in the previous period but is producing in the current period, a startup cost is incurred. Production quantities, inventory levels, and backlogs must be non-negative, and production and startup decisions are binary (0 or 1).\n\nThe objective is to determine the optimal production schedule, machine startups, inventory levels, and backlogs to minimize total costs while meeting all operational constraints.",
    "ground_truth": 525.01
  },
  {
    "question": "Minimize the total operational cost, which includes the base cost of operating generators, the cost of power output, and the startup cost of generators. The base cost for operating a Type 0 generator is 79 units per period, Type 1 is 80 units, and Type 2 is 78 units. The cost of power output is 4 units per MW for Type 0, 3 units per MW for Type 1, and 4 units per MW for Type 2. The startup cost is 349 units for Type 0, 354 units for Type 1, and 354 units for Type 2. The total power output from all generators must meet or exceed the demand in each period: 176 MW in Period 0, 160 MW in Period 1, 178 MW in Period 2, 210 MW in Period 3, and 171 MW in Period 4. Each generator type has minimum and maximum output limits: Type 0 generators must produce at least 34 MW and no more than 130 MW, Type 1 generators must produce at least 34 MW and no more than 130 MW, and Type 2 generators must produce at least 35 MW and no more than 128 MW. The total maximum possible output from all generators must be at least 202.4 MW in Period 0, 184 MW in Period 1, 204.7 MW in Period 2, 241.5 MW in Period 3, and 196.65 MW in Period 4. The number of generators that can be operated is limited by the available units: up to 2 Type 0 generators, up to 5 Type 1 generators, and up to 1 Type 2 generator in each period. The number of generators started in a period cannot exceed the number of generators that were not operating in the previous period. The solution must determine the optimal number of generators to operate, the power output from each generator, and the number of generators to start in each period to minimize the total operational cost while meeting the power demand and adhering to all operational constraints.",
    "answer": 4193,
    "ori": "13_optmath_bench",
    "index": 124,
    "description": "Minimize the total operational cost, which includes the base cost of operating generators, the cost of power output, and the startup cost of generators. The base cost for operating a Type 0 generator is 79 units per period, Type 1 is 80 units, and Type 2 is 78 units. The cost of power output is 4 units per MW for Type 0, 3 units per MW for Type 1, and 4 units per MW for Type 2. The startup cost is 349 units for Type 0, 354 units for Type 1, and 354 units for Type 2. The total power output from all generators must meet or exceed the demand in each period: 176 MW in Period 0, 160 MW in Period 1, 178 MW in Period 2, 210 MW in Period 3, and 171 MW in Period 4. Each generator type has minimum and maximum output limits: Type 0 generators must produce at least 34 MW and no more than 130 MW, Type 1 generators must produce at least 34 MW and no more than 130 MW, and Type 2 generators must produce at least 35 MW and no more than 128 MW. The total maximum possible output from all generators must be at least 202.4 MW in Period 0, 184 MW in Period 1, 204.7 MW in Period 2, 241.5 MW in Period 3, and 196.65 MW in Period 4. The number of generators that can be operated is limited by the available units: up to 2 Type 0 generators, up to 5 Type 1 generators, and up to 1 Type 2 generator in each period. The number of generators started in a period cannot exceed the number of generators that were not operating in the previous period. The solution must determine the optimal number of generators to operate, the power output from each generator, and the number of generators to start in each period to minimize the total operational cost while meeting the power demand and adhering to all operational constraints.",
    "ground_truth": 4193
  },
  {
    "question": "You are tasked with planning the most efficient delivery route for a logistics company that serves seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total transportation cost while ensuring that each city is visited exactly once and that the delivery route forms a complete tour without any subtours. The delivery vehicle must return to the starting city after visiting all others.\n\nThe cost of traveling between each pair of cities varies. From City 0: to City 1 costs 277, to City 2 costs 304, to City 3 costs 280, to City 4 costs 321, to City 5 costs 285, and to City 6 costs 300. From City 1: to City 0 costs 280, to City 2 costs 317, to City 3 costs 301, to City 4 costs 306, to City 5 costs 312, and to City 6 costs 290. From City 2: to City 0 costs 304, to City 1 costs 318, to City 3 costs 283, to City 4 costs 289, to City 5 costs 301, and to City 6 costs 277. From City 3: to City 0 costs 304, to City 1 costs 282, to City 2 costs 290, to City 4 costs 307, to City 5 costs 291, and to City 6 costs 290. From City 4: to City 0 costs 322, to City 1 costs 291, to City 2 costs 277, to City 3 costs 300, to City 5 costs 318, and to City 6 costs 280. From City 5: to City 0 costs 308, to City 1 costs 297, to City 2 costs 288, to City 3 costs 314, to City 4 costs 290, and to City 6 costs 320. From City 6: to City 0 costs 316, to City 1 costs 313, to City 2 costs 301, to City 3 costs 324, to City 4 costs 280, and to City 5 costs 303.\n\nEach city must be visited exactly once. The delivery vehicle must arrive at each city from exactly one other city and depart to exactly one other city. The delivery route must form a single tour, meaning the vehicle cannot split into smaller loops or subtours. To enforce this, each city is assigned a position in the tour, with positions ranging from 1 to 7, ensuring a valid sequence. The positions must follow a logical sequence without gaps or repetitions. The route between any two cities is binary: it is either included (1) or excluded (0) in the final tour.\n\nThe objective is to minimize the total transportation cost for the delivery route while satisfying all constraints. The solution must account for all the costs and constraints outlined above.",
    "answer": 1987,
    "ori": "13_optmath_bench",
    "index": 125,
    "description": "You are tasked with planning the most efficient delivery route for a logistics company that serves seven cities: City 0, City 1, City 2, City 3, City 4, City 5, and City 6. The goal is to minimize the total transportation cost while ensuring that each city is visited exactly once and that the delivery route forms a complete tour without any subtours. The delivery vehicle must return to the starting city after visiting all others.\n\nThe cost of traveling between each pair of cities varies. From City 0: to City 1 costs 277, to City 2 costs 304, to City 3 costs 280, to City 4 costs 321, to City 5 costs 285, and to City 6 costs 300. From City 1: to City 0 costs 280, to City 2 costs 317, to City 3 costs 301, to City 4 costs 306, to City 5 costs 312, and to City 6 costs 290. From City 2: to City 0 costs 304, to City 1 costs 318, to City 3 costs 283, to City 4 costs 289, to City 5 costs 301, and to City 6 costs 277. From City 3: to City 0 costs 304, to City 1 costs 282, to City 2 costs 290, to City 4 costs 307, to City 5 costs 291, and to City 6 costs 290. From City 4: to City 0 costs 322, to City 1 costs 291, to City 2 costs 277, to City 3 costs 300, to City 5 costs 318, and to City 6 costs 280. From City 5: to City 0 costs 308, to City 1 costs 297, to City 2 costs 288, to City 3 costs 314, to City 4 costs 290, and to City 6 costs 320. From City 6: to City 0 costs 316, to City 1 costs 313, to City 2 costs 301, to City 3 costs 324, to City 4 costs 280, and to City 5 costs 303.\n\nEach city must be visited exactly once. The delivery vehicle must arrive at each city from exactly one other city and depart to exactly one other city. The delivery route must form a single tour, meaning the vehicle cannot split into smaller loops or subtours. To enforce this, each city is assigned a position in the tour, with positions ranging from 1 to 7, ensuring a valid sequence. The positions must follow a logical sequence without gaps or repetitions. The route between any two cities is binary: it is either included (1) or excluded (0) in the final tour.\n\nThe objective is to minimize the total transportation cost for the delivery route while satisfying all constraints. The solution must account for all the costs and constraints outlined above.",
    "ground_truth": 1987
  },
  {
    "question": "You are tasked with optimizing the placement of emergency response centers across a network of five critical locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall coverage and effectiveness of the response system. Each location has unique characteristics, and the goal is to select exactly three locations to establish these centers. The effectiveness of the system is measured by the combined coverage scores between the selected centers, which are determined by predefined pairwise scores representing the strategic importance of connecting each pair of locations.\n\n#### Key Decisions:\n1. **Selecting Locations**: You must choose exactly three out of the five locations to establish emergency response centers. Each location is represented by a binary decision: if a center is established at a location, it is selected (1); otherwise, it is not (0).\n2. **Pairwise Coverage**: For each pair of selected locations, the coverage score is determined by the predefined pairwise importance values. These scores reflect the strategic benefit of having both locations in the network.\n\n#### Objective:\nMaximize the total coverage score across all pairs of selected locations. The coverage scores for each pair are as follows:\n- Node 0 and Node 1: 24  \n- Node 0 and Node 2: 21  \n- Node 0 and Node 3: 16  \n- Node 0 and Node 4: 15  \n- Node 1 and Node 0: 21  \n- Node 1 and Node 2: 19  \n- Node 1 and Node 3: 24  \n- Node 1 and Node 4: 23  \n- Node 2 and Node 0: 21  \n- Node 2 and Node 1: 17  \n- Node 2 and Node 3: 25  \n- Node 2 and Node 4: 19  \n- Node 3 and Node 0: 18  \n- Node 3 and Node 1: 24  \n- Node 3 and Node 2: 17  \n- Node 3 and Node 4: 17  \n- Node 4 and Node 0: 15  \n- Node 4 and Node 1: 18  \n- Node 4 and Node 2: 15  \n- Node 4 and Node 3: 24  \n\n#### Constraints:\n1. **Selection of Centers**: Exactly three locations must be selected to establish emergency response centers. This means the sum of selected locations must equal three.\n2. **Pairwise Coverage Activation**: For any pair of locations, the coverage score is only counted if both locations in the pair are selected. This ensures that the coverage score is only applied to active pairs.\n3. **Logical Relationships**:\n   - If a location is not selected, no coverage scores involving that location can be counted.\n   - If both locations in a pair are selected, the coverage score for that pair is fully counted.\n   - If only one location in a pair is selected, the coverage score for that pair is not counted.\n\n#### Numerical Parameters:\n- The pairwise coverage scores are explicitly provided for all possible pairs of locations, as listed above.\n- The total number of selected locations must be exactly three.\n\n#### Summary:\nYour task is to select three out of the five locations to establish emergency response centers such that the total coverage score, based on the predefined pairwise importance values, is maximized. The selection must adhere to the constraints ensuring that only active pairs of selected locations contribute to the coverage score.",
    "answer": 130,
    "ori": "13_optmath_bench",
    "index": 126,
    "description": "You are tasked with optimizing the placement of emergency response centers across a network of five critical locations (Node 0, Node 1, Node 2, Node 3, and Node 4) to maximize the overall coverage and effectiveness of the response system. Each location has unique characteristics, and the goal is to select exactly three locations to establish these centers. The effectiveness of the system is measured by the combined coverage scores between the selected centers, which are determined by predefined pairwise scores representing the strategic importance of connecting each pair of locations.\n\n#### Key Decisions:\n1. **Selecting Locations**: You must choose exactly three out of the five locations to establish emergency response centers. Each location is represented by a binary decision: if a center is established at a location, it is selected (1); otherwise, it is not (0).\n2. **Pairwise Coverage**: For each pair of selected locations, the coverage score is determined by the predefined pairwise importance values. These scores reflect the strategic benefit of having both locations in the network.\n\n#### Objective:\nMaximize the total coverage score across all pairs of selected locations. The coverage scores for each pair are as follows:\n- Node 0 and Node 1: 24  \n- Node 0 and Node 2: 21  \n- Node 0 and Node 3: 16  \n- Node 0 and Node 4: 15  \n- Node 1 and Node 0: 21  \n- Node 1 and Node 2: 19  \n- Node 1 and Node 3: 24  \n- Node 1 and Node 4: 23  \n- Node 2 and Node 0: 21  \n- Node 2 and Node 1: 17  \n- Node 2 and Node 3: 25  \n- Node 2 and Node 4: 19  \n- Node 3 and Node 0: 18  \n- Node 3 and Node 1: 24  \n- Node 3 and Node 2: 17  \n- Node 3 and Node 4: 17  \n- Node 4 and Node 0: 15  \n- Node 4 and Node 1: 18  \n- Node 4 and Node 2: 15  \n- Node 4 and Node 3: 24  \n\n#### Constraints:\n1. **Selection of Centers**: Exactly three locations must be selected to establish emergency response centers. This means the sum of selected locations must equal three.\n2. **Pairwise Coverage Activation**: For any pair of locations, the coverage score is only counted if both locations in the pair are selected. This ensures that the coverage score is only applied to active pairs.\n3. **Logical Relationships**:\n   - If a location is not selected, no coverage scores involving that location can be counted.\n   - If both locations in a pair are selected, the coverage score for that pair is fully counted.\n   - If only one location in a pair is selected, the coverage score for that pair is not counted.\n\n#### Numerical Parameters:\n- The pairwise coverage scores are explicitly provided for all possible pairs of locations, as listed above.\n- The total number of selected locations must be exactly three.\n\n#### Summary:\nYour task is to select three out of the five locations to establish emergency response centers such that the total coverage score, based on the predefined pairwise importance values, is maximized. The selection must adhere to the constraints ensuring that only active pairs of selected locations contribute to the coverage score.",
    "ground_truth": 130
  },
  {
    "question": "The problem involves scheduling operations for 7 products, each requiring 2 operations to be performed in sequence. Each operation has a fixed processing time of 1 unit of time. The operations must be scheduled on shared machines, where each machine can handle only one operation at a time. The order of operations on shared machines is determined by binary decision variables, which decide whether one operation is performed before another. \n\nThe goal is to minimize the total production time, known as the makespan, ensuring that all products are completed as quickly as possible. The makespan must be at least as long as the completion time of the last operation across all products. \n\nConstraints include precedence constraints, ensuring that the second operation of each product cannot start until the first operation is completed. Machine capacity constraints ensure that no two operations on the same machine overlap in time. These constraints are enforced using binary variables that determine the order of operations on shared machines. A large constant (100000) is used in the machine capacity constraints to ensure that the constraints are satisfied when the binary variables determine the order of operations. \n\nThe start times of all operations must be non-negative, and the binary variables must take values of either 0 or 1. The objective is to minimize the makespan, ensuring that all operations are scheduled efficiently without violating the precedence and machine capacity constraints.",
    "answer": 4,
    "ori": "13_optmath_bench",
    "index": 127,
    "description": "The problem involves scheduling operations for 7 products, each requiring 2 operations to be performed in sequence. Each operation has a fixed processing time of 1 unit of time. The operations must be scheduled on shared machines, where each machine can handle only one operation at a time. The order of operations on shared machines is determined by binary decision variables, which decide whether one operation is performed before another. \n\nThe goal is to minimize the total production time, known as the makespan, ensuring that all products are completed as quickly as possible. The makespan must be at least as long as the completion time of the last operation across all products. \n\nConstraints include precedence constraints, ensuring that the second operation of each product cannot start until the first operation is completed. Machine capacity constraints ensure that no two operations on the same machine overlap in time. These constraints are enforced using binary variables that determine the order of operations on shared machines. A large constant (100000) is used in the machine capacity constraints to ensure that the constraints are satisfied when the binary variables determine the order of operations. \n\nThe start times of all operations must be non-negative, and the binary variables must take values of either 0 or 1. The objective is to minimize the makespan, ensuring that all operations are scheduled efficiently without violating the precedence and machine capacity constraints.",
    "ground_truth": 4
  },
  {
    "question": "You are responsible for managing the distribution of resources across nine interconnected cities. Each city has a specific supply or demand for resources, and your goal is to ensure that all cities receive the resources they need while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit that cannot be exceeded.\n\n#### City Requirements:\n- **City 0** has a surplus of 42 units of resources that need to be distributed to other cities.\n- **City 1** requires an additional 3 units of resources to meet its demand.\n- **City 2** has a surplus of 11 units of resources.\n- **City 3** requires an additional 21 units of resources.\n- **City 4** has a surplus of 4 units of resources.\n- **City 5** has a surplus of 3 units of resources.\n- **City 6** requires an additional 19 units of resources.\n- **City 7** requires an additional 24 units of resources.\n- **City 8** has a surplus of 7 units of resources.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies. Below are the costs for each possible route:\n- From **City 0** to other cities:  \n  - To **City 1**: 8 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 1** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 2**: 7 units  \n  - To **City 3**: 6 units  \n  - To **City 4**: 6 units  \n  - To **City 5**: 6 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 10 units  \n  - To **City 8**: 8 units  \n\n- From **City 2** to other cities:  \n  - To **City 0**: 9 units  \n  - To **City 1**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 6 units  \n  - To **City 5**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 3** to other cities:  \n  - To **City 0**: 8 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 10 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 10 units  \n  - To **City 6**: 8 units  \n  - To **City 7**: 10 units  \n  - To **City 8**: 9 units  \n\n- From **City 4** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 1**: 8 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 5**: 10 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 9 units  \n\n- From **City 5** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 7 units  \n  - To **City 3**: 9 units  \n  - To **City 4**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 6** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 10 units  \n  - To **City 2**: 10 units  \n  - To **City 3**: 6 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 9 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 8 units  \n\n- From **City 7** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 1**: 10 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 8 units  \n  - To **City 5**: 9 units  \n  - To **City 6**: 8 units  \n  - To **City 8**: 7 units  \n\n- From **City 8** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 8 units  \n  - To **City 3**: 10 units  \n  - To **City 4**: 7 units  \n  - To **City 5**: 6 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 10 units  \n\n#### Capacity Constraints:\nEach route between cities has a maximum capacity limit, which cannot be exceeded:\n- **City 0** to **City 1**: 40 units  \n- **City 0** to **City 2**: 56 units  \n- **City 0** to **City 3**: 41 units  \n- **City 0** to **City 4**: 49 units  \n- **City 0** to **City 5**: 50 units  \n- **City 0** to **City 6**: 36 units  \n- **City 0** to **City 7**: 59 units  \n- **City 0** to **City 8**: 55 units  \n\n- **City 1** to **City 0**: 33 units  \n- **City 1** to **City 2**: 33 units  \n- **City 1** to **City 3**: 56 units  \n- **City 1** to **City 4**: 46 units  \n- **City 1** to **City 5**: 38 units  \n- **City 1** to **City 6**: 53 units  \n- **City 1** to **City 7**: 51 units  \n- **City 1** to **City 8**: 59 units  \n\n- **City 2** to **City 0**: 59 units  \n- **City 2** to **City 1**: 52 units  \n- **City 2** to **City 3**: 41 units  \n- **City 2** to **City 4**: 38 units  \n- **City 2** to **City 5**: 36 units  \n- **City 2** to **City 6**: 45 units  \n- **City 2** to **City 7**: 32 units  \n- **City 2** to **City 8**: 41 units  \n\n- **City 3** to **City 0**: 30 units  \n- **City 3** to **City 1**: 32 units  \n- **City 3** to **City 2**: 47 units  \n- **City 3** to **City 4**: 57 units  \n- **City 3** to **City 5**: 39 units  \n- **City 3** to **City 6**: 34 units  \n- **City 3** to **City 7**: 32 units  \n- **City 3** to **City 8**: 46 units  \n\n- **City 4** to **City 0**: 55 units  \n- **City 4** to **City 1**: 40 units  \n- **City 4** to **City 2**: 55 units  \n- **City 4** to **City 3**: 41 units  \n- **City 4** to **City 5**: 59 units  \n- **City 4** to **City 6**: 51 units  \n- **City 4** to **City 7**: 35 units  \n- **City 4** to **City 8**: 53 units  \n\n- **City 5** to **City 0**: 34 units  \n- **City 5** to **City 1**: 41 units  \n- **City 5** to **City 2**: 35 units  \n- **City 5** to **City 3**: 43 units  \n- **City 5** to **City 4**: 41 units  \n- **City 5** to **City 6**: 43 units  \n- **City 5** to **City 7**: 40 units  \n- **City 5** to **City 8**: 41 units  \n\n- **City 6** to **City 0**: 34 units  \n- **City 6** to **City 1**: 32 units  \n- **City 6** to **City 2**: 47 units  \n- **City 6** to **City 3**: 43 units  \n- **City 6** to **City 4**: 46 units  \n- **City 6** to **City 5**: 34 units  \n- **City 6** to **City 7**: 60 units  \n- **City 6** to **City 8**: 59 units  \n\n- **City 7** to **City 0**: 31 units  \n- **City 7** to **City 1**: 42 units  \n- **City 7** to **City 2**: 30 units  \n- **City 7** to **City 3**: 34 units  \n- **City 7** to **City 4**: 52 units  \n- **City 7** to **City 5**: 45 units  \n- **City 7** to **City 6**: 43 units  \n- **City 7** to **City 8**: 50 units  \n\n- **City 8** to **City 0**: 49 units  \n- **City 8** to **City 1**: 31 units  \n- **City 8** to **City 2**: 53 units  \n- **City 8** to **City 3**: 46 units  \n- **City 8** to **City 4**: 42 units  \n- **City 8** to **City 5**: 36 units  \n- **City 8** to **City 6**: 30 units  \n- **City 8** to **City 7**: 41 units  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that the transportation does not exceed the capacity limits of any route and that all cities' resource requirements are satisfied.\n\nWhat is the minimum total cost to achieve this distribution?",
    "answer": 533,
    "ori": "13_optmath_bench",
    "index": 128,
    "description": "You are responsible for managing the distribution of resources across nine interconnected cities. Each city has a specific supply or demand for resources, and your goal is to ensure that all cities receive the resources they need while minimizing the total transportation cost. The transportation costs vary depending on the route taken between cities, and each route has a maximum capacity limit that cannot be exceeded.\n\n#### City Requirements:\n- **City 0** has a surplus of 42 units of resources that need to be distributed to other cities.\n- **City 1** requires an additional 3 units of resources to meet its demand.\n- **City 2** has a surplus of 11 units of resources.\n- **City 3** requires an additional 21 units of resources.\n- **City 4** has a surplus of 4 units of resources.\n- **City 5** has a surplus of 3 units of resources.\n- **City 6** requires an additional 19 units of resources.\n- **City 7** requires an additional 24 units of resources.\n- **City 8** has a surplus of 7 units of resources.\n\n#### Transportation Costs:\nThe cost of transporting resources between cities varies. Below are the costs for each possible route:\n- From **City 0** to other cities:  \n  - To **City 1**: 8 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 1** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 2**: 7 units  \n  - To **City 3**: 6 units  \n  - To **City 4**: 6 units  \n  - To **City 5**: 6 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 10 units  \n  - To **City 8**: 8 units  \n\n- From **City 2** to other cities:  \n  - To **City 0**: 9 units  \n  - To **City 1**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 6 units  \n  - To **City 5**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 3** to other cities:  \n  - To **City 0**: 8 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 10 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 10 units  \n  - To **City 6**: 8 units  \n  - To **City 7**: 10 units  \n  - To **City 8**: 9 units  \n\n- From **City 4** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 1**: 8 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 5**: 10 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 9 units  \n\n- From **City 5** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 7 units  \n  - To **City 3**: 9 units  \n  - To **City 4**: 8 units  \n  - To **City 6**: 10 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 10 units  \n\n- From **City 6** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 10 units  \n  - To **City 2**: 10 units  \n  - To **City 3**: 6 units  \n  - To **City 4**: 9 units  \n  - To **City 5**: 9 units  \n  - To **City 7**: 7 units  \n  - To **City 8**: 8 units  \n\n- From **City 7** to other cities:  \n  - To **City 0**: 6 units  \n  - To **City 1**: 10 units  \n  - To **City 2**: 9 units  \n  - To **City 3**: 8 units  \n  - To **City 4**: 8 units  \n  - To **City 5**: 9 units  \n  - To **City 6**: 8 units  \n  - To **City 8**: 7 units  \n\n- From **City 8** to other cities:  \n  - To **City 0**: 10 units  \n  - To **City 1**: 6 units  \n  - To **City 2**: 8 units  \n  - To **City 3**: 10 units  \n  - To **City 4**: 7 units  \n  - To **City 5**: 6 units  \n  - To **City 6**: 9 units  \n  - To **City 7**: 10 units  \n\n#### Capacity Constraints:\nEach route between cities has a maximum capacity limit, which cannot be exceeded:\n- **City 0** to **City 1**: 40 units  \n- **City 0** to **City 2**: 56 units  \n- **City 0** to **City 3**: 41 units  \n- **City 0** to **City 4**: 49 units  \n- **City 0** to **City 5**: 50 units  \n- **City 0** to **City 6**: 36 units  \n- **City 0** to **City 7**: 59 units  \n- **City 0** to **City 8**: 55 units  \n\n- **City 1** to **City 0**: 33 units  \n- **City 1** to **City 2**: 33 units  \n- **City 1** to **City 3**: 56 units  \n- **City 1** to **City 4**: 46 units  \n- **City 1** to **City 5**: 38 units  \n- **City 1** to **City 6**: 53 units  \n- **City 1** to **City 7**: 51 units  \n- **City 1** to **City 8**: 59 units  \n\n- **City 2** to **City 0**: 59 units  \n- **City 2** to **City 1**: 52 units  \n- **City 2** to **City 3**: 41 units  \n- **City 2** to **City 4**: 38 units  \n- **City 2** to **City 5**: 36 units  \n- **City 2** to **City 6**: 45 units  \n- **City 2** to **City 7**: 32 units  \n- **City 2** to **City 8**: 41 units  \n\n- **City 3** to **City 0**: 30 units  \n- **City 3** to **City 1**: 32 units  \n- **City 3** to **City 2**: 47 units  \n- **City 3** to **City 4**: 57 units  \n- **City 3** to **City 5**: 39 units  \n- **City 3** to **City 6**: 34 units  \n- **City 3** to **City 7**: 32 units  \n- **City 3** to **City 8**: 46 units  \n\n- **City 4** to **City 0**: 55 units  \n- **City 4** to **City 1**: 40 units  \n- **City 4** to **City 2**: 55 units  \n- **City 4** to **City 3**: 41 units  \n- **City 4** to **City 5**: 59 units  \n- **City 4** to **City 6**: 51 units  \n- **City 4** to **City 7**: 35 units  \n- **City 4** to **City 8**: 53 units  \n\n- **City 5** to **City 0**: 34 units  \n- **City 5** to **City 1**: 41 units  \n- **City 5** to **City 2**: 35 units  \n- **City 5** to **City 3**: 43 units  \n- **City 5** to **City 4**: 41 units  \n- **City 5** to **City 6**: 43 units  \n- **City 5** to **City 7**: 40 units  \n- **City 5** to **City 8**: 41 units  \n\n- **City 6** to **City 0**: 34 units  \n- **City 6** to **City 1**: 32 units  \n- **City 6** to **City 2**: 47 units  \n- **City 6** to **City 3**: 43 units  \n- **City 6** to **City 4**: 46 units  \n- **City 6** to **City 5**: 34 units  \n- **City 6** to **City 7**: 60 units  \n- **City 6** to **City 8**: 59 units  \n\n- **City 7** to **City 0**: 31 units  \n- **City 7** to **City 1**: 42 units  \n- **City 7** to **City 2**: 30 units  \n- **City 7** to **City 3**: 34 units  \n- **City 7** to **City 4**: 52 units  \n- **City 7** to **City 5**: 45 units  \n- **City 7** to **City 6**: 43 units  \n- **City 7** to **City 8**: 50 units  \n\n- **City 8** to **City 0**: 49 units  \n- **City 8** to **City 1**: 31 units  \n- **City 8** to **City 2**: 53 units  \n- **City 8** to **City 3**: 46 units  \n- **City 8** to **City 4**: 42 units  \n- **City 8** to **City 5**: 36 units  \n- **City 8** to **City 6**: 30 units  \n- **City 8** to **City 7**: 41 units  \n\n#### Objective:\nYour task is to determine the optimal amount of resources to transport between cities to meet all demands while minimizing the total transportation cost. Ensure that the transportation does not exceed the capacity limits of any route and that all cities' resource requirements are satisfied.\n\nWhat is the minimum total cost to achieve this distribution?",
    "ground_truth": 533
  },
  {
    "question": "The manufacturing facility produces seven distinct products (Jobs 0 through 6) using four specialized machines (Machine 0, Machine 1, Machine 2, and Machine 3). Each product must pass through all four machines in a specific sequence, and the goal is to schedule production to minimize the total completion time (makespan), ensuring all products are completed as quickly as possible. The objective is to minimize the sum of the start time of the last product on Machine 3 and the weighted completion times of specific jobs in the final position. Each product must be assigned to exactly one position in the production sequence on each machine, and each position on each machine can only be assigned to one product. The start time of a product on a machine cannot begin until the product has completed processing on the previous machine, and the start time of a product in a later position on a machine cannot begin until the product in the previous position has completed processing on that machine. Processing times for each product on each machine are as follows: Job 0 takes 10 units on Machine 0, 5 units on Machine 1, 5 units on Machine 2, and 7 units on Machine 3; Job 1 takes 6 units on Machine 0, 5 units on Machine 1, 10 units on Machine 2, and 9 units on Machine 3; Job 2 takes 9 units on Machine 0, 8 units on Machine 1, 6 units on Machine 2, and 9 units on Machine 3; Job 3 takes 6 units on Machine 0, 5 units on Machine 1, 9 units on Machine 2, and 6 units on Machine 3; Job 4 takes 5 units on Machine 0, 8 units on Machine 1, 5 units on Machine 2, and 5 units on Machine 3; Job 5 takes 9 units on Machine 0, 10 units on Machine 1, 5 units on Machine 2, and 10 units on Machine 3; Job 6 takes 7 units on Machine 0, 6 units on Machine 1, 10 units on Machine 2, and 5 units on Machine 3. The objective function includes weighted coefficients for specific jobs in the final position, such as 7 for Job 0 in position 6, 9 for Job 1 in position 6, 9 for Job 2 in position 6, 6 for Job 3 in position 6, 5 for Job 4 in position 6, 10 for Job 5 in position 6, and 5 for Job 6 in position 6. The constraints ensure that each job is assigned to exactly one position on each machine, each position on each machine is assigned to exactly one job, and the start times respect the precedence relationships between machines and positions. The variables include binary assignment variables for each job and position on each machine, and continuous start time variables for each position on each machine. The bounds ensure that all start times are non-negative, and the binary variables are restricted to 0 or 1.",
    "answer": 72,
    "ori": "13_optmath_bench",
    "index": 129,
    "description": "The manufacturing facility produces seven distinct products (Jobs 0 through 6) using four specialized machines (Machine 0, Machine 1, Machine 2, and Machine 3). Each product must pass through all four machines in a specific sequence, and the goal is to schedule production to minimize the total completion time (makespan), ensuring all products are completed as quickly as possible. The objective is to minimize the sum of the start time of the last product on Machine 3 and the weighted completion times of specific jobs in the final position. Each product must be assigned to exactly one position in the production sequence on each machine, and each position on each machine can only be assigned to one product. The start time of a product on a machine cannot begin until the product has completed processing on the previous machine, and the start time of a product in a later position on a machine cannot begin until the product in the previous position has completed processing on that machine. Processing times for each product on each machine are as follows: Job 0 takes 10 units on Machine 0, 5 units on Machine 1, 5 units on Machine 2, and 7 units on Machine 3; Job 1 takes 6 units on Machine 0, 5 units on Machine 1, 10 units on Machine 2, and 9 units on Machine 3; Job 2 takes 9 units on Machine 0, 8 units on Machine 1, 6 units on Machine 2, and 9 units on Machine 3; Job 3 takes 6 units on Machine 0, 5 units on Machine 1, 9 units on Machine 2, and 6 units on Machine 3; Job 4 takes 5 units on Machine 0, 8 units on Machine 1, 5 units on Machine 2, and 5 units on Machine 3; Job 5 takes 9 units on Machine 0, 10 units on Machine 1, 5 units on Machine 2, and 10 units on Machine 3; Job 6 takes 7 units on Machine 0, 6 units on Machine 1, 10 units on Machine 2, and 5 units on Machine 3. The objective function includes weighted coefficients for specific jobs in the final position, such as 7 for Job 0 in position 6, 9 for Job 1 in position 6, 9 for Job 2 in position 6, 6 for Job 3 in position 6, 5 for Job 4 in position 6, 10 for Job 5 in position 6, and 5 for Job 6 in position 6. The constraints ensure that each job is assigned to exactly one position on each machine, each position on each machine is assigned to exactly one job, and the start times respect the precedence relationships between machines and positions. The variables include binary assignment variables for each job and position on each machine, and continuous start time variables for each position on each machine. The bounds ensure that all start times are non-negative, and the binary variables are restricted to 0 or 1.",
    "ground_truth": 72
  },
  {
    "question": "The goal is to minimize the total travel distance for a delivery route across six cities: City 0, City 1, City 2, City 3, City 4, and City 5. Each city must be visited exactly once, and the route must form a complete loop without any smaller loops (subtours). The distances between cities are as follows: from City 0 to City 1 (318 units), City 2 (278 units), City 3 (304 units), City 4 (287 units), and City 5 (277 units); from City 1 to City 0 (285 units), City 2 (277 units), City 3 (322 units), City 4 (277 units), and City 5 (306 units); from City 2 to City 0 (275 units), City 1 (302 units), City 3 (299 units), City 4 (277 units), and City 5 (291 units); from City 3 to City 0 (282 units), City 1 (292 units), City 2 (276 units), City 4 (283 units), and City 5 (304 units); from City 4 to City 0 (277 units), City 1 (301 units), City 2 (291 units), City 3 (306 units), and City 5 (325 units); from City 5 to City 0 (325 units), City 1 (319 units), City 2 (306 units), City 3 (279 units), and City 4 (275 units). \n\nEach city must have exactly one incoming and one outgoing route. To prevent subtours, each city is assigned a position number: City 0 is fixed at position 0, and the position numbers for the other cities must be between 1 and 5. If a route is taken from City i to City j, the position number of City j must be greater than the position number of City i. The decision to travel from one city to another is represented by binary variables, where 1 indicates the route is taken and 0 indicates it is not. The objective is to determine the optimal sequence of cities to visit, ensuring each city is visited exactly once, the route forms a complete loop without subtours, and the total distance traveled is minimized.",
    "answer": 1679,
    "ori": "13_optmath_bench",
    "index": 130,
    "description": "The goal is to minimize the total travel distance for a delivery route across six cities: City 0, City 1, City 2, City 3, City 4, and City 5. Each city must be visited exactly once, and the route must form a complete loop without any smaller loops (subtours). The distances between cities are as follows: from City 0 to City 1 (318 units), City 2 (278 units), City 3 (304 units), City 4 (287 units), and City 5 (277 units); from City 1 to City 0 (285 units), City 2 (277 units), City 3 (322 units), City 4 (277 units), and City 5 (306 units); from City 2 to City 0 (275 units), City 1 (302 units), City 3 (299 units), City 4 (277 units), and City 5 (291 units); from City 3 to City 0 (282 units), City 1 (292 units), City 2 (276 units), City 4 (283 units), and City 5 (304 units); from City 4 to City 0 (277 units), City 1 (301 units), City 2 (291 units), City 3 (306 units), and City 5 (325 units); from City 5 to City 0 (325 units), City 1 (319 units), City 2 (306 units), City 3 (279 units), and City 4 (275 units). \n\nEach city must have exactly one incoming and one outgoing route. To prevent subtours, each city is assigned a position number: City 0 is fixed at position 0, and the position numbers for the other cities must be between 1 and 5. If a route is taken from City i to City j, the position number of City j must be greater than the position number of City i. The decision to travel from one city to another is represented by binary variables, where 1 indicates the route is taken and 0 indicates it is not. The objective is to determine the optimal sequence of cities to visit, ensuring each city is visited exactly once, the route forms a complete loop without subtours, and the total distance traveled is minimized.",
    "ground_truth": 1679
  },
  {
    "question": "Cell Tower Deployment for Regional Coverage\n\nYou are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 33 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Which cell towers to build**: There are 29 potential cell tower locations, each with a unique construction cost. You must decide whether to build each tower (a binary decision: build or not build).\n2. **Which areas to cover**: Each of the 33 areas can be either covered or not covered by the deployed cell towers. Coverage for an area is only possible if at least one of the cell towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 33 areas are as follows:\n- Area 0: 3,522 people  \n- Area 1: 2,492 people  \n- Area 2: 2,865 people  \n- Area 3: 2,596 people  \n- Area 4: 2,194 people  \n- Area 5: 4,001 people  \n- Area 6: 3,027 people  \n- Area 7: 2,581 people  \n- Area 8: 4,848 people  \n- Area 9: 2,814 people  \n- Area 10: 3,543 people  \n- Area 11: 2,234 people  \n- Area 12: 2,960 people  \n- Area 13: 4,297 people  \n- Area 14: 2,792 people  \n- Area 15: 4,520 people  \n- Area 16: 2,685 people  \n- Area 17: 2,022 people  \n- Area 18: 4,858 people  \n- Area 19: 4,814 people  \n- Area 20: 3,432 people  \n- Area 21: 3,730 people  \n- Area 22: 2,526 people  \n- Area 23: 3,277 people  \n- Area 24: 4,363 people  \n- Area 25: 2,622 people  \n- Area 26: 3,740 people  \n- Area 27: 4,594 people  \n- Area 28: 3,193 people  \n- Area 29: 4,275 people  \n- Area 30: 4,407 people  \n- Area 31: 3,809 people  \n- Area 32: 2,163 people  \n\n#### Constraints:\n1. **Coverage Requirements**: For an area to be considered covered, at least one of the cell towers that can serve it must be built. The specific combinations of cell towers that can cover each area are provided in the data. For example:\n   - Area 0 can be covered if any of the following towers are built: Tower 3, Tower 5, Tower 7, Tower 10, Tower 11, Tower 13, Tower 15, Tower 17, Tower 19, Tower 22, Tower 23, Tower 26, Tower 27, or Tower 28.\n   - Similar constraints apply to all 33 areas, with each area having a unique set of towers that can provide coverage.\n\n2. **Budget Constraint**: The total cost of building the selected cell towers must not exceed the available budget of 3,059 units. The construction costs for the 29 towers are as follows:\n   - Tower 0: 303 units  \n   - Tower 1: 378 units  \n   - Tower 2: 327 units  \n   - Tower 3: 444 units  \n   - Tower 4: 391 units  \n   - Tower 5: 357 units  \n   - Tower 6: 444 units  \n   - Tower 7: 244 units  \n   - Tower 8: 433 units  \n   - Tower 9: 407 units  \n   - Tower 10: 305 units  \n   - Tower 11: 296 units  \n   - Tower 12: 315 units  \n   - Tower 13: 302 units  \n   - Tower 14: 495 units  \n   - Tower 15: 240 units  \n   - Tower 16: 379 units  \n   - Tower 17: 211 units  \n   - Tower 18: 388 units  \n   - Tower 19: 220 units  \n   - Tower 20: 408 units  \n   - Tower 21: 430 units  \n   - Tower 22: 327 units  \n   - Tower 23: 470 units  \n   - Tower 24: 381 units  \n   - Tower 25: 476 units  \n   - Tower 26: 215 units  \n   - Tower 27: 239 units  \n   - Tower 28: 372 units  \n\n3. **Binary Decisions**: Each cell tower can either be built (1) or not built (0), and each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select a combination of cell towers to build, ensuring that the total cost does not exceed 3,059 units, while maximizing the total population covered across the 33 areas. The coverage for each area depends on the specific towers built, and the population sizes and tower costs are provided in detail. The goal is to make strategic decisions about tower deployment to achieve the highest possible population coverage within the budget.",
    "answer": 111796,
    "ori": "13_optmath_bench",
    "index": 131,
    "description": "Cell Tower Deployment for Regional Coverage\n\nYou are tasked with optimizing the deployment of cell towers across a region to maximize population coverage while adhering to a strict budget constraint. The region is divided into 33 distinct areas, each with a specific population size that needs to be served. Your goal is to determine which cell towers to build and which areas to cover to ensure the maximum number of people have access to cellular service.\n\n#### Key Decisions:\n1. **Which cell towers to build**: There are 29 potential cell tower locations, each with a unique construction cost. You must decide whether to build each tower (a binary decision: build or not build).\n2. **Which areas to cover**: Each of the 33 areas can be either covered or not covered by the deployed cell towers. Coverage for an area is only possible if at least one of the cell towers that can serve it is built.\n\n#### Objective:\nMaximize the total population covered by the deployed cell towers. The population sizes for the 33 areas are as follows:\n- Area 0: 3,522 people  \n- Area 1: 2,492 people  \n- Area 2: 2,865 people  \n- Area 3: 2,596 people  \n- Area 4: 2,194 people  \n- Area 5: 4,001 people  \n- Area 6: 3,027 people  \n- Area 7: 2,581 people  \n- Area 8: 4,848 people  \n- Area 9: 2,814 people  \n- Area 10: 3,543 people  \n- Area 11: 2,234 people  \n- Area 12: 2,960 people  \n- Area 13: 4,297 people  \n- Area 14: 2,792 people  \n- Area 15: 4,520 people  \n- Area 16: 2,685 people  \n- Area 17: 2,022 people  \n- Area 18: 4,858 people  \n- Area 19: 4,814 people  \n- Area 20: 3,432 people  \n- Area 21: 3,730 people  \n- Area 22: 2,526 people  \n- Area 23: 3,277 people  \n- Area 24: 4,363 people  \n- Area 25: 2,622 people  \n- Area 26: 3,740 people  \n- Area 27: 4,594 people  \n- Area 28: 3,193 people  \n- Area 29: 4,275 people  \n- Area 30: 4,407 people  \n- Area 31: 3,809 people  \n- Area 32: 2,163 people  \n\n#### Constraints:\n1. **Coverage Requirements**: For an area to be considered covered, at least one of the cell towers that can serve it must be built. The specific combinations of cell towers that can cover each area are provided in the data. For example:\n   - Area 0 can be covered if any of the following towers are built: Tower 3, Tower 5, Tower 7, Tower 10, Tower 11, Tower 13, Tower 15, Tower 17, Tower 19, Tower 22, Tower 23, Tower 26, Tower 27, or Tower 28.\n   - Similar constraints apply to all 33 areas, with each area having a unique set of towers that can provide coverage.\n\n2. **Budget Constraint**: The total cost of building the selected cell towers must not exceed the available budget of 3,059 units. The construction costs for the 29 towers are as follows:\n   - Tower 0: 303 units  \n   - Tower 1: 378 units  \n   - Tower 2: 327 units  \n   - Tower 3: 444 units  \n   - Tower 4: 391 units  \n   - Tower 5: 357 units  \n   - Tower 6: 444 units  \n   - Tower 7: 244 units  \n   - Tower 8: 433 units  \n   - Tower 9: 407 units  \n   - Tower 10: 305 units  \n   - Tower 11: 296 units  \n   - Tower 12: 315 units  \n   - Tower 13: 302 units  \n   - Tower 14: 495 units  \n   - Tower 15: 240 units  \n   - Tower 16: 379 units  \n   - Tower 17: 211 units  \n   - Tower 18: 388 units  \n   - Tower 19: 220 units  \n   - Tower 20: 408 units  \n   - Tower 21: 430 units  \n   - Tower 22: 327 units  \n   - Tower 23: 470 units  \n   - Tower 24: 381 units  \n   - Tower 25: 476 units  \n   - Tower 26: 215 units  \n   - Tower 27: 239 units  \n   - Tower 28: 372 units  \n\n3. **Binary Decisions**: Each cell tower can either be built (1) or not built (0), and each area can either be covered (1) or not covered (0).\n\n#### Summary:\nYour task is to select a combination of cell towers to build, ensuring that the total cost does not exceed 3,059 units, while maximizing the total population covered across the 33 areas. The coverage for each area depends on the specific towers built, and the population sizes and tower costs are provided in detail. The goal is to make strategic decisions about tower deployment to achieve the highest possible population coverage within the budget.",
    "ground_truth": 111796
  },
  {
    "question": "Imagine you are managing the placement of emergency response centers across five key locations in a region. Each location has the potential to host a center, but due to budget constraints, you can only establish **three centers** in total. The goal is to maximize the overall effectiveness of these centers by ensuring they are strategically placed to cover as much critical area as possible.\n\nEach pair of locations has a predefined **effectiveness score** that represents how well a center at one location can support or complement a center at another location. These scores are as follows:\n\n- **Location 0 and Location 1**: 18  \n- **Location 0 and Location 2**: 20  \n- **Location 0 and Location 3**: 22  \n- **Location 0 and Location 4**: 19  \n- **Location 1 and Location 0**: 20  \n- **Location 1 and Location 2**: 15  \n- **Location 1 and Location 3**: 22  \n- **Location 1 and Location 4**: 16  \n- **Location 2 and Location 0**: 23  \n- **Location 2 and Location 1**: 23  \n- **Location 2 and Location 3**: 17  \n- **Location 2 and Location 4**: 22  \n- **Location 3 and Location 0**: 20  \n- **Location 3 and Location 1**: 19  \n- **Location 3 and Location 2**: 23  \n- **Location 3 and Location 4**: 20  \n- **Location 4 and Location 0**: 24  \n- **Location 4 and Location 1**: 16  \n- **Location 4 and Location 2**: 24  \n- **Location 4 and Location 3**: 24  \n\nYour task is to select **three locations** out of the five to establish the centers. The effectiveness of the selected centers is determined by the sum of the pairwise effectiveness scores between the chosen locations. For example, if you select Locations 0, 1, and 2, the total effectiveness would be the sum of the scores for pairs (0,1), (0,2), and (1,2).\n\nHowever, there are specific rules governing the selection:  \n1. A pair of locations can only contribute to the total effectiveness if **both locations in the pair are selected** as centers.  \n2. If only one location in a pair is selected, that pair does not contribute to the effectiveness score.  \n3. The total number of centers must be exactly three.  \n\nYour objective is to determine which three locations to select to **maximize the total effectiveness** of the emergency response centers, ensuring all constraints are met.",
    "answer": 132,
    "ori": "13_optmath_bench",
    "index": 132,
    "description": "Imagine you are managing the placement of emergency response centers across five key locations in a region. Each location has the potential to host a center, but due to budget constraints, you can only establish **three centers** in total. The goal is to maximize the overall effectiveness of these centers by ensuring they are strategically placed to cover as much critical area as possible.\n\nEach pair of locations has a predefined **effectiveness score** that represents how well a center at one location can support or complement a center at another location. These scores are as follows:\n\n- **Location 0 and Location 1**: 18  \n- **Location 0 and Location 2**: 20  \n- **Location 0 and Location 3**: 22  \n- **Location 0 and Location 4**: 19  \n- **Location 1 and Location 0**: 20  \n- **Location 1 and Location 2**: 15  \n- **Location 1 and Location 3**: 22  \n- **Location 1 and Location 4**: 16  \n- **Location 2 and Location 0**: 23  \n- **Location 2 and Location 1**: 23  \n- **Location 2 and Location 3**: 17  \n- **Location 2 and Location 4**: 22  \n- **Location 3 and Location 0**: 20  \n- **Location 3 and Location 1**: 19  \n- **Location 3 and Location 2**: 23  \n- **Location 3 and Location 4**: 20  \n- **Location 4 and Location 0**: 24  \n- **Location 4 and Location 1**: 16  \n- **Location 4 and Location 2**: 24  \n- **Location 4 and Location 3**: 24  \n\nYour task is to select **three locations** out of the five to establish the centers. The effectiveness of the selected centers is determined by the sum of the pairwise effectiveness scores between the chosen locations. For example, if you select Locations 0, 1, and 2, the total effectiveness would be the sum of the scores for pairs (0,1), (0,2), and (1,2).\n\nHowever, there are specific rules governing the selection:  \n1. A pair of locations can only contribute to the total effectiveness if **both locations in the pair are selected** as centers.  \n2. If only one location in a pair is selected, that pair does not contribute to the effectiveness score.  \n3. The total number of centers must be exactly three.  \n\nYour objective is to determine which three locations to select to **maximize the total effectiveness** of the emergency response centers, ensuring all constraints are met.",
    "ground_truth": 132
  },
  {
    "question": "The goal is to determine the optimal allocation of resources for three products, Product A, Product B, and Product C, to effectively manage a logistics network. The decision variables include the quantities of each product, represented by \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), as well as auxiliary variables \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and logistical thresholds \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). All variables are free to take any real value.\n\nThe objective is to minimize the total cost, which is calculated as the sum of the following contributions: -1.109620416617511 times Product A, -0.6560359731414873 times Product B, and -0.7019449433705992 times Product C. This objective reflects the cost structure of the logistics network.\n\nOperational constraints must be satisfied, including three linear equality constraints that define exact relationships between the products. These constraints are: 0.973138297335475 times Product A plus 0.5753515721139748 times Product B minus 0.3345391015917421 times Product C equals -0.1751595502819031; 1.004855798779082 times Product A plus 1.155166374661675 times Product B minus 0.6908735867360416 times Product C equals -0.7437001018712311; and -2.110665713909855 times Product A plus 0.0465859108136975 times Product B plus 1.404349170472437 times Product C equals -2.786300004238841.\n\nAdditionally, there are 14 linear constraints that ensure the allocation of resources adheres to specific conditions. These constraints involve combinations of the product quantities and the auxiliary variables \\( y_0 \\), \\( y_1 \\), \\( y_2 \\), and the logistical thresholds \\( t_0 \\), \\( t_1 \\), and \\( t_2 \\). For example, one constraint states that 0.0366410572471413 times Product A plus 0.0568820534300137 times Product B minus 0.000079998 times Product C plus \\( y_0[0] \\) equals 0.0535813009430022. Similar constraints are defined for the remaining auxiliary variables and thresholds.\n\nFurthermore, three second-order cone constraints ensure that the logistical thresholds satisfy specific quadratic relationships. These constraints are: the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) minus the square of \\( t_0[0] \\) must be less than or equal to zero; the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) minus the square of \\( t_1[0] \\) must be less than or equal to zero; and the sum of the squares of \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\) minus the square of \\( t_2[0] \\) must be less than or equal to zero.\n\nThe task is to determine the optimal production and distribution levels for Products A, B, and C, along with the associated intermediate metrics and logistical thresholds, to minimize the total cost while satisfying all operational constraints.",
    "answer": 1.57,
    "ori": "13_optmath_bench",
    "index": 133,
    "description": "The goal is to determine the optimal allocation of resources for three products, Product A, Product B, and Product C, to effectively manage a logistics network. The decision variables include the quantities of each product, represented by \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), as well as auxiliary variables \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and logistical thresholds \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). All variables are free to take any real value.\n\nThe objective is to minimize the total cost, which is calculated as the sum of the following contributions: -1.109620416617511 times Product A, -0.6560359731414873 times Product B, and -0.7019449433705992 times Product C. This objective reflects the cost structure of the logistics network.\n\nOperational constraints must be satisfied, including three linear equality constraints that define exact relationships between the products. These constraints are: 0.973138297335475 times Product A plus 0.5753515721139748 times Product B minus 0.3345391015917421 times Product C equals -0.1751595502819031; 1.004855798779082 times Product A plus 1.155166374661675 times Product B minus 0.6908735867360416 times Product C equals -0.7437001018712311; and -2.110665713909855 times Product A plus 0.0465859108136975 times Product B plus 1.404349170472437 times Product C equals -2.786300004238841.\n\nAdditionally, there are 14 linear constraints that ensure the allocation of resources adheres to specific conditions. These constraints involve combinations of the product quantities and the auxiliary variables \\( y_0 \\), \\( y_1 \\), \\( y_2 \\), and the logistical thresholds \\( t_0 \\), \\( t_1 \\), and \\( t_2 \\). For example, one constraint states that 0.0366410572471413 times Product A plus 0.0568820534300137 times Product B minus 0.000079998 times Product C plus \\( y_0[0] \\) equals 0.0535813009430022. Similar constraints are defined for the remaining auxiliary variables and thresholds.\n\nFurthermore, three second-order cone constraints ensure that the logistical thresholds satisfy specific quadratic relationships. These constraints are: the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) minus the square of \\( t_0[0] \\) must be less than or equal to zero; the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) minus the square of \\( t_1[0] \\) must be less than or equal to zero; and the sum of the squares of \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\) minus the square of \\( t_2[0] \\) must be less than or equal to zero.\n\nThe task is to determine the optimal production and distribution levels for Products A, B, and C, along with the associated intermediate metrics and logistical thresholds, to minimize the total cost while satisfying all operational constraints.",
    "ground_truth": 1.57
  },
  {
    "question": "The problem involves minimizing the weighted sum of four decision variables, with weights -1.901009736372913, -0.7076764487261838, 0.083088283352758, and 0.4134020176281016, respectively. The objective is to minimize the expression -1.901009736372913 times the first variable minus 0.7076764487261838 times the second variable plus 0.083088283352758 times the third variable plus 0.4134020176281016 times the fourth variable.\n\nThe problem includes five linear equality constraints. The first constraint requires 1.095257012774988 times the first variable plus 0.0405603467945054 times the second variable minus 0.4142813496378452 times the third variable plus 0.0769274791661522 times the fourth variable to equal -1.589822894954058. The second constraint requires 1.707274498669728 times the first variable minus 0.2477918751127619 times the second variable plus 1.014458021156339 times the third variable plus 0.0887060380647792 times the fourth variable to equal -1.412888255577238. The third constraint requires -0.1928047063342317 times the first variable plus 0.2495462876428885 times the second variable minus 1.347804555582835 times the third variable plus 0.5969103897857732 times the fourth variable to equal -0.7126523262327211. The fourth constraint requires 0.2539181754797121 times the first variable minus 0.4354680188894089 times the second variable minus 0.5625489084016247 times the third variable minus 0.2079253654505673 times the fourth variable to equal 0.0211399419876052. The fifth constraint requires 1.271683708095805 times the first variable plus 1.41227063919648 times the second variable plus 1.237138949722734 times the third variable plus 1.269794867507303 times the fourth variable to equal -3.001810041763422.\n\nAdditionally, there are fifteen linear equality constraints involving intermediate variables. These constraints link the decision variables to intermediate variables \\( y_0[0], y_0[1], y_1[0], y_1[1], y_2[0], y_2[1], y_3[0], y_3[1], y_4[0], y_4[1] \\) and \\( t_0[0], t_1[0], t_2[0], t_3[0], t_4[0] \\). For example, the sixth constraint requires 0.0930293796109266 times the first variable plus 0.0314487985808588 times the second variable plus 0.0397727019597557 times the third variable plus 0.077024350952894 times the fourth variable plus \\( y_0[0] \\) to equal -0.0576022066753428. Similarly, the seventh constraint requires 0.3668170269095303 times the first variable plus 0.7382374711397578 times the second variable plus 1.389031691584004 times the third variable plus 0.4784897178942196 times the fourth variable plus \\( t_0[0] \\) to equal 0.5986251002407987. The remaining constraints follow a similar structure, connecting the decision variables to the intermediate variables with specific coefficients and right-hand side values.\n\nThe problem also includes five second-order cone constraints, each involving the intermediate variables. These constraints require that the negative square of \\( t_0[0] \\) plus the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) be less than or equal to zero. Similarly, the negative square of \\( t_1[0] \\) plus the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to zero, and this pattern continues for the remaining second-order cone constraints.\n\nAll variables, including the four decision variables and the intermediate variables, are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the linear equality constraints and second-order cone constraints.",
    "answer": 3.19,
    "ori": "13_optmath_bench",
    "index": 134,
    "description": "The problem involves minimizing the weighted sum of four decision variables, with weights -1.901009736372913, -0.7076764487261838, 0.083088283352758, and 0.4134020176281016, respectively. The objective is to minimize the expression -1.901009736372913 times the first variable minus 0.7076764487261838 times the second variable plus 0.083088283352758 times the third variable plus 0.4134020176281016 times the fourth variable.\n\nThe problem includes five linear equality constraints. The first constraint requires 1.095257012774988 times the first variable plus 0.0405603467945054 times the second variable minus 0.4142813496378452 times the third variable plus 0.0769274791661522 times the fourth variable to equal -1.589822894954058. The second constraint requires 1.707274498669728 times the first variable minus 0.2477918751127619 times the second variable plus 1.014458021156339 times the third variable plus 0.0887060380647792 times the fourth variable to equal -1.412888255577238. The third constraint requires -0.1928047063342317 times the first variable plus 0.2495462876428885 times the second variable minus 1.347804555582835 times the third variable plus 0.5969103897857732 times the fourth variable to equal -0.7126523262327211. The fourth constraint requires 0.2539181754797121 times the first variable minus 0.4354680188894089 times the second variable minus 0.5625489084016247 times the third variable minus 0.2079253654505673 times the fourth variable to equal 0.0211399419876052. The fifth constraint requires 1.271683708095805 times the first variable plus 1.41227063919648 times the second variable plus 1.237138949722734 times the third variable plus 1.269794867507303 times the fourth variable to equal -3.001810041763422.\n\nAdditionally, there are fifteen linear equality constraints involving intermediate variables. These constraints link the decision variables to intermediate variables \\( y_0[0], y_0[1], y_1[0], y_1[1], y_2[0], y_2[1], y_3[0], y_3[1], y_4[0], y_4[1] \\) and \\( t_0[0], t_1[0], t_2[0], t_3[0], t_4[0] \\). For example, the sixth constraint requires 0.0930293796109266 times the first variable plus 0.0314487985808588 times the second variable plus 0.0397727019597557 times the third variable plus 0.077024350952894 times the fourth variable plus \\( y_0[0] \\) to equal -0.0576022066753428. Similarly, the seventh constraint requires 0.3668170269095303 times the first variable plus 0.7382374711397578 times the second variable plus 1.389031691584004 times the third variable plus 0.4784897178942196 times the fourth variable plus \\( t_0[0] \\) to equal 0.5986251002407987. The remaining constraints follow a similar structure, connecting the decision variables to the intermediate variables with specific coefficients and right-hand side values.\n\nThe problem also includes five second-order cone constraints, each involving the intermediate variables. These constraints require that the negative square of \\( t_0[0] \\) plus the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) be less than or equal to zero. Similarly, the negative square of \\( t_1[0] \\) plus the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to zero, and this pattern continues for the remaining second-order cone constraints.\n\nAll variables, including the four decision variables and the intermediate variables, are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the linear equality constraints and second-order cone constraints.",
    "ground_truth": 3.19
  },
  {
    "question": "The optimization problem involves minimizing the linear objective function with coefficients 0.4417937820038825 for variable \\(x[0]\\), 0.4540568683365753 for variable \\(x[1]\\), and 0.8269675169997344 for variable \\(x[2]\\). The problem is subject to a linear equality constraint: -0.8456455953416163 multiplied by \\(x[0]\\) plus 0.2274379327097405 multiplied by \\(x[1]\\) minus 0.77122733197339 multiplied by \\(x[2]\\) equals 0.0015019588399508. Additional linear constraints are imposed as follows: 0.0186179649018269 multiplied by \\(x[0]\\) plus 0.00822090536490999 multiplied by \\(x[1]\\) plus 0.0757498425936986 multiplied by \\(x[2]\\) plus \\(y_0[0]\\) equals 0.0928781722430411; -0.0864382752107571 multiplied by \\(x[0]\\) minus 0.0801306131882706 multiplied by \\(x[1]\\) plus 0.00147592929397403 multiplied by \\(x[2]\\) plus \\(y_0[1]\\) equals 0.0116010852586768; -0.0537777103532748 multiplied by \\(x[0]\\) minus 0.05178106148188 multiplied by \\(x[1]\\) plus 0.00775179400845416 multiplied by \\(x[2]\\) plus \\(y_0[2]\\) equals -0.0432037987392584; 0.0433708626106499 multiplied by \\(x[0]\\) minus 0.0555679005654094 multiplied by \\(x[1]\\) plus 0.1354122916870134 multiplied by \\(x[2]\\) plus \\(y_0[3]\\) equals -0.113448509613997; -0.13412 multiplied by \\(x[0]\\) minus 0.5390772678717964 multiplied by \\(x[1]\\) minus 1.224414665744034 multiplied by \\(x[2]\\) plus \\(t_0[0]\\) equals 2.324949537053539; 0.0894817797096893 multiplied by \\(x[0]\\) plus 0.1252203549610245 multiplied by \\(x[1]\\) plus 0.1674611083068293 multiplied by \\(x[2]\\) plus \\(y_1[0]\\) equals -0.1427178355564866; 0.0560619408765313 multiplied by \\(x[0]\\) plus 0.00020013926756253 multiplied by \\(x[1]\\) plus 0.00522276421792812 multiplied by \\(x[2]\\) plus \\(y_1[1]\\) equals -0.0793504157062673; 0.00954172270751238 multiplied by \\(x[0]\\) minus 0.0594530085708131 multiplied by \\(x[1]\\) minus 0.00960829189584381 multiplied by \\(x[2]\\) plus \\(y_1[2]\\) equals 0.098515604042304; -0.0150503497898215 multiplied by \\(x[0]\\) plus 0.1191163703340514 multiplied by \\(x[1]\\) plus 0.0214501936255565 multiplied by \\(x[2]\\) plus \\(y_1[3]\\) equals -0.0517634861476175; 0.0124789859358057 multiplied by \\(x[0]\\) plus 0.0900343661509949 multiplied by \\(x[1]\\) plus 1.223908566697448 multiplied by \\(x[2]\\) plus \\(t_1[0]\\) equals 0.7015191241991279. Two second-order cone constraints are imposed: the sum of the squares of \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(y_0[3]\\) must not exceed the square of \\(t_0[0]\\), and the sum of the squares of \\(y_1[0]\\), \\(y_1[1]\\), \\(y_1[2]\\), and \\(y_1[3]\\) must not exceed the square of \\(t_1[0]\\). All decision variables, including \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(y_0[0]\\) through \\(y_0[3]\\), \\(y_1[0]\\) through \\(y_1[3]\\), \\(t_0[0]\\), and \\(t_1[0]\\), are free variables. The objective is to minimize the linear objective function while satisfying all linear and second-order cone constraints.",
    "answer": -1.98,
    "ori": "13_optmath_bench",
    "index": 135,
    "description": "The optimization problem involves minimizing the linear objective function with coefficients 0.4417937820038825 for variable \\(x[0]\\), 0.4540568683365753 for variable \\(x[1]\\), and 0.8269675169997344 for variable \\(x[2]\\). The problem is subject to a linear equality constraint: -0.8456455953416163 multiplied by \\(x[0]\\) plus 0.2274379327097405 multiplied by \\(x[1]\\) minus 0.77122733197339 multiplied by \\(x[2]\\) equals 0.0015019588399508. Additional linear constraints are imposed as follows: 0.0186179649018269 multiplied by \\(x[0]\\) plus 0.00822090536490999 multiplied by \\(x[1]\\) plus 0.0757498425936986 multiplied by \\(x[2]\\) plus \\(y_0[0]\\) equals 0.0928781722430411; -0.0864382752107571 multiplied by \\(x[0]\\) minus 0.0801306131882706 multiplied by \\(x[1]\\) plus 0.00147592929397403 multiplied by \\(x[2]\\) plus \\(y_0[1]\\) equals 0.0116010852586768; -0.0537777103532748 multiplied by \\(x[0]\\) minus 0.05178106148188 multiplied by \\(x[1]\\) plus 0.00775179400845416 multiplied by \\(x[2]\\) plus \\(y_0[2]\\) equals -0.0432037987392584; 0.0433708626106499 multiplied by \\(x[0]\\) minus 0.0555679005654094 multiplied by \\(x[1]\\) plus 0.1354122916870134 multiplied by \\(x[2]\\) plus \\(y_0[3]\\) equals -0.113448509613997; -0.13412 multiplied by \\(x[0]\\) minus 0.5390772678717964 multiplied by \\(x[1]\\) minus 1.224414665744034 multiplied by \\(x[2]\\) plus \\(t_0[0]\\) equals 2.324949537053539; 0.0894817797096893 multiplied by \\(x[0]\\) plus 0.1252203549610245 multiplied by \\(x[1]\\) plus 0.1674611083068293 multiplied by \\(x[2]\\) plus \\(y_1[0]\\) equals -0.1427178355564866; 0.0560619408765313 multiplied by \\(x[0]\\) plus 0.00020013926756253 multiplied by \\(x[1]\\) plus 0.00522276421792812 multiplied by \\(x[2]\\) plus \\(y_1[1]\\) equals -0.0793504157062673; 0.00954172270751238 multiplied by \\(x[0]\\) minus 0.0594530085708131 multiplied by \\(x[1]\\) minus 0.00960829189584381 multiplied by \\(x[2]\\) plus \\(y_1[2]\\) equals 0.098515604042304; -0.0150503497898215 multiplied by \\(x[0]\\) plus 0.1191163703340514 multiplied by \\(x[1]\\) plus 0.0214501936255565 multiplied by \\(x[2]\\) plus \\(y_1[3]\\) equals -0.0517634861476175; 0.0124789859358057 multiplied by \\(x[0]\\) plus 0.0900343661509949 multiplied by \\(x[1]\\) plus 1.223908566697448 multiplied by \\(x[2]\\) plus \\(t_1[0]\\) equals 0.7015191241991279. Two second-order cone constraints are imposed: the sum of the squares of \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(y_0[3]\\) must not exceed the square of \\(t_0[0]\\), and the sum of the squares of \\(y_1[0]\\), \\(y_1[1]\\), \\(y_1[2]\\), and \\(y_1[3]\\) must not exceed the square of \\(t_1[0]\\). All decision variables, including \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(y_0[0]\\) through \\(y_0[3]\\), \\(y_1[0]\\) through \\(y_1[3]\\), \\(t_0[0]\\), and \\(t_1[0]\\), are free variables. The objective is to minimize the linear objective function while satisfying all linear and second-order cone constraints.",
    "ground_truth": -1.98
  },
  {
    "question": "Minimize 0.081229586973361 times x[0] minus 1.333096182188109 times x[1] plus 0.8259327119806184 times x[2] minus 1.123761222193983 times x[3] subject to five linear equality constraints: 0.566954322069251 times x[0] minus 0.7299810090585189 times x[1] plus 0.5965853226996864 times x[2] plus 0.7075700310276837 times x[3] equals -1.035685810880591; 0.1467098805498692 times x[0] plus 1.276004551518634 times x[1] plus 1.816969609021357 times x[2] minus 0.0616423385342787 times x[3] equals -3.620931266248864; 0.3340088790493272 times x[0] minus 0.7150468301081672 times x[1] minus 0.5567266298909594 times x[2] minus 0.8373889941281421 times x[3] equals -0.2488125442726408; -1.342305011059075 times x[0] plus 1.955549036585348 times x[1] plus 0.0602310986862688 times x[2] minus 0.4485566025786823 times x[3] equals 0.8148614925531417; and 0.662271009764529 times x[0] plus 1.235812465401366 times x[1] minus 0.6684584256202986 times x[2] plus 2.261775134584107 times x[3] equals 4.227927950879132.\n\nThe model includes three second-order cone constraints defined using auxiliary variables y_0, y_1, and y_2, each with three components, and free variables t_0, t_1, and t_2. The auxiliary variables are defined by twelve linear equations involving the decision variables x and the auxiliary variables y and t. For instance, the first auxiliary variable y_0 is defined by three linear equations: -0.00807132776099688 times x[0] minus 0.00829904212968852 times x[1] plus 0.00729131816846323 times x[2] minus 0.0158474183769015 times x[3] plus y_0[0] equals 0.0740447156962421; 0.0398011692418615 times x[0] minus 0.1170083202748537 times x[1] plus 0.0605494567209828 times x[2] plus 0.0296817366716117 times x[3] plus y_0[1] equals -0.0221765972469103; and -0.00578839554637137 times x[0] minus 0.0410660878455097 times x[1] plus 0.021468433180218 times x[2] plus 0.03829764846326 times x[3] plus y_0[2] equals 0.0261113199527866. The variable t_0[0] is defined by -0.5485199622075393 times x[0] plus 2.161356714141078 times x[1] plus 0.4583402094085766 times x[2] plus 0.4120351464853843 times x[3] plus t_0[0] equals 1.070594461920216. Similar sets of equations define y_1 and y_2, and their associated t variables.\n\nThe second-order cone constraints require that the square of t_0[0] must be greater than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2]; the square of t_1[0] must be greater than or equal to the sum of the squares of y_1[0], y_1[1], and y_1[2]; and the square of t_2[0] must be greater than or equal to the sum of the squares of y_2[0], y_2[1], and y_2[2]. All decision variables, including x, y_0, y_1, y_2, t_0, t_1, and t_2, are free to take any real value. The goal is to minimize the total cost while ensuring that all linear equality constraints and second-order cone constraints are satisfied.",
    "answer": -3.67,
    "ori": "13_optmath_bench",
    "index": 136,
    "description": "Minimize 0.081229586973361 times x[0] minus 1.333096182188109 times x[1] plus 0.8259327119806184 times x[2] minus 1.123761222193983 times x[3] subject to five linear equality constraints: 0.566954322069251 times x[0] minus 0.7299810090585189 times x[1] plus 0.5965853226996864 times x[2] plus 0.7075700310276837 times x[3] equals -1.035685810880591; 0.1467098805498692 times x[0] plus 1.276004551518634 times x[1] plus 1.816969609021357 times x[2] minus 0.0616423385342787 times x[3] equals -3.620931266248864; 0.3340088790493272 times x[0] minus 0.7150468301081672 times x[1] minus 0.5567266298909594 times x[2] minus 0.8373889941281421 times x[3] equals -0.2488125442726408; -1.342305011059075 times x[0] plus 1.955549036585348 times x[1] plus 0.0602310986862688 times x[2] minus 0.4485566025786823 times x[3] equals 0.8148614925531417; and 0.662271009764529 times x[0] plus 1.235812465401366 times x[1] minus 0.6684584256202986 times x[2] plus 2.261775134584107 times x[3] equals 4.227927950879132.\n\nThe model includes three second-order cone constraints defined using auxiliary variables y_0, y_1, and y_2, each with three components, and free variables t_0, t_1, and t_2. The auxiliary variables are defined by twelve linear equations involving the decision variables x and the auxiliary variables y and t. For instance, the first auxiliary variable y_0 is defined by three linear equations: -0.00807132776099688 times x[0] minus 0.00829904212968852 times x[1] plus 0.00729131816846323 times x[2] minus 0.0158474183769015 times x[3] plus y_0[0] equals 0.0740447156962421; 0.0398011692418615 times x[0] minus 0.1170083202748537 times x[1] plus 0.0605494567209828 times x[2] plus 0.0296817366716117 times x[3] plus y_0[1] equals -0.0221765972469103; and -0.00578839554637137 times x[0] minus 0.0410660878455097 times x[1] plus 0.021468433180218 times x[2] plus 0.03829764846326 times x[3] plus y_0[2] equals 0.0261113199527866. The variable t_0[0] is defined by -0.5485199622075393 times x[0] plus 2.161356714141078 times x[1] plus 0.4583402094085766 times x[2] plus 0.4120351464853843 times x[3] plus t_0[0] equals 1.070594461920216. Similar sets of equations define y_1 and y_2, and their associated t variables.\n\nThe second-order cone constraints require that the square of t_0[0] must be greater than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2]; the square of t_1[0] must be greater than or equal to the sum of the squares of y_1[0], y_1[1], and y_1[2]; and the square of t_2[0] must be greater than or equal to the sum of the squares of y_2[0], y_2[1], and y_2[2]. All decision variables, including x, y_0, y_1, y_2, t_0, t_1, and t_2, are free to take any real value. The goal is to minimize the total cost while ensuring that all linear equality constraints and second-order cone constraints are satisfied.",
    "ground_truth": -3.67
  },
  {
    "question": "The problem involves minimizing the objective function, which is a linear combination of the decision variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), and \\(x[3]\\) with coefficients -2.044113802210222, -0.591678008651819, -0.9834387040405338, and -0.4216128339992919, respectively. The variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(x[3]\\), \\(y_0[0]\\), \\(y_0[1]\\), \\(y_1[0]\\), and \\(y_1[1]\\) are free to take any real value. There are five linear equality constraints that relate \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), and \\(x[3]\\) to specific constant values, with coefficients 1.583533632933326, -0.8648864187788813, 1.390091961404533, 1.822191081529753, -1.084701129083315, 0.8687853511014955, -1.061622663573521, 0.7234328322930561, 0.5805715615387739, -0.9882875862352942, 1.631714852918525, 0.1752665022129386, -0.2276163723137254, 0.3698287397442833, -1.107798916899263, 1.296533143808007, -1.295052034436542, 0.7550822815717648, 1.130836265772762, -1.018723280622327, 2.067786918679711, -1.455751318094515, -0.4504004313993055, 0.5779356751486215, and -1.462119472214241. \n\nAdditionally, there are five constraints involving \\(y_0[0]\\), \\(y_0[1]\\), \\(y_1[0]\\), \\(y_1[1]\\), \\(t_0[0]\\), and \\(t_1[0]\\), with coefficients 0.0279053133377849, -0.00409039039473968, -0.0080383924189651, -0.2012607045179339, -0.1127331987985564, -0.1809080280498793, 0.094841149057402, -0.1684976328590128, 0.0145782756868836, -0.0421818911353208, 0.7645038993025399, -2.040190789758234, 0.225014606611158, 0.49714383406283, 0.3031138305570918, -0.0152851162771371, 0.198409707999221, 0.1277888002263441, 0.1653012900234249, 0.0294096537175579, 0.0764194503294455, 0.047258889505963, -0.0591645566302213, 0.0247500453597441, 0.066093810913026, -0.1089902399914438, 0.8938484212978033, 0.4688910009639788, -0.3004244670748821, and 1.093947030410214. \n\nThe problem also includes two second-order cone constraints: the square of \\(t_0[0]\\) must be less than or equal to the sum of the squares of \\(y_0[0]\\) and \\(y_0[1]\\), and the square of \\(t_1[0]\\) must be less than or equal to the sum of the squares of \\(y_1[0]\\) and \\(y_1[1]\\). The goal is to determine the optimal values of all decision variables that minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "answer": 2.17,
    "ori": "13_optmath_bench",
    "index": 137,
    "description": "The problem involves minimizing the objective function, which is a linear combination of the decision variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), and \\(x[3]\\) with coefficients -2.044113802210222, -0.591678008651819, -0.9834387040405338, and -0.4216128339992919, respectively. The variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(x[3]\\), \\(y_0[0]\\), \\(y_0[1]\\), \\(y_1[0]\\), and \\(y_1[1]\\) are free to take any real value. There are five linear equality constraints that relate \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), and \\(x[3]\\) to specific constant values, with coefficients 1.583533632933326, -0.8648864187788813, 1.390091961404533, 1.822191081529753, -1.084701129083315, 0.8687853511014955, -1.061622663573521, 0.7234328322930561, 0.5805715615387739, -0.9882875862352942, 1.631714852918525, 0.1752665022129386, -0.2276163723137254, 0.3698287397442833, -1.107798916899263, 1.296533143808007, -1.295052034436542, 0.7550822815717648, 1.130836265772762, -1.018723280622327, 2.067786918679711, -1.455751318094515, -0.4504004313993055, 0.5779356751486215, and -1.462119472214241. \n\nAdditionally, there are five constraints involving \\(y_0[0]\\), \\(y_0[1]\\), \\(y_1[0]\\), \\(y_1[1]\\), \\(t_0[0]\\), and \\(t_1[0]\\), with coefficients 0.0279053133377849, -0.00409039039473968, -0.0080383924189651, -0.2012607045179339, -0.1127331987985564, -0.1809080280498793, 0.094841149057402, -0.1684976328590128, 0.0145782756868836, -0.0421818911353208, 0.7645038993025399, -2.040190789758234, 0.225014606611158, 0.49714383406283, 0.3031138305570918, -0.0152851162771371, 0.198409707999221, 0.1277888002263441, 0.1653012900234249, 0.0294096537175579, 0.0764194503294455, 0.047258889505963, -0.0591645566302213, 0.0247500453597441, 0.066093810913026, -0.1089902399914438, 0.8938484212978033, 0.4688910009639788, -0.3004244670748821, and 1.093947030410214. \n\nThe problem also includes two second-order cone constraints: the square of \\(t_0[0]\\) must be less than or equal to the sum of the squares of \\(y_0[0]\\) and \\(y_0[1]\\), and the square of \\(t_1[0]\\) must be less than or equal to the sum of the squares of \\(y_1[0]\\) and \\(y_1[1]\\). The goal is to determine the optimal values of all decision variables that minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "ground_truth": 2.17
  },
  {
    "question": "The problem involves minimizing a linear objective function with six decision variables \\( x[0] \\) through \\( x[5] \\), where each variable has a specific coefficient: \\( x[0] \\) with -2.058644777783222, \\( x[1] \\) with 0.2416010927247412, \\( x[2] \\) with -0.4181486412362984, \\( x[3] \\) with 0.5114234913219796, \\( x[4] \\) with 0.7386320402187463, and \\( x[5] \\) with -1.172672370815835. The problem includes five linear equality constraints that must be satisfied. The first constraint requires that the weighted sum of the variables, adjusted by factors -0.5367684107949979, 0.1034203788533778, 1.846625038230486, 0.9784353550415096, -1.878216393450231, and -0.7467874898339996, equals 3.5678313588737. The second constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.5352309785306387, -0.8520650729788865, -0.8847016444802787, 1.600400673784742, -0.6170038459749025, and 0.5094850995322819 to 0.1979161022274378. The third constraint requires that the weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.7429110508496402, -0.7085502859117431, -1.428880331198872, -0.838487898882224, -0.4330191528056699, and -1.491505638645529 equals -4.293033952749457. The fourth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 1.389614629752773, 0.702810325846059, -1.416233193493607, 0.6259878762218291, -1.062718067935909, and 1.116816637099358 to 6.052880318149405. The fifth constraint requires that the weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.5035448845365915, -0.0513767067216146, -1.800678426974007, 1.198119996945881, -0.4513781697868756, and -0.1446651828337932 equals 0.3414915225001892. Additionally, the problem includes eight more linear equality constraints involving additional variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). These constraints link the decision variables \\( x[0] \\) through \\( x[5] \\) with the additional variables in specific linear combinations. For instance, the sixth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.0384343819842272, 0.0390068546116138, 0.1797102552048576, -0.00927856470872923, 0.1701908634063454, and -0.1248214943708578 plus \\( y_0[0] \\) to -0.00663951753988017. The seventh constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.1362799231538006, -0.0831864520235293, 0.1112848630570577, 0.1060222181921134, 0.0402874170898317, and -0.0464976478913114 plus \\( y_0[1] \\) to 0.0242095284091262. The eighth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0156129943224916, -0.896947647061286, -1.567254730229088, -0.7037621933777273, 0.180343362346215, and 1.006321968448518 plus \\( t_0[0] \\) to 0.5018287659872952. The ninth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.2332423383309324, -0.0330958699417269, -0.00964072153256004, 0.0585722335710037, 0.0217911804090265, and -0.051126178402744 plus \\( y_1[0] \\) to -0.0968796249195388. The tenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.1151029171245048, 0.1503814324379974, -0.0781335582786794, 0.0402624396659884, -0.0358496162641436, and 0.211819753444535 plus \\( y_1[1] \\) to 0.0293392072741357. The eleventh constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.5215036730393952, 0.9990730184126353, 1.195267064572967, 0.190014887816329, 1.638781801327033, and -1.411081833597206 plus \\( t_1[0] \\) to 0.2585473929490868. The twelfth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0360929813745435, -0.00104760604299632, -0.1784046295918039, -0.0219795512892422, -0.1002032765225464, and 0.0553677513211222 plus \\( y_2[0] \\) to 0.0514139176871232. The thirteenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0830942200094662, -0.1767784677541842, 0.1439818445323525, -0.0133640836810608, 0.1360556372574424, and -0.1331263469306528 plus \\( y_2[1] \\) to -0.0667657097090114. The fourteenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.3082403816753665, 0.1738249328101287, -0.3242604405259034, 0.1914616391261432, 0.8490602240068917, and -1.347767787369367 plus \\( t_2[0] \\) to 0.3484815971142778. The problem also includes three second-order cone constraints that ensure the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) minus the square of \\( t_0[0] \\) is less than or equal to zero, the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) minus the square of \\( t_1[0] \\) is less than or equal to zero, and the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) minus the square of \\( t_2[0] \\) is less than or equal to zero. All variables, including \\( x[0] \\) through \\( x[5] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\), are free to take any real value. The goal is to minimize the objective function while satisfying all linear equality and second-order cone constraints.",
    "answer": -6.85,
    "ori": "13_optmath_bench",
    "index": 138,
    "description": "The problem involves minimizing a linear objective function with six decision variables \\( x[0] \\) through \\( x[5] \\), where each variable has a specific coefficient: \\( x[0] \\) with -2.058644777783222, \\( x[1] \\) with 0.2416010927247412, \\( x[2] \\) with -0.4181486412362984, \\( x[3] \\) with 0.5114234913219796, \\( x[4] \\) with 0.7386320402187463, and \\( x[5] \\) with -1.172672370815835. The problem includes five linear equality constraints that must be satisfied. The first constraint requires that the weighted sum of the variables, adjusted by factors -0.5367684107949979, 0.1034203788533778, 1.846625038230486, 0.9784353550415096, -1.878216393450231, and -0.7467874898339996, equals 3.5678313588737. The second constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.5352309785306387, -0.8520650729788865, -0.8847016444802787, 1.600400673784742, -0.6170038459749025, and 0.5094850995322819 to 0.1979161022274378. The third constraint requires that the weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.7429110508496402, -0.7085502859117431, -1.428880331198872, -0.838487898882224, -0.4330191528056699, and -1.491505638645529 equals -4.293033952749457. The fourth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 1.389614629752773, 0.702810325846059, -1.416233193493607, 0.6259878762218291, -1.062718067935909, and 1.116816637099358 to 6.052880318149405. The fifth constraint requires that the weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.5035448845365915, -0.0513767067216146, -1.800678426974007, 1.198119996945881, -0.4513781697868756, and -0.1446651828337932 equals 0.3414915225001892. Additionally, the problem includes eight more linear equality constraints involving additional variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). These constraints link the decision variables \\( x[0] \\) through \\( x[5] \\) with the additional variables in specific linear combinations. For instance, the sixth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.0384343819842272, 0.0390068546116138, 0.1797102552048576, -0.00927856470872923, 0.1701908634063454, and -0.1248214943708578 plus \\( y_0[0] \\) to -0.00663951753988017. The seventh constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.1362799231538006, -0.0831864520235293, 0.1112848630570577, 0.1060222181921134, 0.0402874170898317, and -0.0464976478913114 plus \\( y_0[1] \\) to 0.0242095284091262. The eighth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0156129943224916, -0.896947647061286, -1.567254730229088, -0.7037621933777273, 0.180343362346215, and 1.006321968448518 plus \\( t_0[0] \\) to 0.5018287659872952. The ninth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.2332423383309324, -0.0330958699417269, -0.00964072153256004, 0.0585722335710037, 0.0217911804090265, and -0.051126178402744 plus \\( y_1[0] \\) to -0.0968796249195388. The tenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.1151029171245048, 0.1503814324379974, -0.0781335582786794, 0.0402624396659884, -0.0358496162641436, and 0.211819753444535 plus \\( y_1[1] \\) to 0.0293392072741357. The eleventh constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.5215036730393952, 0.9990730184126353, 1.195267064572967, 0.190014887816329, 1.638781801327033, and -1.411081833597206 plus \\( t_1[0] \\) to 0.2585473929490868. The twelfth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0360929813745435, -0.00104760604299632, -0.1784046295918039, -0.0219795512892422, -0.1002032765225464, and 0.0553677513211222 plus \\( y_2[0] \\) to 0.0514139176871232. The thirteenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients -0.0830942200094662, -0.1767784677541842, 0.1439818445323525, -0.0133640836810608, 0.1360556372574424, and -0.1331263469306528 plus \\( y_2[1] \\) to -0.0667657097090114. The fourteenth constraint equates a weighted sum of \\( x[0] \\) through \\( x[5] \\) with coefficients 0.3082403816753665, 0.1738249328101287, -0.3242604405259034, 0.1914616391261432, 0.8490602240068917, and -1.347767787369367 plus \\( t_2[0] \\) to 0.3484815971142778. The problem also includes three second-order cone constraints that ensure the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) minus the square of \\( t_0[0] \\) is less than or equal to zero, the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) minus the square of \\( t_1[0] \\) is less than or equal to zero, and the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) minus the square of \\( t_2[0] \\) is less than or equal to zero. All variables, including \\( x[0] \\) through \\( x[5] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\), are free to take any real value. The goal is to minimize the objective function while satisfying all linear equality and second-order cone constraints.",
    "ground_truth": -6.85
  },
  {
    "question": "The problem is to minimize the linear objective function with coefficients -0.2234016903227589 for \\(x[0]\\), 0.0823239307040719 for \\(x[1]\\), -0.3139602147497034 for \\(x[2]\\), and -0.3588305741920246 for \\(x[3]\\). The variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(x[3]\\), \\(y_0[0]\\), \\(y_0[1]\\), and \\(t_0[0]\\) are free. The solution must satisfy six linear equality constraints. The first constraint requires the weighted sum of variables, with coefficients -2.379260712270257 for \\(x[0]\\), -0.0926191997384036 for \\(x[1]\\), 1.500019618890642 for \\(x[2]\\), and -2.240272675043434 for \\(x[3]\\), to equal -2.383475883203837. The second constraint requires the weighted sum, with coefficients 0.0880334820094267 for \\(x[0]\\), -1.902743286220365 for \\(x[1]\\), -1.061143421718847 for \\(x[2]\\), and -0.7298562539833904 for \\(x[3]\\), to equal -0.1651524265365722. The third constraint requires the weighted sum, with coefficients 0.879056298919617 for \\(x[0]\\), -0.0592926915590702 for \\(x[1]\\), 1.530225870090669 for \\(x[2]\\), and 0.7516434368490681 for \\(x[3]\\), to equal -1.840782058087354. The fourth constraint requires the weighted sum, with coefficients -0.7934367479385507 for \\(x[0]\\), 0.0232747502052466 for \\(x[1]\\), -0.6401263883470215 for \\(x[2]\\), and -0.1075051544628913 for \\(x[3]\\), to equal 0.5711825810091148. The fifth constraint requires the weighted sum of variables, with coefficients -0.0926233736251473 for \\(x[0]\\), 0.0599466213459983 for \\(x[1]\\), 0.2106990148269894 for \\(x[2]\\), and -0.139498666863404 for \\(x[3]\\), plus \\(y_0[0]\\), to equal 0.0103572858836726. The sixth constraint requires the weighted sum of variables, with coefficients -0.0912288940130291 for \\(x[0]\\), -0.1581472188037661 for \\(x[1]\\), -0.2376431900824324 for \\(x[2]\\), and -0.1641150951970651 for \\(x[3]\\), plus \\(y_0[1]\\), to equal 0.0072007946533593. The seventh constraint requires the weighted sum of variables, with coefficients -0.4718232097702756 for \\(x[0]\\), -1.786481176156424 for \\(x[1]\\), 5.276204984748865e-04 for \\(x[2]\\), and 0.2812610682665851 for \\(x[3]\\), plus \\(t_0[0]\\), to equal 0.3067145358130309. A quadratic constraint ensures that the sum of the squares of \\(y_0[0]\\) and \\(y_0[1]\\) is less than or equal to the square of \\(t_0[0]\\).",
    "answer": 0.47,
    "ori": "13_optmath_bench",
    "index": 139,
    "description": "The problem is to minimize the linear objective function with coefficients -0.2234016903227589 for \\(x[0]\\), 0.0823239307040719 for \\(x[1]\\), -0.3139602147497034 for \\(x[2]\\), and -0.3588305741920246 for \\(x[3]\\). The variables \\(x[0]\\), \\(x[1]\\), \\(x[2]\\), \\(x[3]\\), \\(y_0[0]\\), \\(y_0[1]\\), and \\(t_0[0]\\) are free. The solution must satisfy six linear equality constraints. The first constraint requires the weighted sum of variables, with coefficients -2.379260712270257 for \\(x[0]\\), -0.0926191997384036 for \\(x[1]\\), 1.500019618890642 for \\(x[2]\\), and -2.240272675043434 for \\(x[3]\\), to equal -2.383475883203837. The second constraint requires the weighted sum, with coefficients 0.0880334820094267 for \\(x[0]\\), -1.902743286220365 for \\(x[1]\\), -1.061143421718847 for \\(x[2]\\), and -0.7298562539833904 for \\(x[3]\\), to equal -0.1651524265365722. The third constraint requires the weighted sum, with coefficients 0.879056298919617 for \\(x[0]\\), -0.0592926915590702 for \\(x[1]\\), 1.530225870090669 for \\(x[2]\\), and 0.7516434368490681 for \\(x[3]\\), to equal -1.840782058087354. The fourth constraint requires the weighted sum, with coefficients -0.7934367479385507 for \\(x[0]\\), 0.0232747502052466 for \\(x[1]\\), -0.6401263883470215 for \\(x[2]\\), and -0.1075051544628913 for \\(x[3]\\), to equal 0.5711825810091148. The fifth constraint requires the weighted sum of variables, with coefficients -0.0926233736251473 for \\(x[0]\\), 0.0599466213459983 for \\(x[1]\\), 0.2106990148269894 for \\(x[2]\\), and -0.139498666863404 for \\(x[3]\\), plus \\(y_0[0]\\), to equal 0.0103572858836726. The sixth constraint requires the weighted sum of variables, with coefficients -0.0912288940130291 for \\(x[0]\\), -0.1581472188037661 for \\(x[1]\\), -0.2376431900824324 for \\(x[2]\\), and -0.1641150951970651 for \\(x[3]\\), plus \\(y_0[1]\\), to equal 0.0072007946533593. The seventh constraint requires the weighted sum of variables, with coefficients -0.4718232097702756 for \\(x[0]\\), -1.786481176156424 for \\(x[1]\\), 5.276204984748865e-04 for \\(x[2]\\), and 0.2812610682665851 for \\(x[3]\\), plus \\(t_0[0]\\), to equal 0.3067145358130309. A quadratic constraint ensures that the sum of the squares of \\(y_0[0]\\) and \\(y_0[1]\\) is less than or equal to the square of \\(t_0[0]\\).",
    "ground_truth": 0.47
  },
  {
    "question": "Determine the optimal amount of resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\) to allocate across three operational areas to minimize the total cost, calculated as 2.238472652501168 multiplied by \\( x[0] \\) plus 1.593692449804477 multiplied by \\( x[1] \\) plus 1.091018724438081 multiplied by \\( x[2] \\). The allocation must satisfy a linear resource balance constraint: 2.086630330627226 multiplied by \\( x[0] \\) plus 0.0977042297800921 multiplied by \\( x[1] \\) plus 0.3238066911742682 multiplied by \\( x[2] \\) equals 0.2728125978918034.\n\nThe problem includes three quadratic cone constraints \\( qc0 \\), \\( qc1 \\), and \\( qc2 \\), which are part of a Second-Order Cone Programming (SOCP) problem. For the first operational area, the quadratic cone constraint \\( qc0 \\) requires that the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) must be less than or equal to the square of \\( t_0[0] \\). Here, \\( y_0[0] \\) is determined by 1.350013394321828 multiplied by \\( x[0] \\) minus 0.2433648689288818 multiplied by \\( x[1] \\) plus 1.170490297808538 multiplied by \\( x[2] \\), which equals -0.854030949971019. Similarly, \\( y_0[1] \\) is determined by -0.5827218400584065 multiplied by \\( x[0] \\) minus 1.214924181090006 multiplied by \\( x[1] \\) minus 0.7100967735067889 multiplied by \\( x[2] \\), which equals 0.1115410551073176. The variable \\( t_0[0] \\) is determined by -0.1042401171821044 multiplied by \\( x[0] \\) plus 0.2613612792965374 multiplied by \\( x[1] \\) plus 1.118900434050682 multiplied by \\( x[2] \\), which equals 0.6038954719472605.\n\nFor the second operational area, the quadratic cone constraint \\( qc1 \\) requires that the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to the square of \\( t_1[0] \\). Here, \\( y_1[0] \\) is determined by 0.1242454238540142 multiplied by \\( x[0] \\) minus 0.2094940308550101 multiplied by \\( x[1] \\) plus 0.0218788315028139 multiplied by \\( x[2] \\), which equals -0.1826683487550716. Similarly, \\( y_1[1] \\) is determined by 0.0612039952350878 multiplied by \\( x[0] \\) plus 0.019467075730508 multiplied by \\( x[1] \\) minus 0.0279175737966843 multiplied by \\( x[2] \\), which equals -0.1133584554034866. The variable \\( t_1[0] \\) is determined by -0.1049189629762404 multiplied by \\( x[0] \\) plus 0.6171636592039963 multiplied by \\( x[1] \\) minus 0.385085431921569 multiplied by \\( x[2] \\), which equals 1.132753956602686.\n\nFor the third operational area, the quadratic cone constraint \\( qc2 \\) requires that the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) must be less than or equal to the square of \\( t_2[0] \\). Here, \\( y_2[0] \\) is determined by -0.1504745044323135 multiplied by \\( x[0] \\) minus 0.1569086648551038 multiplied by \\( x[1] \\) minus 0.1058514836896046 multiplied by \\( x[2] \\), which equals 0.2363416370720583. Similarly, \\( y_2[1] \\) is determined by 0.0825995942902514 multiplied by \\( x[0] \\) minus 0.089460646459489 multiplied by \\( x[1] \\) minus 0.0359085847666962 multiplied by \\( x[2] \\), which equals 0.1827679172343429. The variable \\( t_2[0] \\) is determined by -0.2546431852316068 multiplied by \\( x[0] \\) minus 0.9584080837019103 multiplied by \\( x[1] \\) plus 0.3025850075547174 multiplied by \\( x[2] \\), which equals 1.774740955514529.\n\nAll variables, including \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\), are free to take any real value, as there are no bounds restricting their values. The quadratic cone constraints \\( qc0 \\), \\( qc1 \\), and \\( qc2 \\) are explicitly part of the problem constraints, and the variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\) are auxiliary variables introduced to represent these quadratic cone constraints. The problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the LP data header.",
    "answer": -8.95,
    "ori": "13_optmath_bench",
    "index": 140,
    "description": "Determine the optimal amount of resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\) to allocate across three operational areas to minimize the total cost, calculated as 2.238472652501168 multiplied by \\( x[0] \\) plus 1.593692449804477 multiplied by \\( x[1] \\) plus 1.091018724438081 multiplied by \\( x[2] \\). The allocation must satisfy a linear resource balance constraint: 2.086630330627226 multiplied by \\( x[0] \\) plus 0.0977042297800921 multiplied by \\( x[1] \\) plus 0.3238066911742682 multiplied by \\( x[2] \\) equals 0.2728125978918034.\n\nThe problem includes three quadratic cone constraints \\( qc0 \\), \\( qc1 \\), and \\( qc2 \\), which are part of a Second-Order Cone Programming (SOCP) problem. For the first operational area, the quadratic cone constraint \\( qc0 \\) requires that the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) must be less than or equal to the square of \\( t_0[0] \\). Here, \\( y_0[0] \\) is determined by 1.350013394321828 multiplied by \\( x[0] \\) minus 0.2433648689288818 multiplied by \\( x[1] \\) plus 1.170490297808538 multiplied by \\( x[2] \\), which equals -0.854030949971019. Similarly, \\( y_0[1] \\) is determined by -0.5827218400584065 multiplied by \\( x[0] \\) minus 1.214924181090006 multiplied by \\( x[1] \\) minus 0.7100967735067889 multiplied by \\( x[2] \\), which equals 0.1115410551073176. The variable \\( t_0[0] \\) is determined by -0.1042401171821044 multiplied by \\( x[0] \\) plus 0.2613612792965374 multiplied by \\( x[1] \\) plus 1.118900434050682 multiplied by \\( x[2] \\), which equals 0.6038954719472605.\n\nFor the second operational area, the quadratic cone constraint \\( qc1 \\) requires that the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to the square of \\( t_1[0] \\). Here, \\( y_1[0] \\) is determined by 0.1242454238540142 multiplied by \\( x[0] \\) minus 0.2094940308550101 multiplied by \\( x[1] \\) plus 0.0218788315028139 multiplied by \\( x[2] \\), which equals -0.1826683487550716. Similarly, \\( y_1[1] \\) is determined by 0.0612039952350878 multiplied by \\( x[0] \\) plus 0.019467075730508 multiplied by \\( x[1] \\) minus 0.0279175737966843 multiplied by \\( x[2] \\), which equals -0.1133584554034866. The variable \\( t_1[0] \\) is determined by -0.1049189629762404 multiplied by \\( x[0] \\) plus 0.6171636592039963 multiplied by \\( x[1] \\) minus 0.385085431921569 multiplied by \\( x[2] \\), which equals 1.132753956602686.\n\nFor the third operational area, the quadratic cone constraint \\( qc2 \\) requires that the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) must be less than or equal to the square of \\( t_2[0] \\). Here, \\( y_2[0] \\) is determined by -0.1504745044323135 multiplied by \\( x[0] \\) minus 0.1569086648551038 multiplied by \\( x[1] \\) minus 0.1058514836896046 multiplied by \\( x[2] \\), which equals 0.2363416370720583. Similarly, \\( y_2[1] \\) is determined by 0.0825995942902514 multiplied by \\( x[0] \\) minus 0.089460646459489 multiplied by \\( x[1] \\) minus 0.0359085847666962 multiplied by \\( x[2] \\), which equals 0.1827679172343429. The variable \\( t_2[0] \\) is determined by -0.2546431852316068 multiplied by \\( x[0] \\) minus 0.9584080837019103 multiplied by \\( x[1] \\) plus 0.3025850075547174 multiplied by \\( x[2] \\), which equals 1.774740955514529.\n\nAll variables, including \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\), are free to take any real value, as there are no bounds restricting their values. The quadratic cone constraints \\( qc0 \\), \\( qc1 \\), and \\( qc2 \\) are explicitly part of the problem constraints, and the variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\) are auxiliary variables introduced to represent these quadratic cone constraints. The problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the LP data header.",
    "ground_truth": -8.95
  },
  {
    "question": "The problem involves minimizing a linear objective function with decision variables \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), along with auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\). The objective function coefficients are 0.9775739758894315 for \\( x[0] \\), -1.622521430954005 for \\( x[1] \\), and -0.3823943916427769 for \\( x[2] \\). All variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) are free.\n\nThe constraints include four linear equality constraints. The first constraint ensures that 2.218395151719285 times \\( x[0] \\) minus 0.4934367321170816 times \\( x[1] \\) plus 2.037698386055625 times \\( x[2] \\) equals -7.639024318581815. The second constraint ensures that 0.1288997654276396 times \\( x[0] \\) plus 0.4134151782133442 times \\( x[1] \\) minus 1.016848910244227 times \\( x[2] \\) equals 0.8282605412220725. The third constraint ensures that -0.3888036525234204 times \\( x[0] \\) plus 1.582023744531529 times \\( x[1] \\) plus 0.4853205141377102 times \\( x[2] \\) equals 0.9861388989442696. The fourth constraint ensures that -0.8184959408216979 times \\( x[0] \\) plus 0.1508892622723634 times \\( x[1] \\) plus 0.4877918700202323 times \\( x[2] \\) equals 1.575829009785032.\n\nAdditionally, there are four linear constraints defining \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) in terms of \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\). The first constraint ensures that 0.000682161 times \\( x[0] \\) minus 0.058594741163783 times \\( x[1] \\) minus 0.2214986665992643 times \\( x[2] \\) plus \\( y_0[0] \\) equals 0.0363203305835107. The second constraint ensures that -0.00108977088958764 times \\( x[0] \\) plus 0.0836225593865622 times \\( x[1] \\) minus 0.2893750072155089 times \\( x[2] \\) plus \\( y_0[1] \\) equals -0.1460000637840041. The third constraint ensures that -0.0231877971791914 times \\( x[0] \\) minus 0.0340439160737732 times \\( x[1] \\) minus 0.2441350484603667 times \\( x[2] \\) plus \\( y_0[2] \\) equals 0.0702001695223133. The fourth constraint ensures that 0.8200125377679498 times \\( x[0] \\) minus 0.2688442189065823 times \\( x[1] \\) plus 0.8884584718933239 times \\( x[2] \\) plus \\( t_0[0] \\) equals 0.0172532969418979.\n\nA second-order cone constraint ensures that the square of \\( t_0[0] \\) is less than or equal to the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), and \\( y_0[2] \\), specifically expressed as \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 \\leq 0\\). The goal is to determine the values of \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) that minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "answer": -2.55,
    "ori": "13_optmath_bench",
    "index": 141,
    "description": "The problem involves minimizing a linear objective function with decision variables \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), along with auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\). The objective function coefficients are 0.9775739758894315 for \\( x[0] \\), -1.622521430954005 for \\( x[1] \\), and -0.3823943916427769 for \\( x[2] \\). All variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) are free.\n\nThe constraints include four linear equality constraints. The first constraint ensures that 2.218395151719285 times \\( x[0] \\) minus 0.4934367321170816 times \\( x[1] \\) plus 2.037698386055625 times \\( x[2] \\) equals -7.639024318581815. The second constraint ensures that 0.1288997654276396 times \\( x[0] \\) plus 0.4134151782133442 times \\( x[1] \\) minus 1.016848910244227 times \\( x[2] \\) equals 0.8282605412220725. The third constraint ensures that -0.3888036525234204 times \\( x[0] \\) plus 1.582023744531529 times \\( x[1] \\) plus 0.4853205141377102 times \\( x[2] \\) equals 0.9861388989442696. The fourth constraint ensures that -0.8184959408216979 times \\( x[0] \\) plus 0.1508892622723634 times \\( x[1] \\) plus 0.4877918700202323 times \\( x[2] \\) equals 1.575829009785032.\n\nAdditionally, there are four linear constraints defining \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) in terms of \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\). The first constraint ensures that 0.000682161 times \\( x[0] \\) minus 0.058594741163783 times \\( x[1] \\) minus 0.2214986665992643 times \\( x[2] \\) plus \\( y_0[0] \\) equals 0.0363203305835107. The second constraint ensures that -0.00108977088958764 times \\( x[0] \\) plus 0.0836225593865622 times \\( x[1] \\) minus 0.2893750072155089 times \\( x[2] \\) plus \\( y_0[1] \\) equals -0.1460000637840041. The third constraint ensures that -0.0231877971791914 times \\( x[0] \\) minus 0.0340439160737732 times \\( x[1] \\) minus 0.2441350484603667 times \\( x[2] \\) plus \\( y_0[2] \\) equals 0.0702001695223133. The fourth constraint ensures that 0.8200125377679498 times \\( x[0] \\) minus 0.2688442189065823 times \\( x[1] \\) plus 0.8884584718933239 times \\( x[2] \\) plus \\( t_0[0] \\) equals 0.0172532969418979.\n\nA second-order cone constraint ensures that the square of \\( t_0[0] \\) is less than or equal to the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), and \\( y_0[2] \\), specifically expressed as \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 \\leq 0\\). The goal is to determine the values of \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) that minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "ground_truth": -2.55
  },
  {
    "question": "The problem involves minimizing a linear objective function defined by the coefficients 0.0169907447059004 for x[0], -0.1354658035191434 for x[1], and 0.1439797319070909 for x[2]. The optimization is subject to four linear equality constraints that balance the relationships between the variables x[0], x[1], and x[2]. The first constraint requires that 0.8636590559284738 times x[0] plus 0.0966833012301337 times x[1] minus 0.3152291953090132 times x[2] equals 0.8843372418353203. The second constraint requires that -1.308791116694014 times x[0] plus 1.026765786674754 times x[1] minus 1.641892627931514 times x[2] equals -3.068584167132096. The third constraint requires that -2.022894561574939 times x[0] plus 1.078027292135305 times x[1] minus 0.6806946931130862 times x[2] equals -3.878545364964277. The fourth constraint requires that 0.5909183755526639 times x[0] minus 1.227754194746086 times x[1] plus 0.9978468809169225 times x[2] equals 2.373932955061617. \n\nThe problem also includes twelve additional linear constraints that introduce auxiliary variables y_0, y_1, y_2, and t_0, t_1, t_2. These constraints balance the primary variables x[0], x[1], and x[2] with the auxiliary variables. For example, constraint R4 requires that -0.0830895372455731 times x[0] plus 0.140196500160931 times x[1] plus 0.0835731570777216 times x[2] plus y_0[0] equals -0.0542756929304628. Similarly, constraints R5 through R15 impose similar relationships involving y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0]. \n\nThe problem also includes three second-order cone constraints, qc0, qc1, and qc2, which ensure that the sum of the squares of the auxiliary variables y_0[0], y_0[1], and y_0[2] does not exceed the square of t_0[0], the sum of the squares of y_1[0], y_1[1], and y_1[2] does not exceed the square of t_1[0], and the sum of the squares of y_2[0], y_2[1], and y_2[2] does not exceed the square of t_2[0]. All variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all constraints.",
    "answer": 0.21,
    "ori": "13_optmath_bench",
    "index": 142,
    "description": "The problem involves minimizing a linear objective function defined by the coefficients 0.0169907447059004 for x[0], -0.1354658035191434 for x[1], and 0.1439797319070909 for x[2]. The optimization is subject to four linear equality constraints that balance the relationships between the variables x[0], x[1], and x[2]. The first constraint requires that 0.8636590559284738 times x[0] plus 0.0966833012301337 times x[1] minus 0.3152291953090132 times x[2] equals 0.8843372418353203. The second constraint requires that -1.308791116694014 times x[0] plus 1.026765786674754 times x[1] minus 1.641892627931514 times x[2] equals -3.068584167132096. The third constraint requires that -2.022894561574939 times x[0] plus 1.078027292135305 times x[1] minus 0.6806946931130862 times x[2] equals -3.878545364964277. The fourth constraint requires that 0.5909183755526639 times x[0] minus 1.227754194746086 times x[1] plus 0.9978468809169225 times x[2] equals 2.373932955061617. \n\nThe problem also includes twelve additional linear constraints that introduce auxiliary variables y_0, y_1, y_2, and t_0, t_1, t_2. These constraints balance the primary variables x[0], x[1], and x[2] with the auxiliary variables. For example, constraint R4 requires that -0.0830895372455731 times x[0] plus 0.140196500160931 times x[1] plus 0.0835731570777216 times x[2] plus y_0[0] equals -0.0542756929304628. Similarly, constraints R5 through R15 impose similar relationships involving y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0]. \n\nThe problem also includes three second-order cone constraints, qc0, qc1, and qc2, which ensure that the sum of the squares of the auxiliary variables y_0[0], y_0[1], and y_0[2] does not exceed the square of t_0[0], the sum of the squares of y_1[0], y_1[1], and y_1[2] does not exceed the square of t_1[0], and the sum of the squares of y_2[0], y_2[1], and y_2[2] does not exceed the square of t_2[0]. All variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all constraints.",
    "ground_truth": 0.21
  },
  {
    "question": "Minimize the total cost of resource allocation, where the cost coefficients for the variables x[0] to x[6] are -0.2747522145296182, -1.766479699359979, 0.7843967105070561, 0.1559911408895964, -0.891327664664444, -0.2108190112467947, and -0.4779719262070241, respectively. The allocation must satisfy five equality constraints:  \n1. The allocation for x[0] multiplied by 1.015905804200365, minus the allocation for x[1] multiplied by 1.075563368516513, plus the allocation for x[2] multiplied by 1.354422581651652, plus the allocation for x[3] multiplied by 1.231175719391763, minus the allocation for x[4] multiplied by 0.5695498149899738, minus the allocation for x[5] multiplied by 0.0845431272925385, minus the allocation for x[6] multiplied by 0.945839019408856, must equal -0.0350333551254621.  \n2. The allocation for x[0] multiplied by 0.1021906812588868, plus the allocation for x[1] multiplied by 1.017649603494175, plus the allocation for x[2] multiplied by 0.7113625469010652, minus the allocation for x[3] multiplied by 0.7845975403828425, minus the allocation for x[4] multiplied by 0.1330475619361555, minus the allocation for x[5] multiplied by 0.2027851245783147, minus the allocation for x[6] multiplied by 0.4907635167746233, must equal -0.0890746280206778.  \n3. The allocation for x[0] multiplied by -0.0691151611879505, minus the allocation for x[1] multiplied by 0.1726234142770679, plus the allocation for x[2] multiplied by 0.7490870928543292, minus the allocation for x[3] multiplied by 0.0017337760468129, minus the allocation for x[4] multiplied by 0.9675143456769632, minus the allocation for x[5] multiplied by 0.6700478590428591, minus the allocation for x[6] multiplied by 0.3470673767061095, must equal -2.198650485794045.  \n4. The allocation for x[0] multiplied by -0.1853251444505973, minus the allocation for x[1] multiplied by 1.849600638660094, minus the allocation for x[2] multiplied by 1.508370034295556, minus the allocation for x[3] multiplied by 0.9668525673953132, minus the allocation for x[4] multiplied by 1.21156196565678, minus the allocation for x[5] multiplied by 0.6645469549418966, plus the allocation for x[6] multiplied by 1.661638743910969, must equal -4.829481983044288.  \n5. The allocation for x[0] multiplied by 0.8891607518271019, plus the allocation for x[1] multiplied by 0.8384286881235276, minus the allocation for x[2] multiplied by 0.8035031028628979, minus the allocation for x[3] multiplied by 1.092054353478263, plus the allocation for x[4] multiplied by 0.3420691219898985, plus the allocation for x[5] multiplied by 0.1291789846691225, plus the allocation for x[6] multiplied by 2.02029578986399, must equal 0.8991262576526948.  \n\nAdditionally, there are four linear constraints involving auxiliary variables y_0[0], y_0[1], y_0[2], and t_0[0]:  \n1. The allocation for x[0] multiplied by 0.1370623147413594, minus the allocation for x[1] multiplied by 0.0955523959954012, minus the allocation for x[2] multiplied by 0.1070159267992108, minus the allocation for x[3] multiplied by 0.044283559484152, plus the allocation for x[4] multiplied by 0.2052751838377566, minus the allocation for x[5] multiplied by 0.0472147055355524, plus the allocation for x[6] multiplied by 0.0263779101242163, plus the auxiliary variable y_0[0], must equal -0.1372906598086168.  \n2. The allocation for x[0] multiplied by -0.0864033173525697, minus the allocation for x[1] multiplied by 0.0242389263268966, plus the allocation for x[2] multiplied by 0.0198400163659476, minus the allocation for x[3] multiplied by 0.0529154412212283, plus the allocation for x[4] multiplied by 0.0919575570765138, minus the allocation for x[5] multiplied by 0.0465630198887696, minus the allocation for x[6] multiplied by 0.0415047822548149, plus the auxiliary variable y_0[1], must equal -0.1090956146371356.  \n3. The allocation for x[0] multiplied by -0.0493566419623072, plus the allocation for x[1] multiplied by 0.0190877037065351, minus the allocation for x[2] multiplied by 0.0625676089375108, plus the allocation for x[3] multiplied by 0.0152602958492, minus the allocation for x[4] multiplied by 0.00439851178580794, plus the allocation for x[5] multiplied by 0.1593300015509853, plus the allocation for x[6] multiplied by 0.1099457671812097, plus the auxiliary variable y_0[2], must equal -0.018160978920798.  \n4. The allocation for x[0] multiplied by 2.17906321051382, plus the allocation for x[1] multiplied by 0.2404505380691451, minus the allocation for x[2] multiplied by 1.273156876389871, minus the allocation for x[3] multiplied by 1.521652877877997, minus the allocation for x[4] multiplied by 0.9431372726898773, minus the allocation for x[5] multiplied by 0.9371176801678375, minus the allocation for x[6] multiplied by 1.072428152750414, plus the auxiliary variable t_0[0], must equal 1.636356226721274.  \n\nA second-order cone constraint requires that the negative square of the auxiliary variable t_0[0] plus the sum of the squares of the auxiliary variables y_0[0], y_0[1], and y_0[2] must be less than or equal to zero. All decision variables, including x[0] to x[6], y_0[0], y_0[1], y_0[2], and t_0[0], are free and unbounded. The goal is to minimize the total cost while satisfying all these constraints.",
    "answer": -3.74,
    "ori": "13_optmath_bench",
    "index": 143,
    "description": "Minimize the total cost of resource allocation, where the cost coefficients for the variables x[0] to x[6] are -0.2747522145296182, -1.766479699359979, 0.7843967105070561, 0.1559911408895964, -0.891327664664444, -0.2108190112467947, and -0.4779719262070241, respectively. The allocation must satisfy five equality constraints:  \n1. The allocation for x[0] multiplied by 1.015905804200365, minus the allocation for x[1] multiplied by 1.075563368516513, plus the allocation for x[2] multiplied by 1.354422581651652, plus the allocation for x[3] multiplied by 1.231175719391763, minus the allocation for x[4] multiplied by 0.5695498149899738, minus the allocation for x[5] multiplied by 0.0845431272925385, minus the allocation for x[6] multiplied by 0.945839019408856, must equal -0.0350333551254621.  \n2. The allocation for x[0] multiplied by 0.1021906812588868, plus the allocation for x[1] multiplied by 1.017649603494175, plus the allocation for x[2] multiplied by 0.7113625469010652, minus the allocation for x[3] multiplied by 0.7845975403828425, minus the allocation for x[4] multiplied by 0.1330475619361555, minus the allocation for x[5] multiplied by 0.2027851245783147, minus the allocation for x[6] multiplied by 0.4907635167746233, must equal -0.0890746280206778.  \n3. The allocation for x[0] multiplied by -0.0691151611879505, minus the allocation for x[1] multiplied by 0.1726234142770679, plus the allocation for x[2] multiplied by 0.7490870928543292, minus the allocation for x[3] multiplied by 0.0017337760468129, minus the allocation for x[4] multiplied by 0.9675143456769632, minus the allocation for x[5] multiplied by 0.6700478590428591, minus the allocation for x[6] multiplied by 0.3470673767061095, must equal -2.198650485794045.  \n4. The allocation for x[0] multiplied by -0.1853251444505973, minus the allocation for x[1] multiplied by 1.849600638660094, minus the allocation for x[2] multiplied by 1.508370034295556, minus the allocation for x[3] multiplied by 0.9668525673953132, minus the allocation for x[4] multiplied by 1.21156196565678, minus the allocation for x[5] multiplied by 0.6645469549418966, plus the allocation for x[6] multiplied by 1.661638743910969, must equal -4.829481983044288.  \n5. The allocation for x[0] multiplied by 0.8891607518271019, plus the allocation for x[1] multiplied by 0.8384286881235276, minus the allocation for x[2] multiplied by 0.8035031028628979, minus the allocation for x[3] multiplied by 1.092054353478263, plus the allocation for x[4] multiplied by 0.3420691219898985, plus the allocation for x[5] multiplied by 0.1291789846691225, plus the allocation for x[6] multiplied by 2.02029578986399, must equal 0.8991262576526948.  \n\nAdditionally, there are four linear constraints involving auxiliary variables y_0[0], y_0[1], y_0[2], and t_0[0]:  \n1. The allocation for x[0] multiplied by 0.1370623147413594, minus the allocation for x[1] multiplied by 0.0955523959954012, minus the allocation for x[2] multiplied by 0.1070159267992108, minus the allocation for x[3] multiplied by 0.044283559484152, plus the allocation for x[4] multiplied by 0.2052751838377566, minus the allocation for x[5] multiplied by 0.0472147055355524, plus the allocation for x[6] multiplied by 0.0263779101242163, plus the auxiliary variable y_0[0], must equal -0.1372906598086168.  \n2. The allocation for x[0] multiplied by -0.0864033173525697, minus the allocation for x[1] multiplied by 0.0242389263268966, plus the allocation for x[2] multiplied by 0.0198400163659476, minus the allocation for x[3] multiplied by 0.0529154412212283, plus the allocation for x[4] multiplied by 0.0919575570765138, minus the allocation for x[5] multiplied by 0.0465630198887696, minus the allocation for x[6] multiplied by 0.0415047822548149, plus the auxiliary variable y_0[1], must equal -0.1090956146371356.  \n3. The allocation for x[0] multiplied by -0.0493566419623072, plus the allocation for x[1] multiplied by 0.0190877037065351, minus the allocation for x[2] multiplied by 0.0625676089375108, plus the allocation for x[3] multiplied by 0.0152602958492, minus the allocation for x[4] multiplied by 0.00439851178580794, plus the allocation for x[5] multiplied by 0.1593300015509853, plus the allocation for x[6] multiplied by 0.1099457671812097, plus the auxiliary variable y_0[2], must equal -0.018160978920798.  \n4. The allocation for x[0] multiplied by 2.17906321051382, plus the allocation for x[1] multiplied by 0.2404505380691451, minus the allocation for x[2] multiplied by 1.273156876389871, minus the allocation for x[3] multiplied by 1.521652877877997, minus the allocation for x[4] multiplied by 0.9431372726898773, minus the allocation for x[5] multiplied by 0.9371176801678375, minus the allocation for x[6] multiplied by 1.072428152750414, plus the auxiliary variable t_0[0], must equal 1.636356226721274.  \n\nA second-order cone constraint requires that the negative square of the auxiliary variable t_0[0] plus the sum of the squares of the auxiliary variables y_0[0], y_0[1], and y_0[2] must be less than or equal to zero. All decision variables, including x[0] to x[6], y_0[0], y_0[1], y_0[2], and t_0[0], are free and unbounded. The goal is to minimize the total cost while satisfying all these constraints.",
    "ground_truth": -3.74
  },
  {
    "question": "The production manager must determine the optimal levels of three components, referred to as Component A, Component B, and Component C, to minimize the objective function defined by 1.069640799533941 times the level of Component A minus 1.616200142169644 times the level of Component B minus 1.486492226609768 times the level of Component C. The production levels of Components A, B, and C, as well as the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to vary, and the process is subject to several constraints.\n\nFirst, the production levels must satisfy three linear equality constraints. The first requires that -1.44151739228461 times the level of Component A plus 3.168186412960231 times the level of Component B minus 1.939318306738097 times the level of Component C equals -0.1920883547257966. The second requires that -2.518157292057484 times the level of Component A minus 0.045850744657515 times the level of Component B plus 0.8181912066930375 times the level of Component C equals 4.883115462374718. The third requires that -1.850469185521618 times the level of Component A plus 0.4312499690020329 times the level of Component B minus 0.7557135832325144 times the level of Component C equals 0.092955763950354.\n\nAdditionally, the production process involves four auxiliary variables, y_0[0], y_0[1], y_0[2], and y_0[3], which must satisfy four resource allocation constraints. The first requires that -0.0609720704349455 times the level of Component A plus 0.0577626224097794 times the level of Component B plus 0.1279201721670446 times the level of Component C plus y_0[0] equals 0.1618518754288826. The second requires that -0.033065184399102 times the level of Component A plus 0.0448028105084557 times the level of Component B minus 0.1129590164777731 times the level of Component C plus y_0[1] equals -0.0270310934062265. The third requires that 0.084397043540958 times the level of Component A plus 0.0393016756676922 times the level of Component B plus 0.0346841557930454 times the level of Component C plus y_0[2] equals -0.0279180675961654. The fourth requires that 0.0184000253815845 times the level of Component A minus 0.00348695513114734 times the level of Component B minus 0.069624774030688 times the level of Component C plus y_0[3] equals 0.1874514710284287.\n\nA second-order cone constraint must also be satisfied, where the sum of the squares of y_0[0], y_0[1], y_0[2], and y_0[3] minus the square of t_0[0] must be less than or equal to zero. The variable t_0[0] is determined by the production levels of Components A, B, and C, such that -0.4776208627305155 times the level of Component A minus 0.0366363201101301 times the level of Component B minus 0.5186224190772866 times the level of Component C plus t_0[0] equals 0.309414690634093.\n\nThe objective is to minimize the value of the objective function while satisfying all the above constraints and ensuring that the levels of Components A, B, and C, as well as the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to vary within the given constraints. This problem is a Second-Order Cone Programming (SOCP) problem, characterized by the second-order cone constraint that ties the auxiliary variables together in a specific relationship.",
    "answer": -7.76,
    "ori": "13_optmath_bench",
    "index": 144,
    "description": "The production manager must determine the optimal levels of three components, referred to as Component A, Component B, and Component C, to minimize the objective function defined by 1.069640799533941 times the level of Component A minus 1.616200142169644 times the level of Component B minus 1.486492226609768 times the level of Component C. The production levels of Components A, B, and C, as well as the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to vary, and the process is subject to several constraints.\n\nFirst, the production levels must satisfy three linear equality constraints. The first requires that -1.44151739228461 times the level of Component A plus 3.168186412960231 times the level of Component B minus 1.939318306738097 times the level of Component C equals -0.1920883547257966. The second requires that -2.518157292057484 times the level of Component A minus 0.045850744657515 times the level of Component B plus 0.8181912066930375 times the level of Component C equals 4.883115462374718. The third requires that -1.850469185521618 times the level of Component A plus 0.4312499690020329 times the level of Component B minus 0.7557135832325144 times the level of Component C equals 0.092955763950354.\n\nAdditionally, the production process involves four auxiliary variables, y_0[0], y_0[1], y_0[2], and y_0[3], which must satisfy four resource allocation constraints. The first requires that -0.0609720704349455 times the level of Component A plus 0.0577626224097794 times the level of Component B plus 0.1279201721670446 times the level of Component C plus y_0[0] equals 0.1618518754288826. The second requires that -0.033065184399102 times the level of Component A plus 0.0448028105084557 times the level of Component B minus 0.1129590164777731 times the level of Component C plus y_0[1] equals -0.0270310934062265. The third requires that 0.084397043540958 times the level of Component A plus 0.0393016756676922 times the level of Component B plus 0.0346841557930454 times the level of Component C plus y_0[2] equals -0.0279180675961654. The fourth requires that 0.0184000253815845 times the level of Component A minus 0.00348695513114734 times the level of Component B minus 0.069624774030688 times the level of Component C plus y_0[3] equals 0.1874514710284287.\n\nA second-order cone constraint must also be satisfied, where the sum of the squares of y_0[0], y_0[1], y_0[2], and y_0[3] minus the square of t_0[0] must be less than or equal to zero. The variable t_0[0] is determined by the production levels of Components A, B, and C, such that -0.4776208627305155 times the level of Component A minus 0.0366363201101301 times the level of Component B minus 0.5186224190772866 times the level of Component C plus t_0[0] equals 0.309414690634093.\n\nThe objective is to minimize the value of the objective function while satisfying all the above constraints and ensuring that the levels of Components A, B, and C, as well as the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to vary within the given constraints. This problem is a Second-Order Cone Programming (SOCP) problem, characterized by the second-order cone constraint that ties the auxiliary variables together in a specific relationship.",
    "ground_truth": -7.76
  },
  {
    "question": "Minimize the objective function with cost coefficients -0.1919592146476727 for x[0], -1.473647303839492 for x[1], and 2.304735407761341 for x[2]. The problem is subject to three strict equality constraints: (1) -1.635895473616174 x[0] - 0.3973211001807447 x[1] + 0.9471007364101932 x[2] must equal -1.151224267166901, labeled as linear_eq[0]; (2) -0.5249535603075616 x[0] + 0.3668073807989349 x[1] - 0.7858336216136411 x[2] must equal 0.2111440590441619, labeled as linear_eq[1]; and (3) -1.91474276776438 x[0] - 0.0172618223950067 x[1] - 0.4534063203075578 x[2] must equal -0.0637133383926026, labeled as linear_eq[2].\n\nAdditionally, four auxiliary variables y_0[0], y_0[1], y_0[2], and y_0[3] are introduced, each subject to linear constraints: (1) -0.1884394252535835 x[0] + 0.0177104249784969 x[1] + 0.0986130842848287 x[2] + y_0[0] must equal 0.0043955531724021, labeled as R3; (2) -0.0708818331240574 x[0] - 0.0215819660876361 x[1] - 0.0616654799104094 x[2] + y_0[1] must equal 0.0879019749446116, labeled as R4; (3) -0.0907143884234421 x[0] + 0.0750697315409076 x[1] - 0.1169779589661307 x[2] + y_0[2] must equal 0.0357726532121181, labeled as R5; and (4) -0.1820309484664378 x[0] + 0.0261698752429371 x[1] + 0.0667294286775777 x[2] + y_0[3] must equal 0.0118088378651355, labeled as R6.\n\nA decision variable t_0[0] is introduced, subject to the constraint -0.2396501315769039 x[0] + 0.3255209569765619 x[1] + 0.2624492403208943 x[2] + t_0[0] must equal 1.588464205354944, labeled as R7. A second-order cone constraint labeled as qc0 is imposed, ensuring that the sum of the squares of y_0[0], y_0[1], y_0[2], and y_0[3] does not exceed the square of t_0[0], expressed as - t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 + y_0[3]^2 <= 0. All decision variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to take any real value. The goal is to determine the optimal values for these variables to minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "answer": -0.56,
    "ori": "13_optmath_bench",
    "index": 145,
    "description": "Minimize the objective function with cost coefficients -0.1919592146476727 for x[0], -1.473647303839492 for x[1], and 2.304735407761341 for x[2]. The problem is subject to three strict equality constraints: (1) -1.635895473616174 x[0] - 0.3973211001807447 x[1] + 0.9471007364101932 x[2] must equal -1.151224267166901, labeled as linear_eq[0]; (2) -0.5249535603075616 x[0] + 0.3668073807989349 x[1] - 0.7858336216136411 x[2] must equal 0.2111440590441619, labeled as linear_eq[1]; and (3) -1.91474276776438 x[0] - 0.0172618223950067 x[1] - 0.4534063203075578 x[2] must equal -0.0637133383926026, labeled as linear_eq[2].\n\nAdditionally, four auxiliary variables y_0[0], y_0[1], y_0[2], and y_0[3] are introduced, each subject to linear constraints: (1) -0.1884394252535835 x[0] + 0.0177104249784969 x[1] + 0.0986130842848287 x[2] + y_0[0] must equal 0.0043955531724021, labeled as R3; (2) -0.0708818331240574 x[0] - 0.0215819660876361 x[1] - 0.0616654799104094 x[2] + y_0[1] must equal 0.0879019749446116, labeled as R4; (3) -0.0907143884234421 x[0] + 0.0750697315409076 x[1] - 0.1169779589661307 x[2] + y_0[2] must equal 0.0357726532121181, labeled as R5; and (4) -0.1820309484664378 x[0] + 0.0261698752429371 x[1] + 0.0667294286775777 x[2] + y_0[3] must equal 0.0118088378651355, labeled as R6.\n\nA decision variable t_0[0] is introduced, subject to the constraint -0.2396501315769039 x[0] + 0.3255209569765619 x[1] + 0.2624492403208943 x[2] + t_0[0] must equal 1.588464205354944, labeled as R7. A second-order cone constraint labeled as qc0 is imposed, ensuring that the sum of the squares of y_0[0], y_0[1], y_0[2], and y_0[3] does not exceed the square of t_0[0], expressed as - t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 + y_0[3]^2 <= 0. All decision variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_0[3], and t_0[0], are free to take any real value. The goal is to determine the optimal values for these variables to minimize the objective function while satisfying all constraints. This is a Second-Order Cone Programming (SOCP) problem.",
    "ground_truth": -0.56
  },
  {
    "question": "Minimize the objective function defined as 1.416733013504254 times the first decision variable minus 1.637403309183765 times the second decision variable plus 0.4022638456918747 times the third decision variable. The problem includes three linear equality constraints: the first equality constraint specifies that 0.1616012453467476 times the first variable minus 0.8306137706187448 times the second variable minus 0.1515288797410668 times the third variable equals -1.643419668997376. The second equality constraint specifies that 1.456169241005894 times the first variable plus 0.5395849002520692 times the second variable minus 0.8149223903970267 times the third variable equals 1.699940269626918. The third equality constraint specifies that 0.4277456985899902 times the first variable minus 0.5463295579766617 times the second variable plus 1.434710626115096 times the third variable equals -3.331337036084423.\n\nThere are ten linear constraints involving auxiliary and throughput variables. The first three constraints involve the first set of auxiliary variables: the first constraint specifies that 0.0771566555713033 times the first variable plus 0.1116037485944799 times the second variable minus 0.0869350722337483 times the third variable plus the first auxiliary variable equals 0.0620112102329036. The second constraint specifies that 0.0616561304966069 times the first variable minus 0.0974104451697517 times the second variable plus 0.0731223386150885 times the third variable plus the second auxiliary variable equals -0.0587197478672789. The third constraint specifies that -0.0081168698754745 times the first variable plus 0.1006466302551332 times the second variable plus 0.0871949253632896 times the third variable plus the third auxiliary variable equals 0.1492287513423473. The fourth constraint involves the first throughput variable and specifies that 0.7878086620078162 times the first variable minus 1.237192350711952 times the second variable plus 0.0891701482981527 times the third variable plus the first throughput variable equals 0.0451513700840946.\n\nThe next three constraints involve the second set of auxiliary variables: the fifth constraint specifies that -0.0877923363815518 times the first variable plus 0.0435833077366723 times the second variable plus 0.2441522313227069 times the third variable plus the fourth auxiliary variable equals -0.0455285314769021. The sixth constraint specifies that 0.1269499650822233 times the first variable minus 0.1249417310147306 times the second variable plus 0.0823756522034219 times the third variable plus the fifth auxiliary variable equals 0.1088319552421044. The seventh constraint specifies that -6.71937e-07 times the first variable plus 0.1218393680025435 times the second variable plus 0.1838094221276996 times the third variable plus the sixth auxiliary variable equals -0.0248992942856434. The eighth constraint involves the second throughput variable and specifies that 1.611447749097356 times the first variable minus 0.9783611539447722 times the second variable minus 0.3250051330062018 times the third variable plus the second throughput variable equals 0.8152009008108351.\n\nTwo second-order cone constraints are included: the first specifies that the square of the first throughput variable subtracted from the sum of the squares of the first three auxiliary variables must be less than or equal to zero. The second specifies that the square of the second throughput variable subtracted from the sum of the squares of the second three auxiliary variables must be less than or equal to zero. All decision variables, auxiliary variables, and throughput variables are unrestricted in sign and can take any real value.",
    "answer": -4.65,
    "ori": "13_optmath_bench",
    "index": 146,
    "description": "Minimize the objective function defined as 1.416733013504254 times the first decision variable minus 1.637403309183765 times the second decision variable plus 0.4022638456918747 times the third decision variable. The problem includes three linear equality constraints: the first equality constraint specifies that 0.1616012453467476 times the first variable minus 0.8306137706187448 times the second variable minus 0.1515288797410668 times the third variable equals -1.643419668997376. The second equality constraint specifies that 1.456169241005894 times the first variable plus 0.5395849002520692 times the second variable minus 0.8149223903970267 times the third variable equals 1.699940269626918. The third equality constraint specifies that 0.4277456985899902 times the first variable minus 0.5463295579766617 times the second variable plus 1.434710626115096 times the third variable equals -3.331337036084423.\n\nThere are ten linear constraints involving auxiliary and throughput variables. The first three constraints involve the first set of auxiliary variables: the first constraint specifies that 0.0771566555713033 times the first variable plus 0.1116037485944799 times the second variable minus 0.0869350722337483 times the third variable plus the first auxiliary variable equals 0.0620112102329036. The second constraint specifies that 0.0616561304966069 times the first variable minus 0.0974104451697517 times the second variable plus 0.0731223386150885 times the third variable plus the second auxiliary variable equals -0.0587197478672789. The third constraint specifies that -0.0081168698754745 times the first variable plus 0.1006466302551332 times the second variable plus 0.0871949253632896 times the third variable plus the third auxiliary variable equals 0.1492287513423473. The fourth constraint involves the first throughput variable and specifies that 0.7878086620078162 times the first variable minus 1.237192350711952 times the second variable plus 0.0891701482981527 times the third variable plus the first throughput variable equals 0.0451513700840946.\n\nThe next three constraints involve the second set of auxiliary variables: the fifth constraint specifies that -0.0877923363815518 times the first variable plus 0.0435833077366723 times the second variable plus 0.2441522313227069 times the third variable plus the fourth auxiliary variable equals -0.0455285314769021. The sixth constraint specifies that 0.1269499650822233 times the first variable minus 0.1249417310147306 times the second variable plus 0.0823756522034219 times the third variable plus the fifth auxiliary variable equals 0.1088319552421044. The seventh constraint specifies that -6.71937e-07 times the first variable plus 0.1218393680025435 times the second variable plus 0.1838094221276996 times the third variable plus the sixth auxiliary variable equals -0.0248992942856434. The eighth constraint involves the second throughput variable and specifies that 1.611447749097356 times the first variable minus 0.9783611539447722 times the second variable minus 0.3250051330062018 times the third variable plus the second throughput variable equals 0.8152009008108351.\n\nTwo second-order cone constraints are included: the first specifies that the square of the first throughput variable subtracted from the sum of the squares of the first three auxiliary variables must be less than or equal to zero. The second specifies that the square of the second throughput variable subtracted from the sum of the squares of the second three auxiliary variables must be less than or equal to zero. All decision variables, auxiliary variables, and throughput variables are unrestricted in sign and can take any real value.",
    "ground_truth": -4.65
  },
  {
    "question": "The goal is to minimize the total cost determined by the weighted sum of resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), where \\( x[0] \\) contributes 1.161237384198499 units of cost per unit allocated, \\( x[1] \\) reduces the cost by 0.166305801898613 units per unit allocated, and \\( x[2] \\) reduces the cost by 0.4010222263993871 units per unit allocated. The allocation must satisfy four strict equality conditions: the first requires -0.8171434027373111 units of \\( x[0] \\), 0.0148992990791839 units of \\( x[1] \\), and -1.624552817012578 units of \\( x[2] \\) to equal -2.266806032684915; the second requires 0.5642952588239045 units of \\( x[0] \\), -1.323990231764886 units of \\( x[1] \\), and 1.432095008297531 units of \\( x[2] \\) to equal 2.393666956177287; the third requires -0.5423126832826126 units of \\( x[0] \\), -0.6668037930363615 units of \\( x[1] \\), and -0.8987771739249211 units of \\( x[2] \\) to equal -1.048625110146119; and the fourth requires 0.398575737860184 units of \\( x[0] \\), -1.340131134270142 units of \\( x[1] \\), and 0.3595004047412258 units of \\( x[2] \\) to equal 0.8340459801039611.\n\nAdditional constraints involve auxiliary variables \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\). For the first set, \\( y_0[0] \\) is determined by -0.0790956451487926 units of \\( x[0] \\), -0.00177045180427562 units of \\( x[1] \\), and -0.0135101531022542 units of \\( x[2] \\), equal to 4.3318049409104566e-04; \\( y_0[1] \\) is determined by -0.1888423336020157 units of \\( x[0] \\), 0.0468378089437413 units of \\( x[1] \\), and 0.0422915893690382 units of \\( x[2] \\), equal to -0.057473642380715; \\( y_0[2] \\) is determined by 0.1111684227208376 units of \\( x[0] \\), 0.1168866454616669 units of \\( x[1] \\), and 0.00994317726502118 units of \\( x[2] \\), equal to -0.0027025235150565; \\( y_0[3] \\) is determined by -0.1003054361114799 units of \\( x[0] \\), -0.1074280721090408 units of \\( x[1] \\), and 0.0347646765882297 units of \\( x[2] \\), equal to -0.0187719281760365; \\( t_0[0] \\) is determined by -0.0923314568919683 units of \\( x[0] \\), 0.3059364524963586 units of \\( x[1] \\), and -0.4891183949819865 units of \\( x[2] \\), equal to 1.559548175449872.\n\nFor \\( y_1[0] \\), the sum is 0.0983461752470471, determined by 0.0260300607215097 units of \\( x[0] \\), 0.104222743854305 units of \\( x[1] \\), and 0.165095052940775 units of \\( x[2] \\); \\( y_1[1] \\) sums to 0.2590974156103631, determined by 3.9617645465962872e-04 units of \\( x[0] \\), -0.0842482365695222 units of \\( x[1] \\), and 0.2115742333860741 units of \\( x[2] \\); \\( y_1[2] \\) sums to 0.0656791263260323, determined by 0.0469551281711486 units of \\( x[0] \\), -0.0279863701043123 units of \\( x[1] \\), and -0.2267772085587545 units of \\( x[2] \\); \\( y_1[3] \\) sums to 0.0925284262906007, determined by -0.00769378398286824 units of \\( x[0] \\), -0.1620714406841336 units of \\( x[1] \\), and -0.137052404669175 units of \\( x[2] \\); \\( t_1[0] \\) sums to 0.9781052631063663, determined by -0.4553968316872111 units of \\( x[0] \\), -0.8477088153755726 units of \\( x[1] \\), and -0.4607927423478093 units of \\( x[2] \\).\n\nFor \\( y_2[0] \\), the sum is -0.0316470399294818, determined by -0.0587561844433846 units of \\( x[0] \\), -0.0374159998289655 units of \\( x[1] \\), and -0.1432421286622242 units of \\( x[2] \\); \\( y_2[1] \\) sums to 0.1193203771742649, determined by -0.0483997505258602 units of \\( x[0] \\), 0.1896458148433305 units of \\( x[1] \\), and -0.0709856184240573 units of \\( x[2] \\); \\( y_2[2] \\) sums to 0.0249940394491055, determined by 0.0846693606546272 units of \\( x[0] \\), 0.0686759181099283 units of \\( x[1] \\), and -0.0216946264193857 units of \\( x[2] \\); \\( y_2[3] \\) sums to -0.0230055775535458, determined by 0.2218191833614268 units of \\( x[0] \\), 0.054166153139831 units of \\( x[1] \\), and 0.0802604337456637 units of \\( x[2] \\); \\( t_2[0] \\) sums to 0.0133770717575745, determined by -2.322162140550891 units of \\( x[0] \\), 0.6539919936190184 units of \\( x[1] \\), and -0.5823100315050422 units of \\( x[2] \\).\n\nThe problem also includes second-order cone constraints: the first ensures that the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) is less than or equal to the square of \\( t_0[0] \\); the second ensures that the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) is less than or equal to the square of \\( t_1[0] \\); the third ensures that the sum of the squares of \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\) is less than or equal to the square of \\( t_2[0] \\). All decision variables, including \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\), are free and can take any real value. The task is to allocate resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\) to minimize the total cost, while satisfying all equality constraints, resource allocation constraints, and second-order cone constraints. The specific numerical values and relationships provided must be strictly adhered to in order to achieve an optimal solution.",
    "answer": -0.77,
    "ori": "13_optmath_bench",
    "index": 147,
    "description": "The goal is to minimize the total cost determined by the weighted sum of resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\), where \\( x[0] \\) contributes 1.161237384198499 units of cost per unit allocated, \\( x[1] \\) reduces the cost by 0.166305801898613 units per unit allocated, and \\( x[2] \\) reduces the cost by 0.4010222263993871 units per unit allocated. The allocation must satisfy four strict equality conditions: the first requires -0.8171434027373111 units of \\( x[0] \\), 0.0148992990791839 units of \\( x[1] \\), and -1.624552817012578 units of \\( x[2] \\) to equal -2.266806032684915; the second requires 0.5642952588239045 units of \\( x[0] \\), -1.323990231764886 units of \\( x[1] \\), and 1.432095008297531 units of \\( x[2] \\) to equal 2.393666956177287; the third requires -0.5423126832826126 units of \\( x[0] \\), -0.6668037930363615 units of \\( x[1] \\), and -0.8987771739249211 units of \\( x[2] \\) to equal -1.048625110146119; and the fourth requires 0.398575737860184 units of \\( x[0] \\), -1.340131134270142 units of \\( x[1] \\), and 0.3595004047412258 units of \\( x[2] \\) to equal 0.8340459801039611.\n\nAdditional constraints involve auxiliary variables \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\). For the first set, \\( y_0[0] \\) is determined by -0.0790956451487926 units of \\( x[0] \\), -0.00177045180427562 units of \\( x[1] \\), and -0.0135101531022542 units of \\( x[2] \\), equal to 4.3318049409104566e-04; \\( y_0[1] \\) is determined by -0.1888423336020157 units of \\( x[0] \\), 0.0468378089437413 units of \\( x[1] \\), and 0.0422915893690382 units of \\( x[2] \\), equal to -0.057473642380715; \\( y_0[2] \\) is determined by 0.1111684227208376 units of \\( x[0] \\), 0.1168866454616669 units of \\( x[1] \\), and 0.00994317726502118 units of \\( x[2] \\), equal to -0.0027025235150565; \\( y_0[3] \\) is determined by -0.1003054361114799 units of \\( x[0] \\), -0.1074280721090408 units of \\( x[1] \\), and 0.0347646765882297 units of \\( x[2] \\), equal to -0.0187719281760365; \\( t_0[0] \\) is determined by -0.0923314568919683 units of \\( x[0] \\), 0.3059364524963586 units of \\( x[1] \\), and -0.4891183949819865 units of \\( x[2] \\), equal to 1.559548175449872.\n\nFor \\( y_1[0] \\), the sum is 0.0983461752470471, determined by 0.0260300607215097 units of \\( x[0] \\), 0.104222743854305 units of \\( x[1] \\), and 0.165095052940775 units of \\( x[2] \\); \\( y_1[1] \\) sums to 0.2590974156103631, determined by 3.9617645465962872e-04 units of \\( x[0] \\), -0.0842482365695222 units of \\( x[1] \\), and 0.2115742333860741 units of \\( x[2] \\); \\( y_1[2] \\) sums to 0.0656791263260323, determined by 0.0469551281711486 units of \\( x[0] \\), -0.0279863701043123 units of \\( x[1] \\), and -0.2267772085587545 units of \\( x[2] \\); \\( y_1[3] \\) sums to 0.0925284262906007, determined by -0.00769378398286824 units of \\( x[0] \\), -0.1620714406841336 units of \\( x[1] \\), and -0.137052404669175 units of \\( x[2] \\); \\( t_1[0] \\) sums to 0.9781052631063663, determined by -0.4553968316872111 units of \\( x[0] \\), -0.8477088153755726 units of \\( x[1] \\), and -0.4607927423478093 units of \\( x[2] \\).\n\nFor \\( y_2[0] \\), the sum is -0.0316470399294818, determined by -0.0587561844433846 units of \\( x[0] \\), -0.0374159998289655 units of \\( x[1] \\), and -0.1432421286622242 units of \\( x[2] \\); \\( y_2[1] \\) sums to 0.1193203771742649, determined by -0.0483997505258602 units of \\( x[0] \\), 0.1896458148433305 units of \\( x[1] \\), and -0.0709856184240573 units of \\( x[2] \\); \\( y_2[2] \\) sums to 0.0249940394491055, determined by 0.0846693606546272 units of \\( x[0] \\), 0.0686759181099283 units of \\( x[1] \\), and -0.0216946264193857 units of \\( x[2] \\); \\( y_2[3] \\) sums to -0.0230055775535458, determined by 0.2218191833614268 units of \\( x[0] \\), 0.054166153139831 units of \\( x[1] \\), and 0.0802604337456637 units of \\( x[2] \\); \\( t_2[0] \\) sums to 0.0133770717575745, determined by -2.322162140550891 units of \\( x[0] \\), 0.6539919936190184 units of \\( x[1] \\), and -0.5823100315050422 units of \\( x[2] \\).\n\nThe problem also includes second-order cone constraints: the first ensures that the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) is less than or equal to the square of \\( t_0[0] \\); the second ensures that the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) is less than or equal to the square of \\( t_1[0] \\); the third ensures that the sum of the squares of \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\) is less than or equal to the square of \\( t_2[0] \\). All decision variables, including \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\) to \\( y_0[3] \\), \\( y_1[0] \\) to \\( y_1[3] \\), \\( y_2[0] \\) to \\( y_2[3] \\), and \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\), are free and can take any real value. The task is to allocate resources \\( x[0] \\), \\( x[1] \\), and \\( x[2] \\) to minimize the total cost, while satisfying all equality constraints, resource allocation constraints, and second-order cone constraints. The specific numerical values and relationships provided must be strictly adhered to in order to achieve an optimal solution.",
    "ground_truth": -0.77
  },
  {
    "question": "The problem is a Second-Order Cone Programming (SOCP) problem aimed at minimizing the expression: -0.0834997320390843 multiplied by x[0], minus 1.281157927338681 multiplied by x[1], minus 0.6997343607099248 multiplied by x[2], minus 1.124765322700406 multiplied by x[3], plus 1.075870893520574 multiplied by x[4], minus 0.873635307005547 multiplied by x[5]. The problem includes four linear equality constraints involving the decision variables x[0] through x[5]. The first constraint requires -0.5885607904893205 multiplied by x[0], minus 0.4065465515131446 multiplied by x[1], plus 0.3059688687379479 multiplied by x[2], plus 0.5752454203843212 multiplied by x[3], plus 0.8134273230222456 multiplied by x[4], minus 0.3137959036191741 multiplied by x[5] to equal 0.9326117395439714. The second constraint requires -1.925586727059667 multiplied by x[0], plus 1.52432983869767 multiplied by x[1], plus 0.7056564744559519 multiplied by x[2], plus 0.4429646642871883 multiplied by x[3], minus 1.191971501984802 multiplied by x[4], minus 1.423701744010086 multiplied by x[5] to equal -1.127568679343468. The third constraint specifies 0.3695976409523919 multiplied by x[0], minus 1.172799439640038 multiplied by x[1], plus 2.456480065266749 multiplied by x[2], minus 0.6028161578986598 multiplied by x[3], plus 0.1526235927792681 multiplied by x[4], minus 0.7698423890950179 multiplied by x[5] to equal -0.464660190344107. The fourth constraint mandates -1.43554468908569 multiplied by x[0], plus 1.029767278463664 multiplied by x[1], minus 0.22200928921289 multiplied by x[2], minus 1.475662550421019 multiplied by x[3], minus 0.4673380914761413 multiplied by x[4], plus 1.197928628533288 multiplied by x[5] to equal -1.088009446155389.\n\nThere are ten additional linear constraints involving auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], y_1[0], y_1[1], y_1[2], y_1[3], t_0[0], and t_1[0]. These constraints define specific linear relationships between the decision variables x[0] through x[5] and the auxiliary variables. For example, one constraint requires 0.0893317393307157 multiplied by x[0], plus 0.0150647185847581 multiplied by x[1], plus 0.0261787249528073 multiplied by x[2], plus 0.0752497482880115 multiplied by x[3], plus 0.089362702614514 multiplied by x[4], minus 0.0903365860453957 multiplied by x[5], plus y_0[0] to equal 0.0348229641116467. Another constraint requires 0.0309053187877012 multiplied by x[0], plus 0.024045043885088 multiplied by x[1], plus 0.1070923676270683 multiplied by x[2], plus 0.2073521720181627 multiplied by x[3], minus 0.1770274961116007 multiplied by x[4], minus 0.0922005916406162 multiplied by x[5], plus y_0[1] to equal -0.1872964740542509. A third constraint requires -0.1262388132745864 multiplied by x[0], plus 0.0795068962664749 multiplied by x[1], plus 0.0187856757413385 multiplied by x[2], plus 0.1513494147153156 multiplied by x[3], minus 0.0163664274157314 multiplied by x[4], minus 0.00311286020002606 multiplied by x[5], plus y_0[2] to equal -0.0954444159908309. A fourth constraint requires -0.0757819715079799 multiplied by x[0], plus 0.0919093860274552 multiplied by x[1], minus 0.0364339288064356 multiplied by x[2], plus 0.083580945500982 multiplied by x[3], minus 0.1474689439069835 multiplied by x[4], plus 0.0301651918491998 multiplied by x[5], plus y_0[3] to equal 0.2579565194918507. A fifth constraint requires 0.7572820533712606 multiplied by x[0], minus 1.21352962362722 multiplied by x[1], plus 0.3803676681799136 multiplied by x[2], plus 0.4801395423918295 multiplied by x[3], minus 0.8927539207272388 multiplied by x[4], minus 1.447471364330223 multiplied by x[5], plus t_0[0] to equal 0.683762161476536. A sixth constraint requires -0.039176642120947 multiplied by x[0], minus 0.0594029213045902 multiplied by x[1], plus 0.0203899965676045 multiplied by x[2], minus 0.0006599505607145948 multiplied by x[3], plus 0.1993498474530564 multiplied by x[4], minus 0.1494561245854857 multiplied by x[5], plus y_1[0] to equal -0.0909307736334353. A seventh constraint requires -0.1551511441179779 multiplied by x[0], plus 0.0850834698172653 multiplied by x[1], minus 0.1602283190962608 multiplied by x[2], plus 0.0725598573219744 multiplied by x[3], minus 0.1055576967228311 multiplied by x[4], minus 0.1582958490297426 multiplied by x[5], plus y_1[1] to equal -0.1725026750262158. An eighth constraint requires -0.1933585329412353 multiplied by x[0], plus 0.0929980184151937 multiplied by x[1], plus 0.099592631874656 multiplied by x[2], plus 0.0797650799817848 multiplied by x[3], plus 0.0106313375995685 multiplied by x[4], minus 0.00903979011317048 multiplied by x[5], plus y_1[2] to equal -0.1167161263783248. A ninth constraint requires 0.0230142114746871 multiplied by x[0], plus 0.0796690661109758 multiplied by x[1], plus 0.0216327232273718 multiplied by x[2], minus 0.0337376899834936 multiplied by x[3], minus 0.1518320281674425 multiplied by x[4], plus 0.046720461629375 multiplied by x[5], plus y_1[3] to equal -0.1005698418344237. A tenth constraint requires -0.1501707210081249 multiplied by x[0], plus 0.7058311865593911 multiplied by x[1], plus 1.287754324454335 multiplied by x[2], plus 0.0373827245849037 multiplied by x[3], plus 0.1171725723905398 multiplied by x[4], plus 0.1069533502066662 multiplied by x[5], plus t_1[0] to equal 0.1223510811918817.\n\nTwo quadratic cone constraints ensure that the squared sum of y_0[0], y_0[1], y_0[2], and y_0[3] does not exceed the square of t_0[0], and the squared sum of y_1[0], y_1[1], y_1[2], and y_1[3] does not exceed the square of t_1[0]. All variables, including the decision variables x[0] through x[5] and the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], y_1[0], y_1[1], y_1[2], y_1[3], t_0[0], and t_1[0], are free to take any real value, with no bounds specified. The goal is to determine the values of these variables that minimize the objective function while satisfying all equality and quadratic cone constraints.",
    "answer": -2.04,
    "ori": "13_optmath_bench",
    "index": 148,
    "description": "The problem is a Second-Order Cone Programming (SOCP) problem aimed at minimizing the expression: -0.0834997320390843 multiplied by x[0], minus 1.281157927338681 multiplied by x[1], minus 0.6997343607099248 multiplied by x[2], minus 1.124765322700406 multiplied by x[3], plus 1.075870893520574 multiplied by x[4], minus 0.873635307005547 multiplied by x[5]. The problem includes four linear equality constraints involving the decision variables x[0] through x[5]. The first constraint requires -0.5885607904893205 multiplied by x[0], minus 0.4065465515131446 multiplied by x[1], plus 0.3059688687379479 multiplied by x[2], plus 0.5752454203843212 multiplied by x[3], plus 0.8134273230222456 multiplied by x[4], minus 0.3137959036191741 multiplied by x[5] to equal 0.9326117395439714. The second constraint requires -1.925586727059667 multiplied by x[0], plus 1.52432983869767 multiplied by x[1], plus 0.7056564744559519 multiplied by x[2], plus 0.4429646642871883 multiplied by x[3], minus 1.191971501984802 multiplied by x[4], minus 1.423701744010086 multiplied by x[5] to equal -1.127568679343468. The third constraint specifies 0.3695976409523919 multiplied by x[0], minus 1.172799439640038 multiplied by x[1], plus 2.456480065266749 multiplied by x[2], minus 0.6028161578986598 multiplied by x[3], plus 0.1526235927792681 multiplied by x[4], minus 0.7698423890950179 multiplied by x[5] to equal -0.464660190344107. The fourth constraint mandates -1.43554468908569 multiplied by x[0], plus 1.029767278463664 multiplied by x[1], minus 0.22200928921289 multiplied by x[2], minus 1.475662550421019 multiplied by x[3], minus 0.4673380914761413 multiplied by x[4], plus 1.197928628533288 multiplied by x[5] to equal -1.088009446155389.\n\nThere are ten additional linear constraints involving auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], y_1[0], y_1[1], y_1[2], y_1[3], t_0[0], and t_1[0]. These constraints define specific linear relationships between the decision variables x[0] through x[5] and the auxiliary variables. For example, one constraint requires 0.0893317393307157 multiplied by x[0], plus 0.0150647185847581 multiplied by x[1], plus 0.0261787249528073 multiplied by x[2], plus 0.0752497482880115 multiplied by x[3], plus 0.089362702614514 multiplied by x[4], minus 0.0903365860453957 multiplied by x[5], plus y_0[0] to equal 0.0348229641116467. Another constraint requires 0.0309053187877012 multiplied by x[0], plus 0.024045043885088 multiplied by x[1], plus 0.1070923676270683 multiplied by x[2], plus 0.2073521720181627 multiplied by x[3], minus 0.1770274961116007 multiplied by x[4], minus 0.0922005916406162 multiplied by x[5], plus y_0[1] to equal -0.1872964740542509. A third constraint requires -0.1262388132745864 multiplied by x[0], plus 0.0795068962664749 multiplied by x[1], plus 0.0187856757413385 multiplied by x[2], plus 0.1513494147153156 multiplied by x[3], minus 0.0163664274157314 multiplied by x[4], minus 0.00311286020002606 multiplied by x[5], plus y_0[2] to equal -0.0954444159908309. A fourth constraint requires -0.0757819715079799 multiplied by x[0], plus 0.0919093860274552 multiplied by x[1], minus 0.0364339288064356 multiplied by x[2], plus 0.083580945500982 multiplied by x[3], minus 0.1474689439069835 multiplied by x[4], plus 0.0301651918491998 multiplied by x[5], plus y_0[3] to equal 0.2579565194918507. A fifth constraint requires 0.7572820533712606 multiplied by x[0], minus 1.21352962362722 multiplied by x[1], plus 0.3803676681799136 multiplied by x[2], plus 0.4801395423918295 multiplied by x[3], minus 0.8927539207272388 multiplied by x[4], minus 1.447471364330223 multiplied by x[5], plus t_0[0] to equal 0.683762161476536. A sixth constraint requires -0.039176642120947 multiplied by x[0], minus 0.0594029213045902 multiplied by x[1], plus 0.0203899965676045 multiplied by x[2], minus 0.0006599505607145948 multiplied by x[3], plus 0.1993498474530564 multiplied by x[4], minus 0.1494561245854857 multiplied by x[5], plus y_1[0] to equal -0.0909307736334353. A seventh constraint requires -0.1551511441179779 multiplied by x[0], plus 0.0850834698172653 multiplied by x[1], minus 0.1602283190962608 multiplied by x[2], plus 0.0725598573219744 multiplied by x[3], minus 0.1055576967228311 multiplied by x[4], minus 0.1582958490297426 multiplied by x[5], plus y_1[1] to equal -0.1725026750262158. An eighth constraint requires -0.1933585329412353 multiplied by x[0], plus 0.0929980184151937 multiplied by x[1], plus 0.099592631874656 multiplied by x[2], plus 0.0797650799817848 multiplied by x[3], plus 0.0106313375995685 multiplied by x[4], minus 0.00903979011317048 multiplied by x[5], plus y_1[2] to equal -0.1167161263783248. A ninth constraint requires 0.0230142114746871 multiplied by x[0], plus 0.0796690661109758 multiplied by x[1], plus 0.0216327232273718 multiplied by x[2], minus 0.0337376899834936 multiplied by x[3], minus 0.1518320281674425 multiplied by x[4], plus 0.046720461629375 multiplied by x[5], plus y_1[3] to equal -0.1005698418344237. A tenth constraint requires -0.1501707210081249 multiplied by x[0], plus 0.7058311865593911 multiplied by x[1], plus 1.287754324454335 multiplied by x[2], plus 0.0373827245849037 multiplied by x[3], plus 0.1171725723905398 multiplied by x[4], plus 0.1069533502066662 multiplied by x[5], plus t_1[0] to equal 0.1223510811918817.\n\nTwo quadratic cone constraints ensure that the squared sum of y_0[0], y_0[1], y_0[2], and y_0[3] does not exceed the square of t_0[0], and the squared sum of y_1[0], y_1[1], y_1[2], and y_1[3] does not exceed the square of t_1[0]. All variables, including the decision variables x[0] through x[5] and the auxiliary variables y_0[0], y_0[1], y_0[2], y_0[3], y_1[0], y_1[1], y_1[2], y_1[3], t_0[0], and t_1[0], are free to take any real value, with no bounds specified. The goal is to determine the values of these variables that minimize the objective function while satisfying all equality and quadratic cone constraints.",
    "ground_truth": -2.04
  },
  {
    "question": "The problem involves determining the optimal allocation of five types of resources, represented by variables \\( x[0] \\) through \\( x[4] \\), along with auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\), to minimize the total cost defined by the linear objective function: \\( 1.126401441072199 x[0] - 0.3048391076081773 x[1] + 1.210295701208876 x[2] + 0.3629036707879342 x[3] - 1.541074052220742 x[4] \\). \n\nThe solution must satisfy four linear equality constraints: the first requires \\( -0.9907409502145462 x[0] - 0.7264863472262246 x[1] + 0.2793136098129854 x[2] - 0.9349403902445268 x[3] + 1.444658005223368 x[4] = 1.116201276984661 \\); the second requires \\( 2.936722209688262 x[0] + 0.5035733953314866 x[1] + 0.3357143231898844 x[2] + 1.112758520098299 x[3] + 1.412597032089028 x[4] = -1.571971227040746 \\); the third requires \\( 0.7899614064673852 x[0] - 0.0724234240750259 x[1] - 0.7706602505688044 x[2] + 1.907488050972312 x[3] + 1.420058526737699 x[4] = -1.686571012140405 \\); and the fourth requires \\( 0.6068754572874664 x[0] + 0.7492819480236036 x[1] - 1.565830499338323 x[2] + 0.2718401004423009 x[3] + 0.5510027846961619 x[4] = 4.014442756917189 \\).\n\nAdditionally, three linear equality constraints, labeled R4, R5, and R6, tie the resource allocations to auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\): R4 requires \\( -0.0124992573250491 x[0] - 0.1193568402945484 x[1] - 0.0200307964468845 x[2] + 0.0612863681420025 x[3] - 0.116537049877206 x[4] + y_0[0] = -0.0358590805559009 \\); R5 requires \\( 0.0484815211698107 x[0] - 0.0631246556642578 x[1] + 0.1244200448905836 x[2] + 0.0530487576814488 x[3] + 0.1361347655297342 x[4] + y_0[1] = 0.0271906214446268 \\); and R6 requires \\( -2.249909202694956 x[0] + 0.7776031115768471 x[1] - 0.2174454691465576 x[2] + 1.953508135119546 x[3] + 1.071251451084194 x[4] + t_0[0] = 0.9059772765697818 \\).\n\nA second-order cone constraint, labeled \\( qc0 \\), ensures that the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) does not exceed the square of \\( t_0[0] \\), expressed as \\( -t_0[0]^2 + y_0[0]^2 + y_0[1]^2 \\leq 0 \\). All decision variables, including \\( x[0] \\) through \\( x[4] \\), \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\), are unrestricted in sign, meaning they can take any real value to satisfy the constraints and optimize the objective. This is a Second-Order Cone Programming (SOCP) problem that combines linear and quadratic constraints, requiring a balance between resource allocation and auxiliary variables to achieve the optimal solution while minimizing total cost.",
    "answer": -5.07,
    "ori": "13_optmath_bench",
    "index": 149,
    "description": "The problem involves determining the optimal allocation of five types of resources, represented by variables \\( x[0] \\) through \\( x[4] \\), along with auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\), to minimize the total cost defined by the linear objective function: \\( 1.126401441072199 x[0] - 0.3048391076081773 x[1] + 1.210295701208876 x[2] + 0.3629036707879342 x[3] - 1.541074052220742 x[4] \\). \n\nThe solution must satisfy four linear equality constraints: the first requires \\( -0.9907409502145462 x[0] - 0.7264863472262246 x[1] + 0.2793136098129854 x[2] - 0.9349403902445268 x[3] + 1.444658005223368 x[4] = 1.116201276984661 \\); the second requires \\( 2.936722209688262 x[0] + 0.5035733953314866 x[1] + 0.3357143231898844 x[2] + 1.112758520098299 x[3] + 1.412597032089028 x[4] = -1.571971227040746 \\); the third requires \\( 0.7899614064673852 x[0] - 0.0724234240750259 x[1] - 0.7706602505688044 x[2] + 1.907488050972312 x[3] + 1.420058526737699 x[4] = -1.686571012140405 \\); and the fourth requires \\( 0.6068754572874664 x[0] + 0.7492819480236036 x[1] - 1.565830499338323 x[2] + 0.2718401004423009 x[3] + 0.5510027846961619 x[4] = 4.014442756917189 \\).\n\nAdditionally, three linear equality constraints, labeled R4, R5, and R6, tie the resource allocations to auxiliary variables \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\): R4 requires \\( -0.0124992573250491 x[0] - 0.1193568402945484 x[1] - 0.0200307964468845 x[2] + 0.0612863681420025 x[3] - 0.116537049877206 x[4] + y_0[0] = -0.0358590805559009 \\); R5 requires \\( 0.0484815211698107 x[0] - 0.0631246556642578 x[1] + 0.1244200448905836 x[2] + 0.0530487576814488 x[3] + 0.1361347655297342 x[4] + y_0[1] = 0.0271906214446268 \\); and R6 requires \\( -2.249909202694956 x[0] + 0.7776031115768471 x[1] - 0.2174454691465576 x[2] + 1.953508135119546 x[3] + 1.071251451084194 x[4] + t_0[0] = 0.9059772765697818 \\).\n\nA second-order cone constraint, labeled \\( qc0 \\), ensures that the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) does not exceed the square of \\( t_0[0] \\), expressed as \\( -t_0[0]^2 + y_0[0]^2 + y_0[1]^2 \\leq 0 \\). All decision variables, including \\( x[0] \\) through \\( x[4] \\), \\( y_0[0] \\), \\( y_0[1] \\), and \\( t_0[0] \\), are unrestricted in sign, meaning they can take any real value to satisfy the constraints and optimize the objective. This is a Second-Order Cone Programming (SOCP) problem that combines linear and quadratic constraints, requiring a balance between resource allocation and auxiliary variables to achieve the optimal solution while minimizing total cost.",
    "ground_truth": -5.07
  },
  {
    "question": "The production manager seeks to minimize the total production cost for four product lines, \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\), with costs of \\( -0.0211519215863677 \\), \\( -0.157914420869699 \\), \\( -1.276226636497168 \\), and \\( 1.887428393936258 \\) per unit, respectively. Negative coefficients in the objective function represent costs to be minimized, not cost savings. Four linear equality constraints must be satisfied: the first requires a weighted sum of production levels using coefficients \\( -0.6903544941297689 \\), \\( 0.184421264426265 \\), \\( 0.2271145373127337 \\), and \\( 0.3261334256865931 \\) to equal \\( -1.784682154876947 \\). The second constraint uses coefficients \\( 0.9527280569937944 \\), \\( -0.227563767653628 \\), \\( -0.1388448211471715 \\), and \\( -0.7259447957545259 \\) to sum to \\( 3.071741041299838 \\). The third constraint uses coefficients \\( -0.2904848690892891 \\), \\( 0.6067085131648451 \\), \\( 0.5360035950278403 \\), and \\( 1.175919727086906 \\) to sum to \\( -3.247120484557859 \\). The fourth constraint uses coefficients \\( -1.447328047167681 \\), \\( 1.078800425952911 \\), \\( -1.071986023688645 \\), and \\( 2.402600530074645 \\) to sum to \\( -9.240805229261266 \\).\n\nTwelve auxiliary variables, \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( y_3[0] \\), \\( y_3[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\), and \\( t_3[0] \\), are introduced to model resource usage and operational safety. These variables are part of twelve additional linear constraints: R4 through R15. For example, R4 states that \\( -0.00544743187557857 \\) times \\( x[0] \\), minus \\( 0.1023858515949546 \\) times \\( x[1] \\), minus \\( 0.2570937910987342 \\) times \\( x[2] \\), minus \\( 0.0303903824324441 \\) times \\( x[3] \\), plus \\( y_0[0] \\), equals \\( 0.0630402459981765 \\). Similar relationships define R5 through R15.\n\nFour quadratic constraints ensure safe operational limits: the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) must be less than or equal to the square of \\( t_0[0] \\); the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to the square of \\( t_1[0] \\); the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) must be less than or equal to the square of \\( t_2[0] \\); and the sum of the squares of \\( y_3[0] \\) and \\( y_3[1] \\) must be less than or equal to the square of \\( t_3[0] \\). All decision variables, including production levels and auxiliary variables, are free to take any real value. The goal is to determine the optimal production levels for \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) that minimize total production cost while satisfying all constraints. This problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the quadratic constraints and the structure of the model.",
    "answer": -4.3,
    "ori": "13_optmath_bench",
    "index": 150,
    "description": "The production manager seeks to minimize the total production cost for four product lines, \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\), with costs of \\( -0.0211519215863677 \\), \\( -0.157914420869699 \\), \\( -1.276226636497168 \\), and \\( 1.887428393936258 \\) per unit, respectively. Negative coefficients in the objective function represent costs to be minimized, not cost savings. Four linear equality constraints must be satisfied: the first requires a weighted sum of production levels using coefficients \\( -0.6903544941297689 \\), \\( 0.184421264426265 \\), \\( 0.2271145373127337 \\), and \\( 0.3261334256865931 \\) to equal \\( -1.784682154876947 \\). The second constraint uses coefficients \\( 0.9527280569937944 \\), \\( -0.227563767653628 \\), \\( -0.1388448211471715 \\), and \\( -0.7259447957545259 \\) to sum to \\( 3.071741041299838 \\). The third constraint uses coefficients \\( -0.2904848690892891 \\), \\( 0.6067085131648451 \\), \\( 0.5360035950278403 \\), and \\( 1.175919727086906 \\) to sum to \\( -3.247120484557859 \\). The fourth constraint uses coefficients \\( -1.447328047167681 \\), \\( 1.078800425952911 \\), \\( -1.071986023688645 \\), and \\( 2.402600530074645 \\) to sum to \\( -9.240805229261266 \\).\n\nTwelve auxiliary variables, \\( y_0[0] \\), \\( y_0[1] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( y_3[0] \\), \\( y_3[1] \\), \\( t_0[0] \\), \\( t_1[0] \\), \\( t_2[0] \\), and \\( t_3[0] \\), are introduced to model resource usage and operational safety. These variables are part of twelve additional linear constraints: R4 through R15. For example, R4 states that \\( -0.00544743187557857 \\) times \\( x[0] \\), minus \\( 0.1023858515949546 \\) times \\( x[1] \\), minus \\( 0.2570937910987342 \\) times \\( x[2] \\), minus \\( 0.0303903824324441 \\) times \\( x[3] \\), plus \\( y_0[0] \\), equals \\( 0.0630402459981765 \\). Similar relationships define R5 through R15.\n\nFour quadratic constraints ensure safe operational limits: the sum of the squares of \\( y_0[0] \\) and \\( y_0[1] \\) must be less than or equal to the square of \\( t_0[0] \\); the sum of the squares of \\( y_1[0] \\) and \\( y_1[1] \\) must be less than or equal to the square of \\( t_1[0] \\); the sum of the squares of \\( y_2[0] \\) and \\( y_2[1] \\) must be less than or equal to the square of \\( t_2[0] \\); and the sum of the squares of \\( y_3[0] \\) and \\( y_3[1] \\) must be less than or equal to the square of \\( t_3[0] \\). All decision variables, including production levels and auxiliary variables, are free to take any real value. The goal is to determine the optimal production levels for \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) that minimize total production cost while satisfying all constraints. This problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the quadratic constraints and the structure of the model.",
    "ground_truth": -4.3
  },
  {
    "question": "The problem involves minimizing a linear objective function with coefficients 0.4662680322234939 for \\( x[0] \\), 0.1250396579327832 for \\( x[1] \\), and -0.1976509195604252 for \\( x[2] \\). The variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) are free to take any real values. The problem includes three linear equality constraints: the first requires that -1.506294713918092 times \\( x[0] \\) minus 0.5786002519685364 times \\( x[1] \\) plus 1.651436537097151 times \\( x[2] \\) equals 1.525536343222344; the second requires that -2.426679243393074 times \\( x[0] \\) minus 0.4289126288561773 times \\( x[1] \\) plus 1.265936258705534 times \\( x[2] \\) equals 2.564935934767919; and the third requires that -0.8667404022651017 times \\( x[0] \\) minus 0.6788861516220543 times \\( x[1] \\) minus 0.0947089689368911 times \\( x[2] \\) equals 0.2370752919653094. Additionally, there are four linear constraints: the first requires that -0.0337374122584387 times \\( x[0] \\) plus 0.0926622976309022 times \\( x[1] \\) minus 0.0275747406547086 times \\( x[2] \\) plus \\( y_0[0] \\) equals 0.0767641469627959; the second requires that -0.0370852326700521 times \\( x[0] \\) minus 0.1174307145074716 times \\( x[1] \\) plus 0.2032292481351275 times \\( x[2] \\) plus \\( y_0[1] \\) equals 0.0370679052304449; the third requires that -0.0582508292397692 times \\( x[0] \\) plus 0.0721175797872196 times \\( x[1] \\) plus 0.1702423600392019 times \\( x[2] \\) plus \\( y_0[2] \\) equals 0.2075459354425953; and the fourth requires that -0.1277576901021839 times \\( x[0] \\) minus 1.799889451307227 times \\( x[1] \\) minus 1.238366353571482 times \\( x[2] \\) plus \\( t_0[0] \\) equals 0.9137569517560475. Finally, a second-order cone constraint requires that the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), and \\( y_0[2] \\) minus the square of \\( t_0[0] \\) is less than or equal to zero. The constraint involving \\( t_0[0] \\) is part of the second-order cone constraint setup, and \\( t_0[0] \\) is explicitly recognized as a decision variable.",
    "answer": -0.44,
    "ori": "13_optmath_bench",
    "index": 151,
    "description": "The problem involves minimizing a linear objective function with coefficients 0.4662680322234939 for \\( x[0] \\), 0.1250396579327832 for \\( x[1] \\), and -0.1976509195604252 for \\( x[2] \\). The variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( t_0[0] \\) are free to take any real values. The problem includes three linear equality constraints: the first requires that -1.506294713918092 times \\( x[0] \\) minus 0.5786002519685364 times \\( x[1] \\) plus 1.651436537097151 times \\( x[2] \\) equals 1.525536343222344; the second requires that -2.426679243393074 times \\( x[0] \\) minus 0.4289126288561773 times \\( x[1] \\) plus 1.265936258705534 times \\( x[2] \\) equals 2.564935934767919; and the third requires that -0.8667404022651017 times \\( x[0] \\) minus 0.6788861516220543 times \\( x[1] \\) minus 0.0947089689368911 times \\( x[2] \\) equals 0.2370752919653094. Additionally, there are four linear constraints: the first requires that -0.0337374122584387 times \\( x[0] \\) plus 0.0926622976309022 times \\( x[1] \\) minus 0.0275747406547086 times \\( x[2] \\) plus \\( y_0[0] \\) equals 0.0767641469627959; the second requires that -0.0370852326700521 times \\( x[0] \\) minus 0.1174307145074716 times \\( x[1] \\) plus 0.2032292481351275 times \\( x[2] \\) plus \\( y_0[1] \\) equals 0.0370679052304449; the third requires that -0.0582508292397692 times \\( x[0] \\) plus 0.0721175797872196 times \\( x[1] \\) plus 0.1702423600392019 times \\( x[2] \\) plus \\( y_0[2] \\) equals 0.2075459354425953; and the fourth requires that -0.1277576901021839 times \\( x[0] \\) minus 1.799889451307227 times \\( x[1] \\) minus 1.238366353571482 times \\( x[2] \\) plus \\( t_0[0] \\) equals 0.9137569517560475. Finally, a second-order cone constraint requires that the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), and \\( y_0[2] \\) minus the square of \\( t_0[0] \\) is less than or equal to zero. The constraint involving \\( t_0[0] \\) is part of the second-order cone constraint setup, and \\( t_0[0] \\) is explicitly recognized as a decision variable.",
    "ground_truth": -0.44
  },
  {
    "question": "Minimize the total cost of allocating resources \\( x[0] \\) to \\( x[4] \\), where the cost coefficients are 0.190510737670758 for \\( x[0] \\), 1.129350959341043 for \\( x[1] \\), -1.45763004619859 for \\( x[2] \\), 0.4979171399142379 for \\( x[3] \\), and 0.217933194293673 for \\( x[4] \\). The allocation must satisfy four equality constraints. The first constraint requires 1.219567298556732 \\( x[0] \\) + 0.9289001747224751 \\( x[1] \\) - 1.336923760887845 \\( x[2] \\) - 1.115644167094657 \\( x[3] \\) - 0.4761759785063266 \\( x[4] \\) = -0.4344345340009604. The second constraint requires -1.662323208398086 \\( x[0] \\) + 0.8659229325025953 \\( x[1] \\) - 0.715611281293988 \\( x[2] \\) + 0.513394018474748 \\( x[3] \\) - 1.247456907892064 \\( x[4] \\) = -1.263487160460341. The third constraint requires -0.2849105246051509 \\( x[0] \\) - 1.235291728359102 \\( x[1] \\) + 1.089988844777487 \\( x[2] \\) - 1.059632720036963 \\( x[3] \\) + 0.2188818725225526 \\( x[4] \\) = 0.0598263158545554. The fourth constraint requires -1.037775353342995 \\( x[0] \\) - 1.808771173081519 \\( x[1] \\) + 1.006811579019581 \\( x[2] \\) + 0.2261443990014109 \\( x[3] \\) - 0.5001468099984979 \\( x[4] \\) = 0.6799624629319878. Additional linear constraints involve variables \\( y_0[0] \\), \\( y_0[1] \\), \\( t_0[0] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( t_1[0] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_2[0] \\), \\( y_3[0] \\), \\( y_3[1] \\), \\( t_3[0] \\), \\( y_4[0] \\), \\( y_4[1] \\), and \\( t_4[0] \\), which are free variables. These constraints are defined as follows: 0.1854712369852954 \\( x[0] \\) + 0.2126049926787192 \\( x[1] \\) - 0.0552426804013357 \\( x[2] \\) - 0.0300913423926646 \\( x[3] \\) + 0.0191442880734612 \\( x[4] \\) + \\( y_0[0] \\) = -0.00851123919328947; 0.033633911265618 \\( x[0] \\) + 0.0447803575912513 \\( x[1] \\) + 0.0906422549522432 \\( x[2] \\) - 0.140301925709981 \\( x[3] \\) + 0.0894655740323818 \\( x[4] \\) + \\( y_0[1] \\) = 0.1197073561594899; 1.032476848498754 \\( x[0] \\) + 0.5786229660982358 \\( x[1] \\) + 1.517117102281561 \\( x[2] \\) - 0.9892374377228246 \\( x[3] \\) - 0.7127788386839591 \\( x[4] \\) + \\( t_0[0] \\) = 0.0628164480170035; -0.0629876313760396 \\( x[0] \\) + 0.1186553496180699 \\( x[1] \\) + 0.0837866420373662 \\( x[2] \\) - 0.0175044400700457 \\( x[3] \\) + 0.0421466082438275 \\( x[4] \\) + \\( y_1[0] \\) = -0.0607801036942368; 0.0472913180476754 \\( x[0] \\) - 0.1672487320352799 \\( x[1] \\) + 0.00403030115525331 \\( x[2] \\) + 0.00774493287185739 \\( x[3] \\) - 0.0094688993206764 \\( x[4] \\) + \\( y_1[1] \\) = -0.0464456008702828; -0.2085979716989413 \\( x[0] \\) - 0.1092539540974228 \\( x[1] \\) - 2.174804559553748 \\( x[2] \\) - 1.69528753252808 \\( x[3] \\) - 1.525645556958908 \\( x[4] \\) + \\( t_1[0] \\) = 0.7445116249805878; 0.000912382 \\( x[0] \\) - 0.00863788041334999 \\( x[1] \\) - 0.0502948320610378 \\( x[2] \\) - 0.0667737933702229 \\( x[3] \\) + 0.2432277963883143 \\( x[4] \\) + \\( y_2[0] \\) = -0.139166601364713; 0.0232832507250414 \\( x[0] \\) + 0.2516736184489083 \\( x[1] \\) + 0.1386504617834828 \\( x[2] \\) - 0.0543682860611478 \\( x[3] \\) + 0.050704164298607 \\( x[4] \\) + \\( y_2[1] \\) = 0.0357160518360202; -0.5925926352567416 \\( x[0] \\) - 0.3891604825652387 \\( x[1] \\) + 0.0510217340581877 \\( x[2] \\) + 1.090606691890913 \\( x[3] \\) + 0.9938716757643966 \\( x[4] \\) + \\( t_2[0] \\) = 1.045297581678233; 0.1540622796961561 \\( x[0] \\) - 0.1883221064812006 \\( x[1] \\) + 0.1503453658091877 \\( x[2] \\) - 0.1474374678246578 \\( x[3] \\) + 0.0205212420510411 \\( x[4] \\) + \\( y_3[0] \\) = -0.00963411322153448; -0.0280861975467837 \\( x[0] \\) - 0.0105727074625737 \\( x[1] \\) + 0.0954257952878318 \\( x[2] \\) - 0.00589259567851985 \\( x[3] \\) + 0.145090882467532 \\( x[4] \\) + \\( y_3[1] \\) = -0.019437376136785; -1.252924325600617 \\( x[0] \\) + 1.244308803054627 \\( x[1] \\) - 2.21127388768641 \\( x[2] \\) - 1.885087766270206 \\( x[3] \\) - 1.006758968957397 \\( x[4] \\) + \\( t_3[0] \\) = 1.050824562362084; 0.1325971503040609 \\( x[0] \\) - 0.110249935172733 \\( x[1] \\) + 0.0558235975886938 \\( x[2] \\) + 0.0542813307961975 \\( x[3] \\) - 0.1156413261001238 \\( x[4] \\) + \\( y_4[0] \\) = 0.0325653324485877; -1.3730183823943952e-04 \\( x[0] \\) - 0.0268128227655337 \\( x[1] \\) + 0.0403141061350009 \\( x[2] \\) + 0.1864002689467194 \\( x[3] \\) - 0.0450317064978495 \\( x[4] \\) + \\( y_4[1] \\) = 0.0626883759594124; -1.090908275543176 \\( x[0] \\) + 0.3860841432731175 \\( x[1] \\) - 0.2953562653864454 \\( x[2] \\) - 0.2904011172481792 \\( x[3] \\) - 0.8273323625052638 \\( x[4] \\) + \\( t_4[0] \\) = 0.7353989816876624. Quadratic constraints require that the sum of the squares of the outcomes minus the square of the allocated resource must be less than or equal to zero for each project: \\( y_0[0]^2 + y_0[1]^2 - t_0[0]^2 \\leq 0 \\), \\( y_1[0]^2 + y_1[1]^2 - t_1[0]^2 \\leq 0 \\), \\( y_2[0]^2 + y_2[1]^2 - t_2[0]^2 \\leq 0 \\), \\( y_3[0]^2 + y_3[1]^2 - t_3[0]^2 \\leq 0 \\), and \\( y_4[0]^2 + y_4[1]^2 - t_4[0]^2 \\leq 0 \\). All variables \\( x[0] \\) to \\( x[4] \\), \\( y_0[0] \\) to \\( y_4[1] \\), and \\( t_0[0] \\) to \\( t_4[0] \\) are free to take any real value.",
    "answer": -0.39,
    "ori": "13_optmath_bench",
    "index": 152,
    "description": "Minimize the total cost of allocating resources \\( x[0] \\) to \\( x[4] \\), where the cost coefficients are 0.190510737670758 for \\( x[0] \\), 1.129350959341043 for \\( x[1] \\), -1.45763004619859 for \\( x[2] \\), 0.4979171399142379 for \\( x[3] \\), and 0.217933194293673 for \\( x[4] \\). The allocation must satisfy four equality constraints. The first constraint requires 1.219567298556732 \\( x[0] \\) + 0.9289001747224751 \\( x[1] \\) - 1.336923760887845 \\( x[2] \\) - 1.115644167094657 \\( x[3] \\) - 0.4761759785063266 \\( x[4] \\) = -0.4344345340009604. The second constraint requires -1.662323208398086 \\( x[0] \\) + 0.8659229325025953 \\( x[1] \\) - 0.715611281293988 \\( x[2] \\) + 0.513394018474748 \\( x[3] \\) - 1.247456907892064 \\( x[4] \\) = -1.263487160460341. The third constraint requires -0.2849105246051509 \\( x[0] \\) - 1.235291728359102 \\( x[1] \\) + 1.089988844777487 \\( x[2] \\) - 1.059632720036963 \\( x[3] \\) + 0.2188818725225526 \\( x[4] \\) = 0.0598263158545554. The fourth constraint requires -1.037775353342995 \\( x[0] \\) - 1.808771173081519 \\( x[1] \\) + 1.006811579019581 \\( x[2] \\) + 0.2261443990014109 \\( x[3] \\) - 0.5001468099984979 \\( x[4] \\) = 0.6799624629319878. Additional linear constraints involve variables \\( y_0[0] \\), \\( y_0[1] \\), \\( t_0[0] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( t_1[0] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( t_2[0] \\), \\( y_3[0] \\), \\( y_3[1] \\), \\( t_3[0] \\), \\( y_4[0] \\), \\( y_4[1] \\), and \\( t_4[0] \\), which are free variables. These constraints are defined as follows: 0.1854712369852954 \\( x[0] \\) + 0.2126049926787192 \\( x[1] \\) - 0.0552426804013357 \\( x[2] \\) - 0.0300913423926646 \\( x[3] \\) + 0.0191442880734612 \\( x[4] \\) + \\( y_0[0] \\) = -0.00851123919328947; 0.033633911265618 \\( x[0] \\) + 0.0447803575912513 \\( x[1] \\) + 0.0906422549522432 \\( x[2] \\) - 0.140301925709981 \\( x[3] \\) + 0.0894655740323818 \\( x[4] \\) + \\( y_0[1] \\) = 0.1197073561594899; 1.032476848498754 \\( x[0] \\) + 0.5786229660982358 \\( x[1] \\) + 1.517117102281561 \\( x[2] \\) - 0.9892374377228246 \\( x[3] \\) - 0.7127788386839591 \\( x[4] \\) + \\( t_0[0] \\) = 0.0628164480170035; -0.0629876313760396 \\( x[0] \\) + 0.1186553496180699 \\( x[1] \\) + 0.0837866420373662 \\( x[2] \\) - 0.0175044400700457 \\( x[3] \\) + 0.0421466082438275 \\( x[4] \\) + \\( y_1[0] \\) = -0.0607801036942368; 0.0472913180476754 \\( x[0] \\) - 0.1672487320352799 \\( x[1] \\) + 0.00403030115525331 \\( x[2] \\) + 0.00774493287185739 \\( x[3] \\) - 0.0094688993206764 \\( x[4] \\) + \\( y_1[1] \\) = -0.0464456008702828; -0.2085979716989413 \\( x[0] \\) - 0.1092539540974228 \\( x[1] \\) - 2.174804559553748 \\( x[2] \\) - 1.69528753252808 \\( x[3] \\) - 1.525645556958908 \\( x[4] \\) + \\( t_1[0] \\) = 0.7445116249805878; 0.000912382 \\( x[0] \\) - 0.00863788041334999 \\( x[1] \\) - 0.0502948320610378 \\( x[2] \\) - 0.0667737933702229 \\( x[3] \\) + 0.2432277963883143 \\( x[4] \\) + \\( y_2[0] \\) = -0.139166601364713; 0.0232832507250414 \\( x[0] \\) + 0.2516736184489083 \\( x[1] \\) + 0.1386504617834828 \\( x[2] \\) - 0.0543682860611478 \\( x[3] \\) + 0.050704164298607 \\( x[4] \\) + \\( y_2[1] \\) = 0.0357160518360202; -0.5925926352567416 \\( x[0] \\) - 0.3891604825652387 \\( x[1] \\) + 0.0510217340581877 \\( x[2] \\) + 1.090606691890913 \\( x[3] \\) + 0.9938716757643966 \\( x[4] \\) + \\( t_2[0] \\) = 1.045297581678233; 0.1540622796961561 \\( x[0] \\) - 0.1883221064812006 \\( x[1] \\) + 0.1503453658091877 \\( x[2] \\) - 0.1474374678246578 \\( x[3] \\) + 0.0205212420510411 \\( x[4] \\) + \\( y_3[0] \\) = -0.00963411322153448; -0.0280861975467837 \\( x[0] \\) - 0.0105727074625737 \\( x[1] \\) + 0.0954257952878318 \\( x[2] \\) - 0.00589259567851985 \\( x[3] \\) + 0.145090882467532 \\( x[4] \\) + \\( y_3[1] \\) = -0.019437376136785; -1.252924325600617 \\( x[0] \\) + 1.244308803054627 \\( x[1] \\) - 2.21127388768641 \\( x[2] \\) - 1.885087766270206 \\( x[3] \\) - 1.006758968957397 \\( x[4] \\) + \\( t_3[0] \\) = 1.050824562362084; 0.1325971503040609 \\( x[0] \\) - 0.110249935172733 \\( x[1] \\) + 0.0558235975886938 \\( x[2] \\) + 0.0542813307961975 \\( x[3] \\) - 0.1156413261001238 \\( x[4] \\) + \\( y_4[0] \\) = 0.0325653324485877; -1.3730183823943952e-04 \\( x[0] \\) - 0.0268128227655337 \\( x[1] \\) + 0.0403141061350009 \\( x[2] \\) + 0.1864002689467194 \\( x[3] \\) - 0.0450317064978495 \\( x[4] \\) + \\( y_4[1] \\) = 0.0626883759594124; -1.090908275543176 \\( x[0] \\) + 0.3860841432731175 \\( x[1] \\) - 0.2953562653864454 \\( x[2] \\) - 0.2904011172481792 \\( x[3] \\) - 0.8273323625052638 \\( x[4] \\) + \\( t_4[0] \\) = 0.7353989816876624. Quadratic constraints require that the sum of the squares of the outcomes minus the square of the allocated resource must be less than or equal to zero for each project: \\( y_0[0]^2 + y_0[1]^2 - t_0[0]^2 \\leq 0 \\), \\( y_1[0]^2 + y_1[1]^2 - t_1[0]^2 \\leq 0 \\), \\( y_2[0]^2 + y_2[1]^2 - t_2[0]^2 \\leq 0 \\), \\( y_3[0]^2 + y_3[1]^2 - t_3[0]^2 \\leq 0 \\), and \\( y_4[0]^2 + y_4[1]^2 - t_4[0]^2 \\leq 0 \\). All variables \\( x[0] \\) to \\( x[4] \\), \\( y_0[0] \\) to \\( y_4[1] \\), and \\( t_0[0] \\) to \\( t_4[0] \\) are free to take any real value.",
    "ground_truth": -0.39
  },
  {
    "question": "The optimization problem involves minimizing a linear objective function influenced by decision variables \\(x[0]\\), \\(x[1]\\), and \\(x[2]\\), with coefficients \\(-1.363345803670422\\), \\(1.361682302913205\\), and \\(-0.0230642010699799\\), respectively. These variables are free to take any real value. The problem is subject to 18 linear equality constraints. The first three constraints enforce specific relationships: the sum of \\(-1.712919234088719\\) units from \\(x[0]\\), \\(0.5094892843494099\\) units from \\(x[1]\\), and \\(-1.176977823298391\\) units from \\(x[2]\\) must equal \\(1.969673610649569\\); the sum of \\(0.370350858647903\\) units from \\(x[0]\\), \\(0.1859117162151037\\) units from \\(x[1]\\), and \\(0.4554018017289621\\) units from \\(x[2]\\) must equal \\(-0.42565571941171\\); and the sum of \\(1.568958943694931\\) units from \\(x[0]\\), \\(0.1377471346710665\\) units from \\(x[1]\\), and \\(-0.5120283579251602\\) units from \\(x[2]\\) must equal \\(-0.6850278359750025\\). The remaining 15 constraints involve auxiliary variables \\(y_i[j]\\) and \\(t_i[0]\\), which are also free, and enforce linear relationships between these variables and the decision variables. For \\(i=0\\), the sum of \\(0.0870156668345264\\) units from \\(x[0]\\), \\(0.0507128953480789\\) units from \\(x[1]\\), \\(0.2266461831421958\\) units from \\(x[2]\\), and \\(y_0[0]\\) must equal \\(-0.1485711357308674\\). Similarly, for \\(i=0\\), the sum of \\(-0.1414205820862144\\) units from \\(x[0]\\), \\(-0.3264725908092034\\) units from \\(x[1]\\), \\(-0.0734148848236748\\) units from \\(x[2]\\), and \\(y_0[1]\\) must equal \\(-0.0393674285854488\\); and the sum of \\(0.1205790377305938\\) units from \\(x[0]\\), \\(-0.0720533164152696\\) units from \\(x[1]\\), \\(1.0940570577090807e-04\\) units from \\(x[2]\\), and \\(y_0[2]\\) must equal \\(0.0713736217121076\\). Additionally, for \\(i=0\\), the sum of \\(1.069325952651591\\) units from \\(x[0]\\), \\(-1.138089180693524\\) units from \\(x[1]\\), \\(-0.2833695676847757\\) units from \\(x[2]\\), and \\(t_0[0]\\) must equal \\(0.5757538449770843\\). These patterns continue for \\(i=1\\), \\(i=2\\), and \\(i=3\\), with similar linear relationships defined for \\(y_i[j]\\) and \\(t_i[0]\\). The problem also includes four quadratic constraints, which are second-order cone constraints. These constraints ensure that for each set of auxiliary variables \\(y_i[0]\\), \\(y_i[1]\\), and \\(y_i[2]\\), the squared sum of these variables does not exceed the square of \\(t_i[0]\\). The goal is to determine the values of the decision and auxiliary variables that minimize the objective function while satisfying all linear and quadratic constraints.",
    "answer": 1.42,
    "ori": "13_optmath_bench",
    "index": 153,
    "description": "The optimization problem involves minimizing a linear objective function influenced by decision variables \\(x[0]\\), \\(x[1]\\), and \\(x[2]\\), with coefficients \\(-1.363345803670422\\), \\(1.361682302913205\\), and \\(-0.0230642010699799\\), respectively. These variables are free to take any real value. The problem is subject to 18 linear equality constraints. The first three constraints enforce specific relationships: the sum of \\(-1.712919234088719\\) units from \\(x[0]\\), \\(0.5094892843494099\\) units from \\(x[1]\\), and \\(-1.176977823298391\\) units from \\(x[2]\\) must equal \\(1.969673610649569\\); the sum of \\(0.370350858647903\\) units from \\(x[0]\\), \\(0.1859117162151037\\) units from \\(x[1]\\), and \\(0.4554018017289621\\) units from \\(x[2]\\) must equal \\(-0.42565571941171\\); and the sum of \\(1.568958943694931\\) units from \\(x[0]\\), \\(0.1377471346710665\\) units from \\(x[1]\\), and \\(-0.5120283579251602\\) units from \\(x[2]\\) must equal \\(-0.6850278359750025\\). The remaining 15 constraints involve auxiliary variables \\(y_i[j]\\) and \\(t_i[0]\\), which are also free, and enforce linear relationships between these variables and the decision variables. For \\(i=0\\), the sum of \\(0.0870156668345264\\) units from \\(x[0]\\), \\(0.0507128953480789\\) units from \\(x[1]\\), \\(0.2266461831421958\\) units from \\(x[2]\\), and \\(y_0[0]\\) must equal \\(-0.1485711357308674\\). Similarly, for \\(i=0\\), the sum of \\(-0.1414205820862144\\) units from \\(x[0]\\), \\(-0.3264725908092034\\) units from \\(x[1]\\), \\(-0.0734148848236748\\) units from \\(x[2]\\), and \\(y_0[1]\\) must equal \\(-0.0393674285854488\\); and the sum of \\(0.1205790377305938\\) units from \\(x[0]\\), \\(-0.0720533164152696\\) units from \\(x[1]\\), \\(1.0940570577090807e-04\\) units from \\(x[2]\\), and \\(y_0[2]\\) must equal \\(0.0713736217121076\\). Additionally, for \\(i=0\\), the sum of \\(1.069325952651591\\) units from \\(x[0]\\), \\(-1.138089180693524\\) units from \\(x[1]\\), \\(-0.2833695676847757\\) units from \\(x[2]\\), and \\(t_0[0]\\) must equal \\(0.5757538449770843\\). These patterns continue for \\(i=1\\), \\(i=2\\), and \\(i=3\\), with similar linear relationships defined for \\(y_i[j]\\) and \\(t_i[0]\\). The problem also includes four quadratic constraints, which are second-order cone constraints. These constraints ensure that for each set of auxiliary variables \\(y_i[0]\\), \\(y_i[1]\\), and \\(y_i[2]\\), the squared sum of these variables does not exceed the square of \\(t_i[0]\\). The goal is to determine the values of the decision and auxiliary variables that minimize the objective function while satisfying all linear and quadratic constraints.",
    "ground_truth": 1.42
  },
  {
    "question": "The problem involves optimizing the allocation of five free variables \\( x[0] \\) to \\( x[4] \\), along with auxiliary variables \\( y_0[0] \\) to \\( y_2[3] \\) and \\( t_0[0] \\) to \\( t_2[0] \\), which are also free. The objective is to minimize the expression \\(-0.4183092460544717 x[0] - 0.2813052479554071 x[1] + 0.134543055273074 x[2] + 0.3293895938730942 x[3] - 0.5013729625677056 x[4]\\). The problem is subject to five linear equality constraints. The first constraint requires \\(-0.2042258848533399 x[0] + 0.2505367949866907 x[1] - 0.4309025998889995 x[2] + 1.309402520858531 x[3] + 2.586402096787606 x[4] = -3.156703022107761\\). The second constraint imposes \\(-0.9968810525037243 x[0] - 0.4546685233810487 x[1] + 0.4750317828663017 x[2] + 0.266787146193911 x[3] - 1.191880626574726 x[4] = -2.176991821226254\\). The third constraint requires \\(0.349956286844281 x[0] + 1.015584003075466 x[1] - 0.0836288458590485 x[2] - 0.0695677711676667 x[3] + 0.104824587707105 x[4] = 2.926695432150372\\). The fourth constraint enforces \\(0.7470800133528747 x[0] + 0.8253890222140957 x[1] + 0.0968330451370987 x[2] + 0.7049632173662657 x[3] + 0.7872792028260496 x[4] = 0.5732174371789283\\). The fifth constraint requires \\(-1.307269223716067 x[0] + 0.3813744238506016 x[1] - 0.4050739984159557 x[2] + 1.424197873139263 x[3] + 0.4653468565843648 x[4] = -3.193503084865396\\).\n\nAdditionally, the problem includes constraints linking the variables \\( x[0] \\) to \\( x[4] \\) with auxiliary variables \\( y_0[0] \\) to \\( y_2[3] \\). For example, the first linking constraint requires \\(-0.3645044940419532 x[0] - 1.443832971588788 x[1] + 0.461589002970339 x[2] + 0.2606857473736294 x[3] + 1.721110703706202 x[4] + y_0[0] = -0.9152180704947402\\). Similar constraints exist for \\( y_0[1] \\), \\( y_0[2] \\), \\( y_0[3] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), \\( y_1[3] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\), each with specific coefficients and target values.\n\nThe problem also includes quadratic constraints involving the variables \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). The first quadratic constraint ensures that \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 + y_0[3]^2 \\leq 0\\). The second quadratic constraint requires \\(-t_1[0]^2 + y_1[0]^2 + y_1[1]^2 + y_1[2]^2 + y_1[3]^2 \\leq 0\\), and the third quadratic constraint enforces \\(-t_2[0]^2 + y_2[0]^2 + y_2[1]^2 + y_2[2]^2 + y_2[3]^2 \\leq 0\\). These constraints ensure that the relationships between the auxiliary variables and the safety buffers are maintained. The goal is to minimize the objective function while satisfying all linear equality, linking, and quadratic constraints.",
    "answer": -1.65,
    "ori": "13_optmath_bench",
    "index": 154,
    "description": "The problem involves optimizing the allocation of five free variables \\( x[0] \\) to \\( x[4] \\), along with auxiliary variables \\( y_0[0] \\) to \\( y_2[3] \\) and \\( t_0[0] \\) to \\( t_2[0] \\), which are also free. The objective is to minimize the expression \\(-0.4183092460544717 x[0] - 0.2813052479554071 x[1] + 0.134543055273074 x[2] + 0.3293895938730942 x[3] - 0.5013729625677056 x[4]\\). The problem is subject to five linear equality constraints. The first constraint requires \\(-0.2042258848533399 x[0] + 0.2505367949866907 x[1] - 0.4309025998889995 x[2] + 1.309402520858531 x[3] + 2.586402096787606 x[4] = -3.156703022107761\\). The second constraint imposes \\(-0.9968810525037243 x[0] - 0.4546685233810487 x[1] + 0.4750317828663017 x[2] + 0.266787146193911 x[3] - 1.191880626574726 x[4] = -2.176991821226254\\). The third constraint requires \\(0.349956286844281 x[0] + 1.015584003075466 x[1] - 0.0836288458590485 x[2] - 0.0695677711676667 x[3] + 0.104824587707105 x[4] = 2.926695432150372\\). The fourth constraint enforces \\(0.7470800133528747 x[0] + 0.8253890222140957 x[1] + 0.0968330451370987 x[2] + 0.7049632173662657 x[3] + 0.7872792028260496 x[4] = 0.5732174371789283\\). The fifth constraint requires \\(-1.307269223716067 x[0] + 0.3813744238506016 x[1] - 0.4050739984159557 x[2] + 1.424197873139263 x[3] + 0.4653468565843648 x[4] = -3.193503084865396\\).\n\nAdditionally, the problem includes constraints linking the variables \\( x[0] \\) to \\( x[4] \\) with auxiliary variables \\( y_0[0] \\) to \\( y_2[3] \\). For example, the first linking constraint requires \\(-0.3645044940419532 x[0] - 1.443832971588788 x[1] + 0.461589002970339 x[2] + 0.2606857473736294 x[3] + 1.721110703706202 x[4] + y_0[0] = -0.9152180704947402\\). Similar constraints exist for \\( y_0[1] \\), \\( y_0[2] \\), \\( y_0[3] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), \\( y_1[3] \\), \\( y_2[0] \\), \\( y_2[1] \\), \\( y_2[2] \\), and \\( y_2[3] \\), each with specific coefficients and target values.\n\nThe problem also includes quadratic constraints involving the variables \\( t_0[0] \\), \\( t_1[0] \\), and \\( t_2[0] \\). The first quadratic constraint ensures that \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 + y_0[3]^2 \\leq 0\\). The second quadratic constraint requires \\(-t_1[0]^2 + y_1[0]^2 + y_1[1]^2 + y_1[2]^2 + y_1[3]^2 \\leq 0\\), and the third quadratic constraint enforces \\(-t_2[0]^2 + y_2[0]^2 + y_2[1]^2 + y_2[2]^2 + y_2[3]^2 \\leq 0\\). These constraints ensure that the relationships between the auxiliary variables and the safety buffers are maintained. The goal is to minimize the objective function while satisfying all linear equality, linking, and quadratic constraints.",
    "ground_truth": -1.65
  },
  {
    "question": "The optimization problem involves minimizing the total cost defined by the weighted contributions of four decision variables: x[0] with a cost of 0.4568048651554198, x[1] with a cost of 0.6822815404386418, x[2] with a cost of 1.801831165946818, and x[3] with a cost of 1.056541158185233. The objective is to minimize the sum of these weighted variables.\n\nThe problem is subject to several equality constraints. The first equality constraint is 1.222253726840453 times x[0] minus 0.9058589863483399 times x[1] plus 0.0693521718801037 times x[2] plus 2.178655656494156 times x[3] equals -0.4195106543118642. The second equality constraint is 0.1473169107230136 times x[0] plus 0.5172571290693887 times x[1] minus 1.293979451435283 times x[2] minus 1.054887597556351 times x[3] equals 0.3661434959821696. The third equality constraint is 0.4647687397733393 times x[0] plus 0.2341060054529592 times x[1] plus 1.778866018427452 times x[2] plus 0.8638766717259377 times x[3] equals -1.748015587968725. The fourth equality constraint is -0.0250593592360135 times x[0] minus 0.157487553997023 times x[1] minus 0.6980379871220622 times x[2] minus 0.1710905557322772 times x[3] equals 0.6138465007098338. The fifth equality constraint is -0.6647756257582154 times x[0] plus 0.5784421525498459 times x[1] plus 2.117378290823709 times x[2] minus 0.4463943452167778 times x[3] equals -1.25361991665147.\n\nAdditionally, there are auxiliary equality constraints involving variables y_0 and y_1. The first auxiliary constraint is 0.0689239653107249 times x[0] plus 0.0678131299325625 times x[1] minus 0.2023493775147238 times x[2] minus 0.0739358112586078 times x[3] plus y_0[0] equals -0.093423190067388. The second auxiliary constraint is 0.0445323421724085 times x[0] minus 0.0374069933363333 times x[1] minus 0.0947746176074507 times x[2] plus 0.0625716234434831 times x[3] plus y_0[1] equals 0.0993152088054553. The third auxiliary constraint is -0.056297721725534 times x[0] plus 0.0263563878275638 times x[1] minus 0.1207830337883556 times x[2] minus 0.0345530874849539 times x[3] plus y_0[2] equals -0.0719891440967462. The fourth auxiliary constraint is -0.0389348469541953 times x[0] minus 0.0207466886867141 times x[1] minus 0.1633463289784982 times x[2] minus 0.0676994906553111 times x[3] plus y_0[3] equals 0.0610083958048695.\n\nThe fifth auxiliary constraint is 0.5721177896133665 times x[0] minus 0.0673019079083626 times x[1] plus 0.0564335910547514 times x[2] minus 0.3663765912716627 times x[3] plus t_0[0] equals 1.173542716306169. The sixth auxiliary constraint is 0.0925151391451339 times x[0] minus 0.1031167146627894 times x[1] plus 0.000327681659276563 times x[2] minus 0.1038664121798131 times x[3] plus y_1[0] equals 0.00701092577147306. The seventh auxiliary constraint is -0.0311602517533045 times x[0] plus 0.0527217587580109 times x[1] plus 0.0357033538861844 times x[2] minus 0.0441292118120421 times x[3] plus y_1[1] equals -0.00804391349899621. The eighth auxiliary constraint is 0.088078411493411 times x[0] plus 0.0425752446328825 times x[1] plus 0.0742562500174835 times x[2] minus 0.0601203608650306 times x[3] plus y_1[2] equals 0.0417669069308694. The ninth auxiliary constraint is 0.0671054419934661 times x[0] minus 0.0455987092328547 times x[1] plus 0.00380146 times x[2] minus 0.0199997335030863 times x[3] plus y_1[3] equals 0.0438732344355552. The tenth auxiliary constraint is 0.6551923068010495 times x[0] plus 0.315985578120184 times x[1] minus 0.1539347685265308 times x[2] minus 0.9668187288441786 times x[3] plus t_1[0] equals 0.9921660803606838.\n\nThe problem also includes quadratic inequality constraints to ensure operational feasibility. The first quadratic constraint is negative t_0[0] squared plus y_0[0] squared plus y_0[1] squared plus y_0[2] squared plus y_0[3] squared is less than or equal to zero. The second quadratic constraint is negative t_1[0] squared plus y_1[0] squared plus y_1[1] squared plus y_1[2] squared plus y_1[3] squared is less than or equal to zero.\n\nAll decision variables x[0], x[1], x[2], x[3], as well as the auxiliary variables y_0 and y_1, are free to take any real value, meaning there are no explicit upper or lower bounds on these variables. The auxiliary variables t_0[0] and t_1[0] are also free to take any real value. The problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the quadratic constraints.",
    "answer": -2.28,
    "ori": "13_optmath_bench",
    "index": 155,
    "description": "The optimization problem involves minimizing the total cost defined by the weighted contributions of four decision variables: x[0] with a cost of 0.4568048651554198, x[1] with a cost of 0.6822815404386418, x[2] with a cost of 1.801831165946818, and x[3] with a cost of 1.056541158185233. The objective is to minimize the sum of these weighted variables.\n\nThe problem is subject to several equality constraints. The first equality constraint is 1.222253726840453 times x[0] minus 0.9058589863483399 times x[1] plus 0.0693521718801037 times x[2] plus 2.178655656494156 times x[3] equals -0.4195106543118642. The second equality constraint is 0.1473169107230136 times x[0] plus 0.5172571290693887 times x[1] minus 1.293979451435283 times x[2] minus 1.054887597556351 times x[3] equals 0.3661434959821696. The third equality constraint is 0.4647687397733393 times x[0] plus 0.2341060054529592 times x[1] plus 1.778866018427452 times x[2] plus 0.8638766717259377 times x[3] equals -1.748015587968725. The fourth equality constraint is -0.0250593592360135 times x[0] minus 0.157487553997023 times x[1] minus 0.6980379871220622 times x[2] minus 0.1710905557322772 times x[3] equals 0.6138465007098338. The fifth equality constraint is -0.6647756257582154 times x[0] plus 0.5784421525498459 times x[1] plus 2.117378290823709 times x[2] minus 0.4463943452167778 times x[3] equals -1.25361991665147.\n\nAdditionally, there are auxiliary equality constraints involving variables y_0 and y_1. The first auxiliary constraint is 0.0689239653107249 times x[0] plus 0.0678131299325625 times x[1] minus 0.2023493775147238 times x[2] minus 0.0739358112586078 times x[3] plus y_0[0] equals -0.093423190067388. The second auxiliary constraint is 0.0445323421724085 times x[0] minus 0.0374069933363333 times x[1] minus 0.0947746176074507 times x[2] plus 0.0625716234434831 times x[3] plus y_0[1] equals 0.0993152088054553. The third auxiliary constraint is -0.056297721725534 times x[0] plus 0.0263563878275638 times x[1] minus 0.1207830337883556 times x[2] minus 0.0345530874849539 times x[3] plus y_0[2] equals -0.0719891440967462. The fourth auxiliary constraint is -0.0389348469541953 times x[0] minus 0.0207466886867141 times x[1] minus 0.1633463289784982 times x[2] minus 0.0676994906553111 times x[3] plus y_0[3] equals 0.0610083958048695.\n\nThe fifth auxiliary constraint is 0.5721177896133665 times x[0] minus 0.0673019079083626 times x[1] plus 0.0564335910547514 times x[2] minus 0.3663765912716627 times x[3] plus t_0[0] equals 1.173542716306169. The sixth auxiliary constraint is 0.0925151391451339 times x[0] minus 0.1031167146627894 times x[1] plus 0.000327681659276563 times x[2] minus 0.1038664121798131 times x[3] plus y_1[0] equals 0.00701092577147306. The seventh auxiliary constraint is -0.0311602517533045 times x[0] plus 0.0527217587580109 times x[1] plus 0.0357033538861844 times x[2] minus 0.0441292118120421 times x[3] plus y_1[1] equals -0.00804391349899621. The eighth auxiliary constraint is 0.088078411493411 times x[0] plus 0.0425752446328825 times x[1] plus 0.0742562500174835 times x[2] minus 0.0601203608650306 times x[3] plus y_1[2] equals 0.0417669069308694. The ninth auxiliary constraint is 0.0671054419934661 times x[0] minus 0.0455987092328547 times x[1] plus 0.00380146 times x[2] minus 0.0199997335030863 times x[3] plus y_1[3] equals 0.0438732344355552. The tenth auxiliary constraint is 0.6551923068010495 times x[0] plus 0.315985578120184 times x[1] minus 0.1539347685265308 times x[2] minus 0.9668187288441786 times x[3] plus t_1[0] equals 0.9921660803606838.\n\nThe problem also includes quadratic inequality constraints to ensure operational feasibility. The first quadratic constraint is negative t_0[0] squared plus y_0[0] squared plus y_0[1] squared plus y_0[2] squared plus y_0[3] squared is less than or equal to zero. The second quadratic constraint is negative t_1[0] squared plus y_1[0] squared plus y_1[1] squared plus y_1[2] squared plus y_1[3] squared is less than or equal to zero.\n\nAll decision variables x[0], x[1], x[2], x[3], as well as the auxiliary variables y_0 and y_1, are free to take any real value, meaning there are no explicit upper or lower bounds on these variables. The auxiliary variables t_0[0] and t_1[0] are also free to take any real value. The problem is a Second-Order Cone Programming (SOCP) problem, as indicated by the quadratic constraints.",
    "ground_truth": -2.28
  },
  {
    "question": "The problem involves minimizing the total cost of allocating three resources, \\(x_0\\), \\(x_1\\), and \\(x_2\\), where allocating one unit of \\(x_0\\) reduces the cost by 0.4471510837992146 units, allocating one unit of \\(x_1\\) reduces the cost by 0.5249098983165018 units, and allocating one unit of \\(x_2\\) increases the cost by 1.523631136652647 units. The allocation must satisfy five linear equality constraints:\n1. The combined allocation of \\(x_0\\), \\(x_1\\), and \\(x_2\\) must result in a net value of 0.7034913153072593, with \\(x_0\\) contributing -0.3702651403450675, \\(x_1\\) contributing 0.7297352123799089, and \\(x_2\\) contributing 0.418858390580152.\n2. The allocation must balance out to -0.1118855888702875, with \\(x_0\\) contributing 0.4153630032109168, \\(x_1\\) contributing 1.22940502964378, and \\(x_2\\) contributing -0.369836178888419.\n3. The allocation must balance out to -0.0870555137122539, with \\(x_0\\) contributing 0.6396510452716259, \\(x_1\\) contributing -0.9807875135502231, and \\(x_2\\) contributing 1.032537634661943.\n4. The allocation must balance out to -1.503406234028836, with \\(x_0\\) contributing 1.154571984507194, \\(x_1\\) contributing -0.0797094266894998, and \\(x_2\\) contributing -1.259256932824717.\n5. The allocation must balance out to 0.4968828204562829, with \\(x_0\\) contributing -0.7680742354583855, \\(x_1\\) contributing -1.463758817488339, and \\(x_2\\) contributing 0.7608599270643391.\n\nAdditionally, four auxiliary variables \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(t_0[0]\\) are introduced, which are determined by the following linear equations:\n- \\(y_0[0]\\) is determined by \\(0.149372637294763 \\cdot x_0 - 0.0700461252415553 \\cdot x_1 + 0.0637326829867655 \\cdot x_2 = -0.1129095562448545\\).\n- \\(y_0[1]\\) is determined by \\(-0.0658271548457527 \\cdot x_0 + 0.0224831194568463 \\cdot x_1 - 0.00639053916626198 \\cdot x_2 = -0.0490454717367705\\).\n- \\(y_0[2]\\) is determined by \\(-0.00559770209526484 \\cdot x_0 - 0.1749117419573911 \\cdot x_1 - 0.0549153174437265 \\cdot x_2 = 0.0268845405956578\\).\n- \\(t_0[0]\\) is determined by \\(0.2634865225900492 \\cdot x_0 + 1.089839700108032 \\cdot x_1 - 1.345710871710692 \\cdot x_2 = 0.2701569757905559\\).\n\nA second-order cone constraint is imposed, requiring that the sum of the squares of \\(y_0[0]\\), \\(y_0[1]\\), and \\(y_0[2]\\) should not exceed the square of \\(t_0[0]\\). All decision variables \\(x_0\\), \\(x_1\\), \\(x_2\\), \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(t_0[0]\\) are free to take any real value, meaning there are no upper or lower bounds imposed on their values. The goal is to determine the optimal allocation of \\(x_0\\), \\(x_1\\), and \\(x_2\\) to minimize the total cost while satisfying all the above constraints, including the second-order cone constraint. This is a Second-Order Cone Programming (SOCP) problem.",
    "answer": 1.03,
    "ori": "13_optmath_bench",
    "index": 156,
    "description": "The problem involves minimizing the total cost of allocating three resources, \\(x_0\\), \\(x_1\\), and \\(x_2\\), where allocating one unit of \\(x_0\\) reduces the cost by 0.4471510837992146 units, allocating one unit of \\(x_1\\) reduces the cost by 0.5249098983165018 units, and allocating one unit of \\(x_2\\) increases the cost by 1.523631136652647 units. The allocation must satisfy five linear equality constraints:\n1. The combined allocation of \\(x_0\\), \\(x_1\\), and \\(x_2\\) must result in a net value of 0.7034913153072593, with \\(x_0\\) contributing -0.3702651403450675, \\(x_1\\) contributing 0.7297352123799089, and \\(x_2\\) contributing 0.418858390580152.\n2. The allocation must balance out to -0.1118855888702875, with \\(x_0\\) contributing 0.4153630032109168, \\(x_1\\) contributing 1.22940502964378, and \\(x_2\\) contributing -0.369836178888419.\n3. The allocation must balance out to -0.0870555137122539, with \\(x_0\\) contributing 0.6396510452716259, \\(x_1\\) contributing -0.9807875135502231, and \\(x_2\\) contributing 1.032537634661943.\n4. The allocation must balance out to -1.503406234028836, with \\(x_0\\) contributing 1.154571984507194, \\(x_1\\) contributing -0.0797094266894998, and \\(x_2\\) contributing -1.259256932824717.\n5. The allocation must balance out to 0.4968828204562829, with \\(x_0\\) contributing -0.7680742354583855, \\(x_1\\) contributing -1.463758817488339, and \\(x_2\\) contributing 0.7608599270643391.\n\nAdditionally, four auxiliary variables \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(t_0[0]\\) are introduced, which are determined by the following linear equations:\n- \\(y_0[0]\\) is determined by \\(0.149372637294763 \\cdot x_0 - 0.0700461252415553 \\cdot x_1 + 0.0637326829867655 \\cdot x_2 = -0.1129095562448545\\).\n- \\(y_0[1]\\) is determined by \\(-0.0658271548457527 \\cdot x_0 + 0.0224831194568463 \\cdot x_1 - 0.00639053916626198 \\cdot x_2 = -0.0490454717367705\\).\n- \\(y_0[2]\\) is determined by \\(-0.00559770209526484 \\cdot x_0 - 0.1749117419573911 \\cdot x_1 - 0.0549153174437265 \\cdot x_2 = 0.0268845405956578\\).\n- \\(t_0[0]\\) is determined by \\(0.2634865225900492 \\cdot x_0 + 1.089839700108032 \\cdot x_1 - 1.345710871710692 \\cdot x_2 = 0.2701569757905559\\).\n\nA second-order cone constraint is imposed, requiring that the sum of the squares of \\(y_0[0]\\), \\(y_0[1]\\), and \\(y_0[2]\\) should not exceed the square of \\(t_0[0]\\). All decision variables \\(x_0\\), \\(x_1\\), \\(x_2\\), \\(y_0[0]\\), \\(y_0[1]\\), \\(y_0[2]\\), and \\(t_0[0]\\) are free to take any real value, meaning there are no upper or lower bounds imposed on their values. The goal is to determine the optimal allocation of \\(x_0\\), \\(x_1\\), and \\(x_2\\) to minimize the total cost while satisfying all the above constraints, including the second-order cone constraint. This is a Second-Order Cone Programming (SOCP) problem.",
    "ground_truth": 1.03
  },
  {
    "question": "The optimization problem involves minimizing the total operational cost, calculated as -0.6407821570716368 times the resource allocation at Hub 0, plus 0.1282093451424064 times the allocation at Hub 1, plus 0.5610539844701511 times the allocation at Hub 2, minus 0.7387913261851949 times the allocation at Hub 3, minus 0.6386135273718804 times the allocation at Hub 4. The resource allocations at each hub must satisfy three operational balance equations. The first equation states that 0.8358787628285221 times the allocation at Hub 0, minus 0.3221455044008418 times the allocation at Hub 1, plus 0.1449025416792807 times the allocation at Hub 2, minus 1.143088864150698 times the allocation at Hub 3, minus 0.2961821681740678 times the allocation at Hub 4, equals -0.3533166906383274. The second equation requires that -0.00318416966765216 times the allocation at Hub 0, plus 0.0636663117252584 times the allocation at Hub 1, minus 0.6335115786242427 times the allocation at Hub 2, plus 0.7906235569218798 times the allocation at Hub 3, plus 1.611869546160813 times the allocation at Hub 4, equals 0.6687613216515473. The third equation specifies that 0.6413661217416131 times the allocation at Hub 0, plus 0.4316049771976506 times the allocation at Hub 1, minus 2.705808657534711 times the allocation at Hub 2, minus 0.4442117847616459 times the allocation at Hub 3, plus 0.1130949341290518 times the allocation at Hub 4, equals -3.522255392214968.\n\nEach hub has additional constraints linking resource allocations to secondary operational metrics. For Hub 0, 1.486108997408437 times the allocation at Hub 0, plus 1.031757962743657 times the allocation at Hub 1, minus 0.4518720885240323 times the allocation at Hub 2, minus 0.3480442946563601 times the allocation at Hub 3, plus 1.580022153897245 times the allocation at Hub 4, plus the auxiliary variable y_0[0], equals -0.2475605897441492. Similarly, for Hub 0, -0.4066096523615669 times the allocation at Hub 0, minus 1.175211752170571 times the allocation at Hub 1, minus 0.7069411728647763 times the allocation at Hub 2, plus 0.836056412101241 times the allocation at Hub 3, minus 0.8926238938498942 times the allocation at Hub 4, plus the auxiliary variable y_0[1], equals 0.3074449602324441. Additionally, for Hub 0, -0.0569892486285832 times the allocation at Hub 0, plus 0.1233562548906215 times the allocation at Hub 1, minus 0.7134682305447539 times the allocation at Hub 2, minus 0.6038275844685674 times the allocation at Hub 3, minus 1.619511303009083 times the allocation at Hub 4, plus the auxiliary variable t_0[0], equals 0.2204862656053741.\n\nSimilar constraints are specified for Hubs 1 to 4. For Hub 1, -1.294423006398278 times the allocation at Hub 0, plus 1.346172260047954 times the allocation at Hub 1, minus 0.358451283614951 times the allocation at Hub 2, minus 1.928440987292954 times the allocation at Hub 3, plus 1.126221395948665 times the allocation at Hub 4, plus y_1[0], equals 1.376491310478152. For Hub 1, 0.5609955781941032 times the allocation at Hub 0, minus 0.0458140884642076 times the allocation at Hub 1, minus 0.0344324048732548 times the allocation at Hub 2, plus 0.4252922167535212 times the allocation at Hub 3, minus 1.28973345438307 times the allocation at Hub 4, plus y_1[1], equals 0.051955328245377. For Hub 1, 0.0627617087678124 times the allocation at Hub 0, plus 1.313586666171607 times the allocation at Hub 1, minus 0.0750373702925165 times the allocation at Hub 2, plus 0.8637943589659705 times the allocation at Hub 3, minus 2.128672133715813 times the allocation at Hub 4, plus t_1[0], equals 0.4369998177620138.\n\nFor Hub 2, 0.00108296658143404 times the allocation at Hub 0, plus 0.1150269209288099 times the allocation at Hub 1, minus 0.058430562821969 times the allocation at Hub 2, plus 0.1809260750957712 times the allocation at Hub 3, minus 0.107839460895758 times the allocation at Hub 4, plus y_2[0], equals -0.0466779941627568. For Hub 2, 0.1638929872378048 times the allocation at Hub 0, minus 0.0440335287917339 times the allocation at Hub 1, plus 0.1119306383643067 times the allocation at Hub 2, plus 0.0829079267212388 times the allocation at Hub 3, minus 0.0762160399972494 times the allocation at Hub 4, plus y_2[1], equals 0.1065935090322246. For Hub 2, 1.78119670849211 times the allocation at Hub 0, minus 0.9909783216060062 times the allocation at Hub 1, minus 1.08396186916195 times the allocation at Hub 2, minus 0.2137547994124323 times the allocation at Hub 3, minus 0.2410135384227864 times the allocation at Hub 4, plus t_2[0], equals 0.5794902323601145.\n\nFor Hub 3, -0.0641439226811574 times the allocation at Hub 0, minus 0.0718053951291886 times the allocation at Hub 1, plus 0.0269862978161679 times the allocation at Hub 2, plus 0.1102601358034707 times the allocation at Hub 3, plus 7.27392e-05 times the allocation at Hub 4, plus y_3[0], equals 0.00315977947277087. For Hub 3, -0.0632288388926973 times the allocation at Hub 0, minus 0.1241779187569768 times the allocation at Hub 1, plus 0.0064629944919384 times the allocation at Hub 2, plus 0.0116896390416125 times the allocation at Hub 3, plus 0.079988047761199 times the allocation at Hub 4, plus y_3[1], equals 0.0925241950659326. For Hub 3, 0.4429906926189995 times the allocation at Hub 0, plus 0.0991542311544501 times the allocation at Hub 1, minus 0.3240726565893556 times the allocation at Hub 2, minus 0.6543525499518488 times the allocation at Hub 3, minus 0.318896820227852 times the allocation at Hub 4, plus t_3[0], equals 0.1889924405903281.\n\nFor Hub 4, 0.0341804938689715 times the allocation at Hub 0, minus 0.1200246209041026 times the allocation at Hub 1, plus 0.0477968354488662 times the allocation at Hub 2, plus 0.0486460651624679 times the allocation at Hub 3, plus 0.0259780092785045 times the allocation at Hub 4, plus y_4[0], equals 0.1858842417400162. For Hub 4, -0.0427025044864235 times the allocation at Hub 0, minus 0.1161557760668262 times the allocation at Hub 1, minus 0.1281191768228226 times the allocation at Hub 2, plus 0.1296447474115312 times the allocation at Hub 3, minus 0.16357870291776 times the allocation at Hub 4, plus y_4[1], equals 0.0601306829794548. For Hub 4, 0.2140065823499792 times the allocation at Hub 0, minus 0.2328142561302691 times the allocation at Hub 1, minus 0.848196376440762 times the allocation at Hub 2, minus 0.5073797164375169 times the allocation at Hub 3, minus 2.928182945709474 times the allocation at Hub 4, plus t_4[0], equals 1.310467204578853.\n\nTo ensure operational feasibility, each hub must satisfy a second-order cone constraint. For Hub 0, the sum of the squares of y_0[0] and y_0[1] must be less than or equal to the square of t_0[0]. Similarly, for Hub 1, the sum of the squares of y_1[0] and y_1[1] must be less than or equal to the square of t_1[0]. For Hub 2, the sum of the squares of y_2[0] and y_2[1] must be less than or equal to the square of t_2[0]. For Hub 3, the sum of the squares of y_3[0] and y_3[1] must be less than or equal to the square of t_3[0]. For Hub 4, the sum of the squares of y_4[0] and y_4[1] must be less than or equal to the square of t_4[0].\n\nAll variables, including resource allocations and auxiliary variables, are free to take any real value, allowing for flexible resource allocation to minimize costs while satisfying all operational constraints. The problem is a Second-Order Cone Programming (SOCP) problem, as it involves quadratic constraints represented by the second-order cone constraints. The equality constraints are linear, while the additional constraints (R3 to R17) link resource allocations to secondary operational metrics. The auxiliary variables (y_0[0], y_0[1], t_0[0], etc.) are part of the second-order cone constraints, and all variables (x[0] to x[4], y_0[0], y_0[1], y_1[0], y_1[1], etc., and t_0[0], t_1[0], t_2[0], etc.) are free variables.",
    "answer": -0.18,
    "ori": "13_optmath_bench",
    "index": 157,
    "description": "The optimization problem involves minimizing the total operational cost, calculated as -0.6407821570716368 times the resource allocation at Hub 0, plus 0.1282093451424064 times the allocation at Hub 1, plus 0.5610539844701511 times the allocation at Hub 2, minus 0.7387913261851949 times the allocation at Hub 3, minus 0.6386135273718804 times the allocation at Hub 4. The resource allocations at each hub must satisfy three operational balance equations. The first equation states that 0.8358787628285221 times the allocation at Hub 0, minus 0.3221455044008418 times the allocation at Hub 1, plus 0.1449025416792807 times the allocation at Hub 2, minus 1.143088864150698 times the allocation at Hub 3, minus 0.2961821681740678 times the allocation at Hub 4, equals -0.3533166906383274. The second equation requires that -0.00318416966765216 times the allocation at Hub 0, plus 0.0636663117252584 times the allocation at Hub 1, minus 0.6335115786242427 times the allocation at Hub 2, plus 0.7906235569218798 times the allocation at Hub 3, plus 1.611869546160813 times the allocation at Hub 4, equals 0.6687613216515473. The third equation specifies that 0.6413661217416131 times the allocation at Hub 0, plus 0.4316049771976506 times the allocation at Hub 1, minus 2.705808657534711 times the allocation at Hub 2, minus 0.4442117847616459 times the allocation at Hub 3, plus 0.1130949341290518 times the allocation at Hub 4, equals -3.522255392214968.\n\nEach hub has additional constraints linking resource allocations to secondary operational metrics. For Hub 0, 1.486108997408437 times the allocation at Hub 0, plus 1.031757962743657 times the allocation at Hub 1, minus 0.4518720885240323 times the allocation at Hub 2, minus 0.3480442946563601 times the allocation at Hub 3, plus 1.580022153897245 times the allocation at Hub 4, plus the auxiliary variable y_0[0], equals -0.2475605897441492. Similarly, for Hub 0, -0.4066096523615669 times the allocation at Hub 0, minus 1.175211752170571 times the allocation at Hub 1, minus 0.7069411728647763 times the allocation at Hub 2, plus 0.836056412101241 times the allocation at Hub 3, minus 0.8926238938498942 times the allocation at Hub 4, plus the auxiliary variable y_0[1], equals 0.3074449602324441. Additionally, for Hub 0, -0.0569892486285832 times the allocation at Hub 0, plus 0.1233562548906215 times the allocation at Hub 1, minus 0.7134682305447539 times the allocation at Hub 2, minus 0.6038275844685674 times the allocation at Hub 3, minus 1.619511303009083 times the allocation at Hub 4, plus the auxiliary variable t_0[0], equals 0.2204862656053741.\n\nSimilar constraints are specified for Hubs 1 to 4. For Hub 1, -1.294423006398278 times the allocation at Hub 0, plus 1.346172260047954 times the allocation at Hub 1, minus 0.358451283614951 times the allocation at Hub 2, minus 1.928440987292954 times the allocation at Hub 3, plus 1.126221395948665 times the allocation at Hub 4, plus y_1[0], equals 1.376491310478152. For Hub 1, 0.5609955781941032 times the allocation at Hub 0, minus 0.0458140884642076 times the allocation at Hub 1, minus 0.0344324048732548 times the allocation at Hub 2, plus 0.4252922167535212 times the allocation at Hub 3, minus 1.28973345438307 times the allocation at Hub 4, plus y_1[1], equals 0.051955328245377. For Hub 1, 0.0627617087678124 times the allocation at Hub 0, plus 1.313586666171607 times the allocation at Hub 1, minus 0.0750373702925165 times the allocation at Hub 2, plus 0.8637943589659705 times the allocation at Hub 3, minus 2.128672133715813 times the allocation at Hub 4, plus t_1[0], equals 0.4369998177620138.\n\nFor Hub 2, 0.00108296658143404 times the allocation at Hub 0, plus 0.1150269209288099 times the allocation at Hub 1, minus 0.058430562821969 times the allocation at Hub 2, plus 0.1809260750957712 times the allocation at Hub 3, minus 0.107839460895758 times the allocation at Hub 4, plus y_2[0], equals -0.0466779941627568. For Hub 2, 0.1638929872378048 times the allocation at Hub 0, minus 0.0440335287917339 times the allocation at Hub 1, plus 0.1119306383643067 times the allocation at Hub 2, plus 0.0829079267212388 times the allocation at Hub 3, minus 0.0762160399972494 times the allocation at Hub 4, plus y_2[1], equals 0.1065935090322246. For Hub 2, 1.78119670849211 times the allocation at Hub 0, minus 0.9909783216060062 times the allocation at Hub 1, minus 1.08396186916195 times the allocation at Hub 2, minus 0.2137547994124323 times the allocation at Hub 3, minus 0.2410135384227864 times the allocation at Hub 4, plus t_2[0], equals 0.5794902323601145.\n\nFor Hub 3, -0.0641439226811574 times the allocation at Hub 0, minus 0.0718053951291886 times the allocation at Hub 1, plus 0.0269862978161679 times the allocation at Hub 2, plus 0.1102601358034707 times the allocation at Hub 3, plus 7.27392e-05 times the allocation at Hub 4, plus y_3[0], equals 0.00315977947277087. For Hub 3, -0.0632288388926973 times the allocation at Hub 0, minus 0.1241779187569768 times the allocation at Hub 1, plus 0.0064629944919384 times the allocation at Hub 2, plus 0.0116896390416125 times the allocation at Hub 3, plus 0.079988047761199 times the allocation at Hub 4, plus y_3[1], equals 0.0925241950659326. For Hub 3, 0.4429906926189995 times the allocation at Hub 0, plus 0.0991542311544501 times the allocation at Hub 1, minus 0.3240726565893556 times the allocation at Hub 2, minus 0.6543525499518488 times the allocation at Hub 3, minus 0.318896820227852 times the allocation at Hub 4, plus t_3[0], equals 0.1889924405903281.\n\nFor Hub 4, 0.0341804938689715 times the allocation at Hub 0, minus 0.1200246209041026 times the allocation at Hub 1, plus 0.0477968354488662 times the allocation at Hub 2, plus 0.0486460651624679 times the allocation at Hub 3, plus 0.0259780092785045 times the allocation at Hub 4, plus y_4[0], equals 0.1858842417400162. For Hub 4, -0.0427025044864235 times the allocation at Hub 0, minus 0.1161557760668262 times the allocation at Hub 1, minus 0.1281191768228226 times the allocation at Hub 2, plus 0.1296447474115312 times the allocation at Hub 3, minus 0.16357870291776 times the allocation at Hub 4, plus y_4[1], equals 0.0601306829794548. For Hub 4, 0.2140065823499792 times the allocation at Hub 0, minus 0.2328142561302691 times the allocation at Hub 1, minus 0.848196376440762 times the allocation at Hub 2, minus 0.5073797164375169 times the allocation at Hub 3, minus 2.928182945709474 times the allocation at Hub 4, plus t_4[0], equals 1.310467204578853.\n\nTo ensure operational feasibility, each hub must satisfy a second-order cone constraint. For Hub 0, the sum of the squares of y_0[0] and y_0[1] must be less than or equal to the square of t_0[0]. Similarly, for Hub 1, the sum of the squares of y_1[0] and y_1[1] must be less than or equal to the square of t_1[0]. For Hub 2, the sum of the squares of y_2[0] and y_2[1] must be less than or equal to the square of t_2[0]. For Hub 3, the sum of the squares of y_3[0] and y_3[1] must be less than or equal to the square of t_3[0]. For Hub 4, the sum of the squares of y_4[0] and y_4[1] must be less than or equal to the square of t_4[0].\n\nAll variables, including resource allocations and auxiliary variables, are free to take any real value, allowing for flexible resource allocation to minimize costs while satisfying all operational constraints. The problem is a Second-Order Cone Programming (SOCP) problem, as it involves quadratic constraints represented by the second-order cone constraints. The equality constraints are linear, while the additional constraints (R3 to R17) link resource allocations to secondary operational metrics. The auxiliary variables (y_0[0], y_0[1], t_0[0], etc.) are part of the second-order cone constraints, and all variables (x[0] to x[4], y_0[0], y_0[1], y_1[0], y_1[1], etc., and t_0[0], t_1[0], t_2[0], etc.) are free variables.",
    "ground_truth": -0.18
  },
  {
    "question": "The problem involves minimizing the total cost calculated as 0.408544260832344 times the value of x[0] minus 1.177163209326489 times the value of x[1] minus 0.3033727028272864 times the value of x[2]. This minimization is subject to several constraints: the first linear constraint requires that 0.5462940531635887 times x[0] minus 1.241668902664911 times x[1] minus 0.5998249994903344 times x[2] equals 0.3835911096798181. The second linear constraint requires that negative 0.030455142845263 times x[0] minus 0.7427336810498593 times x[1] plus 0.3957667498639689 times x[2] equals negative 0.6803383944729795. Another constraint, R2, requires that negative 0.0677712816971205 times x[0] plus 0.170365390174673 times x[1] minus 0.00413868631847959 times x[2] plus y_0[0] equals 0.00802717043497164. Constraint R3 requires that 0.0215916329150542 times x[0] minus 0.0479685166742133 times x[1] plus 0.0677847235104595 times x[2] plus y_0[1] equals negative 0.1511858316417728. Constraint R4 requires that negative 0.219725429611857 times x[0] minus 1.453471058496226 times x[1] minus 0.5544082541070903 times x[2] plus t_0[0] equals 1.182764044680309. Additionally, the square of t_0[0] must be less than or equal to the sum of the squares of y_0[0] and y_0[1], represented by the constraint negative t_0[0] squared plus y_0[0] squared plus y_0[1] squared is less than or equal to zero. All variables x[0], x[1], x[2], y_0[0], y_0[1], and t_0[0] are free to take any real value. The problem is a Second-Order Cone Programming (SOCP) problem due to the presence of the quadratic constraint.",
    "answer": 0.03,
    "ori": "13_optmath_bench",
    "index": 158,
    "description": "The problem involves minimizing the total cost calculated as 0.408544260832344 times the value of x[0] minus 1.177163209326489 times the value of x[1] minus 0.3033727028272864 times the value of x[2]. This minimization is subject to several constraints: the first linear constraint requires that 0.5462940531635887 times x[0] minus 1.241668902664911 times x[1] minus 0.5998249994903344 times x[2] equals 0.3835911096798181. The second linear constraint requires that negative 0.030455142845263 times x[0] minus 0.7427336810498593 times x[1] plus 0.3957667498639689 times x[2] equals negative 0.6803383944729795. Another constraint, R2, requires that negative 0.0677712816971205 times x[0] plus 0.170365390174673 times x[1] minus 0.00413868631847959 times x[2] plus y_0[0] equals 0.00802717043497164. Constraint R3 requires that 0.0215916329150542 times x[0] minus 0.0479685166742133 times x[1] plus 0.0677847235104595 times x[2] plus y_0[1] equals negative 0.1511858316417728. Constraint R4 requires that negative 0.219725429611857 times x[0] minus 1.453471058496226 times x[1] minus 0.5544082541070903 times x[2] plus t_0[0] equals 1.182764044680309. Additionally, the square of t_0[0] must be less than or equal to the sum of the squares of y_0[0] and y_0[1], represented by the constraint negative t_0[0] squared plus y_0[0] squared plus y_0[1] squared is less than or equal to zero. All variables x[0], x[1], x[2], y_0[0], y_0[1], and t_0[0] are free to take any real value. The problem is a Second-Order Cone Programming (SOCP) problem due to the presence of the quadratic constraint.",
    "ground_truth": 0.03
  },
  {
    "question": "The problem involves minimizing a linear objective function defined as 0.7117963359087778 times the value of variable x[0], plus 1.495363634959802 times the value of variable x[1], plus 0.0634582749300659 times the value of variable x[2]. The variables x[0], x[1], and x[2] are free to take any real value. The optimization is subject to two linear equality constraints. The first constraint requires that -0.0258717563775294 times x[0], plus 0.4400877796975226 times x[1], plus 1.085219312984192 times x[2], equals -0.399404323103251. The second constraint requires that -1.063740820798877 times x[0], plus 0.0262817424591634 times x[1], plus 0.3002430009821057 times x[2], equals -0.4003348752264555.\n\nAdditionally, the problem includes two second-order cone constraints. The first cone constraint involves variables y_0[0], y_0[1], y_0[2], and t_0[0], and requires that the square root of the sum of the squares of y_0[0], y_0[1], and y_0[2] is less than or equal to t_0[0]. This constraint is associated with the following linear relationships: 0.0709198094546279 times x[0], minus 0.0210367192622051 times x[1], plus 0.0895063725378235 times x[2], plus y_0[0], equals -0.1178974392901265; 0.0489330070748356 times x[0], minus 0.0910855567896424 times x[1], minus 0.0299901411888931 times x[2], plus y_0[1], equals 0.1528438418108943; -0.0102367576685978 times x[0], minus 0.0809953969784582 times x[1], minus 0.0326792481068488 times x[2], plus y_0[2], equals 0.1304009358682119; and -0.7205007161713685 times x[0], plus 0.8402710079185606 times x[1], plus 1.174037649876418 times x[2], plus t_0[0], equals 1.142365596215822.\n\nThe second cone constraint involves variables y_1[0], y_1[1], y_1[2], and t_1[0], and requires that the square root of the sum of the squares of y_1[0], y_1[1], and y_1[2] is less than or equal to t_1[0]. This constraint is associated with the following linear relationships: -0.1053047361476771 times x[0], minus 0.1098916681441547 times x[1], plus 0.0725443868339502 times x[2], plus y_1[0], equals -0.0464104086014158; -0.1846597649031371 times x[0], minus 0.0474185137216481 times x[1], minus 0.0085470813934405 times x[2], plus y_1[1], equals -0.0958578667235037; -0.1177843202999298 times x[0], minus 0.0387875095823661 times x[1], minus 0.0741126306954255 times x[2], plus y_1[2], equals -0.013119694402389; and 1.090558517373246 times x[0], minus 0.0977574216352732 times x[1], plus 0.0671448858489764 times x[2], plus t_1[0], equals 0.6764507139985713.\n\nAll variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], t_0[0], and t_1[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the specified constraints.",
    "answer": -1.37,
    "ori": "13_optmath_bench",
    "index": 159,
    "description": "The problem involves minimizing a linear objective function defined as 0.7117963359087778 times the value of variable x[0], plus 1.495363634959802 times the value of variable x[1], plus 0.0634582749300659 times the value of variable x[2]. The variables x[0], x[1], and x[2] are free to take any real value. The optimization is subject to two linear equality constraints. The first constraint requires that -0.0258717563775294 times x[0], plus 0.4400877796975226 times x[1], plus 1.085219312984192 times x[2], equals -0.399404323103251. The second constraint requires that -1.063740820798877 times x[0], plus 0.0262817424591634 times x[1], plus 0.3002430009821057 times x[2], equals -0.4003348752264555.\n\nAdditionally, the problem includes two second-order cone constraints. The first cone constraint involves variables y_0[0], y_0[1], y_0[2], and t_0[0], and requires that the square root of the sum of the squares of y_0[0], y_0[1], and y_0[2] is less than or equal to t_0[0]. This constraint is associated with the following linear relationships: 0.0709198094546279 times x[0], minus 0.0210367192622051 times x[1], plus 0.0895063725378235 times x[2], plus y_0[0], equals -0.1178974392901265; 0.0489330070748356 times x[0], minus 0.0910855567896424 times x[1], minus 0.0299901411888931 times x[2], plus y_0[1], equals 0.1528438418108943; -0.0102367576685978 times x[0], minus 0.0809953969784582 times x[1], minus 0.0326792481068488 times x[2], plus y_0[2], equals 0.1304009358682119; and -0.7205007161713685 times x[0], plus 0.8402710079185606 times x[1], plus 1.174037649876418 times x[2], plus t_0[0], equals 1.142365596215822.\n\nThe second cone constraint involves variables y_1[0], y_1[1], y_1[2], and t_1[0], and requires that the square root of the sum of the squares of y_1[0], y_1[1], and y_1[2] is less than or equal to t_1[0]. This constraint is associated with the following linear relationships: -0.1053047361476771 times x[0], minus 0.1098916681441547 times x[1], plus 0.0725443868339502 times x[2], plus y_1[0], equals -0.0464104086014158; -0.1846597649031371 times x[0], minus 0.0474185137216481 times x[1], minus 0.0085470813934405 times x[2], plus y_1[1], equals -0.0958578667235037; -0.1177843202999298 times x[0], minus 0.0387875095823661 times x[1], minus 0.0741126306954255 times x[2], plus y_1[2], equals -0.013119694402389; and 1.090558517373246 times x[0], minus 0.0977574216352732 times x[1], plus 0.0671448858489764 times x[2], plus t_1[0], equals 0.6764507139985713.\n\nAll variables, including x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], t_0[0], and t_1[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the specified constraints.",
    "ground_truth": -1.37
  },
  {
    "question": "Minimize the linear objective function involving five variables with coefficients: -1.27457045729125 for x[0], 0.3829428410019269 for x[1], 0.8634766321930054 for x[2], -0.8495951803940098 for x[3], and 0.7818351274236842 for x[4]. \n\nThe solution must satisfy five linear equality constraints: \n1. A weighted combination of x[0] (0.3779915609931544), x[1] (-0.2098956852913138), x[2] (-0.2045186307690221), x[3] (1.70241687084974), and x[4] (-0.0830495385416335) must equal -0.8872046273965938. \n2. A weighted combination of x[0] (-0.1980432307652125), x[1] (0.5734762682253645), x[2] (0.8168321608033806), x[3] (0.4534299593541723), and x[4] (-1.551957669500629) must equal -1.682642259460053. \n3. A weighted combination of x[0] (2.09940339313846), x[1] (-0.5382869592818297), x[2] (-0.4711126728138521), x[3] (2.41705884114686), and x[4] (0.3807643962655075) must equal -1.178472853778845. \n4. A weighted combination of x[0] (-0.0319043926204142), x[1] (1.274635913461541), x[2] (0.2494503935760785), x[3] (-1.178243710464141), and x[4] (-0.658162908023939) must equal 1.097123236331887. \n5. A weighted combination of x[0] (-2.38990451126146), x[1] (-0.4143841871813654), x[2] (-0.1278674033858785), x[3] (-0.0913945158661918), and x[4] (-0.6463312417465074) must equal 0.1278954511759081. \n\nAdditionally, four auxiliary variables y_0[0], y_0[1], y_0[2], and t_0[0] are introduced as part of a second-order cone constraint. The solution must satisfy four linear equality constraints involving these variables: \n1. A weighted combination of x[0] (0.0811031804701355), x[1] (0.0614084577317061), x[2] (-0.0221560152059943), x[3] (0.2071308897950201), and x[4] (0.1014268263641295), plus y_0[0], must equal 0.0612422178599395. \n2. A weighted combination of x[0] (-0.0913274075374076), x[1] (0.0084232463574275), x[2] (0.0231115788245813), x[3] (-0.0528298653734004), and x[4] (-0.1547249726938889), plus y_0[1], must equal 0.0531856861000841. \n3. A weighted combination of x[0] (0.0682088948475448), x[1] (-0.1651917752267487), x[2] (-0.0413346954944568), x[3] (-0.0532349804461065), and x[4] (0.0783732630578606), plus y_0[2], must equal -0.0703701003068877. \n4. A weighted combination of x[0] (0.7179187345461103), x[1] (-0.5038326161213537), x[2] (0.9210968531714094), x[3] (-0.4759925591110667), and x[4] (-1.776260360500366), plus t_0[0], must equal 0.6058017967567707. \n\nThe solution must also satisfy a second-order cone constraint: the square of t_0[0] must be less than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2], expressed as \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 \\leq 0\\). \n\nAll variables, including x[0] to x[4], y_0[0], y_0[1], y_0[2], and t_0[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the equality and cone constraints.",
    "answer": -0.51,
    "ori": "13_optmath_bench",
    "index": 160,
    "description": "Minimize the linear objective function involving five variables with coefficients: -1.27457045729125 for x[0], 0.3829428410019269 for x[1], 0.8634766321930054 for x[2], -0.8495951803940098 for x[3], and 0.7818351274236842 for x[4]. \n\nThe solution must satisfy five linear equality constraints: \n1. A weighted combination of x[0] (0.3779915609931544), x[1] (-0.2098956852913138), x[2] (-0.2045186307690221), x[3] (1.70241687084974), and x[4] (-0.0830495385416335) must equal -0.8872046273965938. \n2. A weighted combination of x[0] (-0.1980432307652125), x[1] (0.5734762682253645), x[2] (0.8168321608033806), x[3] (0.4534299593541723), and x[4] (-1.551957669500629) must equal -1.682642259460053. \n3. A weighted combination of x[0] (2.09940339313846), x[1] (-0.5382869592818297), x[2] (-0.4711126728138521), x[3] (2.41705884114686), and x[4] (0.3807643962655075) must equal -1.178472853778845. \n4. A weighted combination of x[0] (-0.0319043926204142), x[1] (1.274635913461541), x[2] (0.2494503935760785), x[3] (-1.178243710464141), and x[4] (-0.658162908023939) must equal 1.097123236331887. \n5. A weighted combination of x[0] (-2.38990451126146), x[1] (-0.4143841871813654), x[2] (-0.1278674033858785), x[3] (-0.0913945158661918), and x[4] (-0.6463312417465074) must equal 0.1278954511759081. \n\nAdditionally, four auxiliary variables y_0[0], y_0[1], y_0[2], and t_0[0] are introduced as part of a second-order cone constraint. The solution must satisfy four linear equality constraints involving these variables: \n1. A weighted combination of x[0] (0.0811031804701355), x[1] (0.0614084577317061), x[2] (-0.0221560152059943), x[3] (0.2071308897950201), and x[4] (0.1014268263641295), plus y_0[0], must equal 0.0612422178599395. \n2. A weighted combination of x[0] (-0.0913274075374076), x[1] (0.0084232463574275), x[2] (0.0231115788245813), x[3] (-0.0528298653734004), and x[4] (-0.1547249726938889), plus y_0[1], must equal 0.0531856861000841. \n3. A weighted combination of x[0] (0.0682088948475448), x[1] (-0.1651917752267487), x[2] (-0.0413346954944568), x[3] (-0.0532349804461065), and x[4] (0.0783732630578606), plus y_0[2], must equal -0.0703701003068877. \n4. A weighted combination of x[0] (0.7179187345461103), x[1] (-0.5038326161213537), x[2] (0.9210968531714094), x[3] (-0.4759925591110667), and x[4] (-1.776260360500366), plus t_0[0], must equal 0.6058017967567707. \n\nThe solution must also satisfy a second-order cone constraint: the square of t_0[0] must be less than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2], expressed as \\(-t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 \\leq 0\\). \n\nAll variables, including x[0] to x[4], y_0[0], y_0[1], y_0[2], and t_0[0], are free to take any real value. The goal is to determine the values of these variables that minimize the objective function while satisfying all the equality and cone constraints.",
    "ground_truth": -0.51
  },
  {
    "question": "The goal is to minimize the total cost, which is calculated as 0.786272624432491 times x[0] plus 0.8625634188757304 times x[1] minus 1.12398756204435 times x[2]. The decision variables include x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], y_3[0], y_3[1], y_3[2], t_0[0], t_1[0], t_2[0], and t_3[0]. All variables are free to take any real value.\n\nThe problem is subject to linear equality constraints. The first constraint requires that 1.265089926033166 times x[0] plus 0.8265511590295959 times x[1] plus 0.6425143729335491 times x[2] equals -1.340261867227508. The second constraint requires that -1.038046026005065 times x[0] minus 0.978681730406505 times x[1] minus 0.3158917890099441 times x[2] equals 0.9895473898354382. The third constraint requires that 0.3708381346357463 times x[0] plus 0.2148963219535531 times x[1] minus 1.83990668416334 times x[2] equals 3.062677436779988. The fourth constraint requires that -1.872418427024533 times x[0] minus 1.159027962632082 times x[1] plus 0.3313042271069708 times x[2] equals -0.2396557035046597.\n\nAdditional constraints ensure that specific combinations of the decision variables and auxiliary variables satisfy certain conditions. For the first set of auxiliary variables, 0.0845901604928491 times x[0] plus 0.00653062634511069 times x[1] minus 0.0396187361282293 times x[2] plus y_0[0] equals 0.1028911134186171, -0.1655645187396123 times x[0] minus 0.00481490476108966 times x[1] plus 0.1091868022965404 times x[2] plus y_0[1] equals -0.0791773986380616, and 0.0657601002643706 times x[0] plus 0.0770866340133718 times x[1] plus 0.0717168532804696 times x[2] plus y_0[2] equals 0.1545300907589844. For the second set of auxiliary variables, 0.3298234267560927 times x[0] plus 1.022831383811937 times x[1] minus 0.00493650012051474 times x[2] plus t_0[0] equals 0.9587050025563594, 0.8976617894842607 times x[0] minus 1.960565868013685 times x[1] plus 0.2084251295126738 times x[2] plus y_1[0] equals -0.1849711881061493, -0.7094023471201548 times x[0] plus 0.6353877939866961 times x[1] minus 0.0876866180562744 times x[2] plus y_1[1] equals -0.4919818599100178, and 2.698160782648244 times x[0] minus 0.4574765835824846 times x[1] plus 0.6985665960561629 times x[2] plus y_1[2] equals 0.2614076505075524.\n\nFor the third set of auxiliary variables, -0.7226507325429118 times x[0] plus 0.0568702304829931 times x[1] plus 1.471507498629236 times x[2] plus t_1[0] equals 0.320143628846921, 0.0533180689091473 times x[0] minus 0.1728737890908431 times x[1] plus 0.0319070165322495 times x[2] plus y_2[0] equals 0.0152872162677227, -0.0512090278756547 times x[0] minus 0.0557654636443004 times x[1] minus 0.2980053053415462 times x[2] plus y_2[1] equals -0.0964105256925016, and 0.176881384588485 times x[0] plus 0.0368327469045029 times x[1] plus 0.0368571461194376 times x[2] plus y_2[2] equals 0.0672644472047825. For the fourth set of auxiliary variables, 0.7106618613482838 times x[0] minus 0.7138000011448565 times x[1] plus 0.1976996075797842 times x[2] plus t_2[0] equals 1.260005801822901, 0.0443424626310529 times x[0] plus 0.1363607191306093 times x[1] minus 0.0668054006192922 times x[2] plus y_3[0] equals 0.0932454917759326, 0.0536583684212656 times x[0] minus 0.0491976587190737 times x[1] plus 0.06269906389831 times x[2] plus y_3[1] equals -0.00327479473248982, and -0.1482437619827962 times x[0] minus 0.1780634692898283 times x[1] plus 0.1091477105610945 times x[2] plus y_3[2] equals 0.0218802336021696.\n\nThe problem also includes Second-Order Cone Constraints. The first Second-Order Cone Constraint ensures that the negative square of t_0[0] plus the squares of y_0[0], y_0[1], and y_0[2] is less than or equal to zero. The second Second-Order Cone Constraint ensures that the negative square of t_1[0] plus the squares of y_1[0], y_1[1], and y_1[2] is less than or equal to zero. The third Second-Order Cone Constraint ensures that the negative square of t_2[0] plus the squares of y_2[0], y_2[1], and y_2[2] is less than or equal to zero. The fourth Second-Order Cone Constraint ensures that the negative square of t_3[0] plus the squares of y_3[0], y_3[1], and y_3[2] is less than or equal to zero. These constraints are critical for ensuring the problem's feasibility and optimality.",
    "answer": 1.46,
    "ori": "13_optmath_bench",
    "index": 161,
    "description": "The goal is to minimize the total cost, which is calculated as 0.786272624432491 times x[0] plus 0.8625634188757304 times x[1] minus 1.12398756204435 times x[2]. The decision variables include x[0], x[1], x[2], y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], y_3[0], y_3[1], y_3[2], t_0[0], t_1[0], t_2[0], and t_3[0]. All variables are free to take any real value.\n\nThe problem is subject to linear equality constraints. The first constraint requires that 1.265089926033166 times x[0] plus 0.8265511590295959 times x[1] plus 0.6425143729335491 times x[2] equals -1.340261867227508. The second constraint requires that -1.038046026005065 times x[0] minus 0.978681730406505 times x[1] minus 0.3158917890099441 times x[2] equals 0.9895473898354382. The third constraint requires that 0.3708381346357463 times x[0] plus 0.2148963219535531 times x[1] minus 1.83990668416334 times x[2] equals 3.062677436779988. The fourth constraint requires that -1.872418427024533 times x[0] minus 1.159027962632082 times x[1] plus 0.3313042271069708 times x[2] equals -0.2396557035046597.\n\nAdditional constraints ensure that specific combinations of the decision variables and auxiliary variables satisfy certain conditions. For the first set of auxiliary variables, 0.0845901604928491 times x[0] plus 0.00653062634511069 times x[1] minus 0.0396187361282293 times x[2] plus y_0[0] equals 0.1028911134186171, -0.1655645187396123 times x[0] minus 0.00481490476108966 times x[1] plus 0.1091868022965404 times x[2] plus y_0[1] equals -0.0791773986380616, and 0.0657601002643706 times x[0] plus 0.0770866340133718 times x[1] plus 0.0717168532804696 times x[2] plus y_0[2] equals 0.1545300907589844. For the second set of auxiliary variables, 0.3298234267560927 times x[0] plus 1.022831383811937 times x[1] minus 0.00493650012051474 times x[2] plus t_0[0] equals 0.9587050025563594, 0.8976617894842607 times x[0] minus 1.960565868013685 times x[1] plus 0.2084251295126738 times x[2] plus y_1[0] equals -0.1849711881061493, -0.7094023471201548 times x[0] plus 0.6353877939866961 times x[1] minus 0.0876866180562744 times x[2] plus y_1[1] equals -0.4919818599100178, and 2.698160782648244 times x[0] minus 0.4574765835824846 times x[1] plus 0.6985665960561629 times x[2] plus y_1[2] equals 0.2614076505075524.\n\nFor the third set of auxiliary variables, -0.7226507325429118 times x[0] plus 0.0568702304829931 times x[1] plus 1.471507498629236 times x[2] plus t_1[0] equals 0.320143628846921, 0.0533180689091473 times x[0] minus 0.1728737890908431 times x[1] plus 0.0319070165322495 times x[2] plus y_2[0] equals 0.0152872162677227, -0.0512090278756547 times x[0] minus 0.0557654636443004 times x[1] minus 0.2980053053415462 times x[2] plus y_2[1] equals -0.0964105256925016, and 0.176881384588485 times x[0] plus 0.0368327469045029 times x[1] plus 0.0368571461194376 times x[2] plus y_2[2] equals 0.0672644472047825. For the fourth set of auxiliary variables, 0.7106618613482838 times x[0] minus 0.7138000011448565 times x[1] plus 0.1976996075797842 times x[2] plus t_2[0] equals 1.260005801822901, 0.0443424626310529 times x[0] plus 0.1363607191306093 times x[1] minus 0.0668054006192922 times x[2] plus y_3[0] equals 0.0932454917759326, 0.0536583684212656 times x[0] minus 0.0491976587190737 times x[1] plus 0.06269906389831 times x[2] plus y_3[1] equals -0.00327479473248982, and -0.1482437619827962 times x[0] minus 0.1780634692898283 times x[1] plus 0.1091477105610945 times x[2] plus y_3[2] equals 0.0218802336021696.\n\nThe problem also includes Second-Order Cone Constraints. The first Second-Order Cone Constraint ensures that the negative square of t_0[0] plus the squares of y_0[0], y_0[1], and y_0[2] is less than or equal to zero. The second Second-Order Cone Constraint ensures that the negative square of t_1[0] plus the squares of y_1[0], y_1[1], and y_1[2] is less than or equal to zero. The third Second-Order Cone Constraint ensures that the negative square of t_2[0] plus the squares of y_2[0], y_2[1], and y_2[2] is less than or equal to zero. The fourth Second-Order Cone Constraint ensures that the negative square of t_3[0] plus the squares of y_3[0], y_3[1], and y_3[2] is less than or equal to zero. These constraints are critical for ensuring the problem's feasibility and optimality.",
    "ground_truth": 1.46
  },
  {
    "question": "Minimize the total cost of allocating six resources, where the cost coefficients for each resource are -0.2230299351960377, 0.2260048024316069, -0.1766835611048999, 0.5573216224422132, -1.208376221550068, and 0.5847966392616851 units per unit allocated, respectively. The allocation must satisfy sixteen linear equality constraints and three second-order cone constraints. The first five linear equality constraints are as follows: the first constraint requires that 0.0864123382415046 times the first resource minus 0.2999520944563616 times the second resource minus 0.4373153026838008 times the third resource plus 0.2236844833244651 times the fourth resource minus 0.1726687049023944 times the fifth resource plus 1.131231237141819 times the sixth resource equals -0.2555719673916053. The second constraint requires that 0.6475024542623146 times the first resource minus 0.2411773085202067 times the second resource minus 1.152365276965448 times the third resource plus 0.0681294271686064 times the fourth resource minus 0.460006367650037 times the fifth resource minus 0.8626734903353966 times the sixth resource equals -1.611099466848817. The third constraint requires that -0.1892421564042141 times the first resource plus 0.4442286186625635 times the second resource plus 0.0351084932857791 times the third resource minus 1.65945657674057 times the fourth resource plus 1.813083837788898 times the fifth resource minus 0.1731007007836295 times the sixth resource equals -2.302900632383548. The fourth constraint requires that 0.6105836251433618 times the first resource plus 1.224758698265837 times the second resource minus 0.6569021430924753 times the third resource minus 1.723125872166611 times the fourth resource plus 0.6658852466385591 times the fifth resource plus 0.8417973521416725 times the sixth resource equals -3.826954722671106. The fifth constraint requires that -0.1167867054929794 times the first resource plus 0.1666505226611245 times the second resource minus 0.0580663537752885 times the third resource minus 0.1929108225442672 times the fourth resource minus 1.118313643238442 times the fifth resource plus 1.582899027912414 times the sixth resource equals 0.5701541914439772.\n\nThe remaining eleven linear equality constraints involve auxiliary variables introduced for the second-order cone constraints. The sixth constraint requires that -0.0231503875559003 times the first resource plus 0.00454721771555977 times the second resource minus 0.0401563754472746 times the third resource plus 0.0319081283767895 times the fourth resource minus 0.0445254387459282 times the fifth resource plus 0.0666388070919248 times the sixth resource plus y_0[0] equals 0.1220045375876136. The seventh constraint requires that -0.0850790157464754 times the first resource minus 0.0476072870612039 times the second resource minus 0.068828152035275 times the third resource minus 0.0919526883283748 times the fourth resource minus 0.0484614346821255 times the fifth resource minus 0.157778975935517 times the sixth resource plus y_0[1] equals 0.00586701808623117. The eighth constraint requires that 0.0578622514811724 times the first resource minus 0.1018459374054135 times the second resource plus 0.028959008397348 times the third resource plus 0.0124914167995535 times the fourth resource minus 0.1217493644708651 times the fifth resource minus 0.0455371326070688 times the sixth resource plus y_0[2] equals 0.00103506581258387. The ninth constraint requires that 0.5438484424289765 times the first resource minus 0.4058548451270487 times the second resource plus 0.00464438168201298 times the third resource plus 0.6829984219379786 times the fourth resource minus 0.813089431925804 times the fifth resource plus 0.1465879382567549 times the sixth resource plus t_0[0] equals 0.8921404899384406.\n\nThe tenth constraint requires that -0.1565490941785506 times the first resource minus 0.0151974010871207 times the second resource plus 0.0330083659733866 times the third resource plus 0.0409835559769911 times the fourth resource minus 0.025926735354538 times the fifth resource minus 0.0791575923837095 times the sixth resource plus y_1[0] equals 0.0252004385932512. The eleventh constraint requires that -0.00679732652950372 times the first resource minus 0.0159930899677971 times the second resource plus 0.00044788212331377231 times the third resource minus 0.00870755949376334 times the fourth resource plus 0.0106774891090615 times the fifth resource minus 0.0819505944729122 times the sixth resource plus y_1[1] equals -0.2461745595888191. The twelfth constraint requires that -0.0767410168100431 times the first resource minus 0.1162981298613443 times the second resource plus 0.2516807060221921 times the third resource minus 0.00442617885794681 times the fourth resource minus 0.0897268862621352 times the fifth resource minus 0.1001649216336424 times the sixth resource plus y_1[2] equals 0.0676538189988438. The thirteenth constraint requires that 2.12708121691458 times the first resource plus 0.5354675680200557 times the second resource plus 0.1244147628194144 times the third resource plus 1.32540724304661 times the fourth resource minus 0.6888780286074161 times the fifth resource plus 1.1055685780941 times the sixth resource plus t_1[0] equals 0.8216483573755342.\n\nThe fourteenth constraint requires that 0.1045779404782078 times the first resource plus 0.117211531954123 times the second resource minus 0.093303260093519 times the third resource plus 0.114920382796502 times the fourth resource plus 0.0892956784939136 times the fifth resource minus 0.1270063126632456 times the sixth resource plus y_2[0] equals 0.1487112654209727. The fifteenth constraint requires that 0.1031929746661822 times the first resource plus 0.0366834994452099 times the second resource minus 0.0811775022010661 times the third resource minus 0.0941975746436261 times the fourth resource plus 0.034402649559877 times the fifth resource minus 0.2382614709448476 times the sixth resource plus y_2[1] equals -0.00259845523628418. The sixteenth constraint requires that -0.0649606742324766 times the first resource plus 0.1500400272048616 times the second resource plus 0.0157455125935616 times the third resource minus 0.0173529909921789 times the fourth resource minus 0.045730709242314 times the fifth resource minus 0.068092234748515 times the sixth resource plus y_2[2] equals -0.1982729375753503.\n\nThe three second-order cone constraints are as follows: the first cone constraint requires that the sum of the squares of y_0[0], y_0[1], and y_0[2] is at most the square of t_0[0]. The second cone constraint requires that the sum of the squares of y_1[0], y_1[1], and y_1[2] is at most the square of t_1[0]. The third cone constraint requires that the sum of the squares of y_2[0], y_2[1], and y_2[2] is at most the square of t_2[0]. All decision variables, including the resource allocations x[0], x[1], x[2], x[3], x[4], and x[5], and the auxiliary variables y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0], are free to take any real value. The goal is to determine the optimal allocation of the six resources that minimizes the total cost while satisfying all linear equality and second-order cone constraints.",
    "answer": 0.99,
    "ori": "13_optmath_bench",
    "index": 162,
    "description": "Minimize the total cost of allocating six resources, where the cost coefficients for each resource are -0.2230299351960377, 0.2260048024316069, -0.1766835611048999, 0.5573216224422132, -1.208376221550068, and 0.5847966392616851 units per unit allocated, respectively. The allocation must satisfy sixteen linear equality constraints and three second-order cone constraints. The first five linear equality constraints are as follows: the first constraint requires that 0.0864123382415046 times the first resource minus 0.2999520944563616 times the second resource minus 0.4373153026838008 times the third resource plus 0.2236844833244651 times the fourth resource minus 0.1726687049023944 times the fifth resource plus 1.131231237141819 times the sixth resource equals -0.2555719673916053. The second constraint requires that 0.6475024542623146 times the first resource minus 0.2411773085202067 times the second resource minus 1.152365276965448 times the third resource plus 0.0681294271686064 times the fourth resource minus 0.460006367650037 times the fifth resource minus 0.8626734903353966 times the sixth resource equals -1.611099466848817. The third constraint requires that -0.1892421564042141 times the first resource plus 0.4442286186625635 times the second resource plus 0.0351084932857791 times the third resource minus 1.65945657674057 times the fourth resource plus 1.813083837788898 times the fifth resource minus 0.1731007007836295 times the sixth resource equals -2.302900632383548. The fourth constraint requires that 0.6105836251433618 times the first resource plus 1.224758698265837 times the second resource minus 0.6569021430924753 times the third resource minus 1.723125872166611 times the fourth resource plus 0.6658852466385591 times the fifth resource plus 0.8417973521416725 times the sixth resource equals -3.826954722671106. The fifth constraint requires that -0.1167867054929794 times the first resource plus 0.1666505226611245 times the second resource minus 0.0580663537752885 times the third resource minus 0.1929108225442672 times the fourth resource minus 1.118313643238442 times the fifth resource plus 1.582899027912414 times the sixth resource equals 0.5701541914439772.\n\nThe remaining eleven linear equality constraints involve auxiliary variables introduced for the second-order cone constraints. The sixth constraint requires that -0.0231503875559003 times the first resource plus 0.00454721771555977 times the second resource minus 0.0401563754472746 times the third resource plus 0.0319081283767895 times the fourth resource minus 0.0445254387459282 times the fifth resource plus 0.0666388070919248 times the sixth resource plus y_0[0] equals 0.1220045375876136. The seventh constraint requires that -0.0850790157464754 times the first resource minus 0.0476072870612039 times the second resource minus 0.068828152035275 times the third resource minus 0.0919526883283748 times the fourth resource minus 0.0484614346821255 times the fifth resource minus 0.157778975935517 times the sixth resource plus y_0[1] equals 0.00586701808623117. The eighth constraint requires that 0.0578622514811724 times the first resource minus 0.1018459374054135 times the second resource plus 0.028959008397348 times the third resource plus 0.0124914167995535 times the fourth resource minus 0.1217493644708651 times the fifth resource minus 0.0455371326070688 times the sixth resource plus y_0[2] equals 0.00103506581258387. The ninth constraint requires that 0.5438484424289765 times the first resource minus 0.4058548451270487 times the second resource plus 0.00464438168201298 times the third resource plus 0.6829984219379786 times the fourth resource minus 0.813089431925804 times the fifth resource plus 0.1465879382567549 times the sixth resource plus t_0[0] equals 0.8921404899384406.\n\nThe tenth constraint requires that -0.1565490941785506 times the first resource minus 0.0151974010871207 times the second resource plus 0.0330083659733866 times the third resource plus 0.0409835559769911 times the fourth resource minus 0.025926735354538 times the fifth resource minus 0.0791575923837095 times the sixth resource plus y_1[0] equals 0.0252004385932512. The eleventh constraint requires that -0.00679732652950372 times the first resource minus 0.0159930899677971 times the second resource plus 0.00044788212331377231 times the third resource minus 0.00870755949376334 times the fourth resource plus 0.0106774891090615 times the fifth resource minus 0.0819505944729122 times the sixth resource plus y_1[1] equals -0.2461745595888191. The twelfth constraint requires that -0.0767410168100431 times the first resource minus 0.1162981298613443 times the second resource plus 0.2516807060221921 times the third resource minus 0.00442617885794681 times the fourth resource minus 0.0897268862621352 times the fifth resource minus 0.1001649216336424 times the sixth resource plus y_1[2] equals 0.0676538189988438. The thirteenth constraint requires that 2.12708121691458 times the first resource plus 0.5354675680200557 times the second resource plus 0.1244147628194144 times the third resource plus 1.32540724304661 times the fourth resource minus 0.6888780286074161 times the fifth resource plus 1.1055685780941 times the sixth resource plus t_1[0] equals 0.8216483573755342.\n\nThe fourteenth constraint requires that 0.1045779404782078 times the first resource plus 0.117211531954123 times the second resource minus 0.093303260093519 times the third resource plus 0.114920382796502 times the fourth resource plus 0.0892956784939136 times the fifth resource minus 0.1270063126632456 times the sixth resource plus y_2[0] equals 0.1487112654209727. The fifteenth constraint requires that 0.1031929746661822 times the first resource plus 0.0366834994452099 times the second resource minus 0.0811775022010661 times the third resource minus 0.0941975746436261 times the fourth resource plus 0.034402649559877 times the fifth resource minus 0.2382614709448476 times the sixth resource plus y_2[1] equals -0.00259845523628418. The sixteenth constraint requires that -0.0649606742324766 times the first resource plus 0.1500400272048616 times the second resource plus 0.0157455125935616 times the third resource minus 0.0173529909921789 times the fourth resource minus 0.045730709242314 times the fifth resource minus 0.068092234748515 times the sixth resource plus y_2[2] equals -0.1982729375753503.\n\nThe three second-order cone constraints are as follows: the first cone constraint requires that the sum of the squares of y_0[0], y_0[1], and y_0[2] is at most the square of t_0[0]. The second cone constraint requires that the sum of the squares of y_1[0], y_1[1], and y_1[2] is at most the square of t_1[0]. The third cone constraint requires that the sum of the squares of y_2[0], y_2[1], and y_2[2] is at most the square of t_2[0]. All decision variables, including the resource allocations x[0], x[1], x[2], x[3], x[4], and x[5], and the auxiliary variables y_0[0], y_0[1], y_0[2], y_1[0], y_1[1], y_1[2], y_2[0], y_2[1], y_2[2], t_0[0], t_1[0], and t_2[0], are free to take any real value. The goal is to determine the optimal allocation of the six resources that minimizes the total cost while satisfying all linear equality and second-order cone constraints.",
    "ground_truth": 0.99
  },
  {
    "question": "The optimization problem involves minimizing a linear objective function with coefficients 1.878721051112547 for variable x[0], -1.28487812168959 for x[1], and 0.4011175494566619 for x[2]. The problem is subject to five linear equality constraints: the first requires -0.1975342265737635 times x[0], -0.2719873754935637 times x[1], and -1.783486559633287 times x[2] to sum to 0.7278205554841768; the second requires -1.768263279220658 times x[0], 0.0736070884409486 times x[1], and -0.0509245482723127 times x[2] to sum to -2.868156724043526; the third requires 0.7748053077719607 times x[0], 3.021004813587345 times x[1], and 0.1666219482636987 times x[2] to sum to 2.766284453816483; the fourth requires 0.5458915584128072 times x[0], -1.22059114128179 times x[1], and 1.494593953041657 times x[2] to sum to -0.7394828371831723; and the fifth requires 2.433843249484103 times x[0], 0.841951398178463 times x[1], and 0.282600820817885 times x[2] to sum to 4.301152000602892. Additionally, there are twelve auxiliary constraints involving variables y_0[0], y_0[1], y_1[0], y_1[1], y_2[0], y_2[1], y_3[0], y_3[1], t_0[0], t_1[0], t_2[0], and t_3[0], which are all free to vary. These constraints include: 0.091171079971759 times x[0], 0.0086023 times x[1], 0.0626180219067843 times x[2], and y_0[0] summing to 0.0142231362041137; 8.9989367704573157e-04 times x[0], 0.0708190370286829 times x[1], -0.1447953767846306 times x[2], and y_0[1] summing to 0.0212301017034705; -0.8573356126193631 times x[0], 0.4752467573146003 times x[1], 0.4816251155416254 times x[2], and t_0[0] summing to 0.4620815487077579; 0.1204662490077911 times x[0], -0.010719970766377 times x[1], 0.0320226968522765 times x[2], and y_1[0] summing to 0.0954368100893973; -0.0364566909694576 times x[0], -0.0272692243126929 times x[1], -0.0454010664159346 times x[2], and y_1[1] summing to -0.1175842378552672; -0.1011799433173105 times x[0], -1.207915192355112 times x[1], 0.4912270735806125 times x[2], and t_1[0] summing to 0.6938004510085989; -0.00734887111481677 times x[0], -0.00717377976753872 times x[1], -1.672448115208352 times x[2], and y_2[0] summing to -0.1718293002638799; 0.4244121952583523 times x[0], -1.705679041306142 times x[1], 0.7925934720092012 times x[2], and y_2[1] summing to 1.440028055824932; -0.7883828402480292 times x[0], -0.5798703112590434 times x[1], 0.7119997733584963 times x[2], and t_2[0] summing to 0.4478948452160413; 0.1052425837766692 times x[0], 0.0226225196363593 times x[1], 0.1733283965993159 times x[2], and y_3[0] summing to 0.0432589010425869; 0.0134537413244718 times x[0], -0.00900079302918625 times x[1], -0.2071251065640836 times x[2], and y_3[1] summing to -0.0100284400478248; and 0.6853622167005485 times x[0], -0.7295354399357989 times x[1], 0.2093882195931892 times x[2], and t_3[0] summing to 0.8991800948338391. The problem also includes four second-order cone constraints: the first requires the square of t_0[0] to be less than or equal to the sum of the squares of y_0[0] and y_0[1]; the second requires the square of t_1[0] to be less than or equal to the sum of the squares of y_1[0] and y_1[1]; the third requires the square of t_2[0] to be less than or equal to the sum of the squares of y_2[0] and y_2[1]; and the fourth requires the square of t_3[0] to be less than or equal to the sum of the squares of y_3[0] and y_3[1]. All variables are free to vary, and the goal is to determine the optimal values of x[0], x[1], x[2], and the auxiliary variables to minimize the objective function while satisfying all constraints.",
    "answer": 2.18,
    "ori": "13_optmath_bench",
    "index": 163,
    "description": "The optimization problem involves minimizing a linear objective function with coefficients 1.878721051112547 for variable x[0], -1.28487812168959 for x[1], and 0.4011175494566619 for x[2]. The problem is subject to five linear equality constraints: the first requires -0.1975342265737635 times x[0], -0.2719873754935637 times x[1], and -1.783486559633287 times x[2] to sum to 0.7278205554841768; the second requires -1.768263279220658 times x[0], 0.0736070884409486 times x[1], and -0.0509245482723127 times x[2] to sum to -2.868156724043526; the third requires 0.7748053077719607 times x[0], 3.021004813587345 times x[1], and 0.1666219482636987 times x[2] to sum to 2.766284453816483; the fourth requires 0.5458915584128072 times x[0], -1.22059114128179 times x[1], and 1.494593953041657 times x[2] to sum to -0.7394828371831723; and the fifth requires 2.433843249484103 times x[0], 0.841951398178463 times x[1], and 0.282600820817885 times x[2] to sum to 4.301152000602892. Additionally, there are twelve auxiliary constraints involving variables y_0[0], y_0[1], y_1[0], y_1[1], y_2[0], y_2[1], y_3[0], y_3[1], t_0[0], t_1[0], t_2[0], and t_3[0], which are all free to vary. These constraints include: 0.091171079971759 times x[0], 0.0086023 times x[1], 0.0626180219067843 times x[2], and y_0[0] summing to 0.0142231362041137; 8.9989367704573157e-04 times x[0], 0.0708190370286829 times x[1], -0.1447953767846306 times x[2], and y_0[1] summing to 0.0212301017034705; -0.8573356126193631 times x[0], 0.4752467573146003 times x[1], 0.4816251155416254 times x[2], and t_0[0] summing to 0.4620815487077579; 0.1204662490077911 times x[0], -0.010719970766377 times x[1], 0.0320226968522765 times x[2], and y_1[0] summing to 0.0954368100893973; -0.0364566909694576 times x[0], -0.0272692243126929 times x[1], -0.0454010664159346 times x[2], and y_1[1] summing to -0.1175842378552672; -0.1011799433173105 times x[0], -1.207915192355112 times x[1], 0.4912270735806125 times x[2], and t_1[0] summing to 0.6938004510085989; -0.00734887111481677 times x[0], -0.00717377976753872 times x[1], -1.672448115208352 times x[2], and y_2[0] summing to -0.1718293002638799; 0.4244121952583523 times x[0], -1.705679041306142 times x[1], 0.7925934720092012 times x[2], and y_2[1] summing to 1.440028055824932; -0.7883828402480292 times x[0], -0.5798703112590434 times x[1], 0.7119997733584963 times x[2], and t_2[0] summing to 0.4478948452160413; 0.1052425837766692 times x[0], 0.0226225196363593 times x[1], 0.1733283965993159 times x[2], and y_3[0] summing to 0.0432589010425869; 0.0134537413244718 times x[0], -0.00900079302918625 times x[1], -0.2071251065640836 times x[2], and y_3[1] summing to -0.0100284400478248; and 0.6853622167005485 times x[0], -0.7295354399357989 times x[1], 0.2093882195931892 times x[2], and t_3[0] summing to 0.8991800948338391. The problem also includes four second-order cone constraints: the first requires the square of t_0[0] to be less than or equal to the sum of the squares of y_0[0] and y_0[1]; the second requires the square of t_1[0] to be less than or equal to the sum of the squares of y_1[0] and y_1[1]; the third requires the square of t_2[0] to be less than or equal to the sum of the squares of y_2[0] and y_2[1]; and the fourth requires the square of t_3[0] to be less than or equal to the sum of the squares of y_3[0] and y_3[1]. All variables are free to vary, and the goal is to determine the optimal values of x[0], x[1], x[2], and the auxiliary variables to minimize the objective function while satisfying all constraints.",
    "ground_truth": 2.18
  },
  {
    "question": "Minimize the linear combination of decision variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) with coefficients -0.4846985478797502, -0.5148337459861181, -0.103222308633488, and -0.4982619511067216, respectively. The variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) must satisfy five linear equality constraints: a combination weighted by 0.6711266895702664, 0.3859509788606931, 0.4567515243481577, and 0.9480688150913272 must equal -0.722783786716152; a combination weighted by 0.8243709699260372, -1.258592224290495, 0.6114769465783959, and 0.1988705802173026 must equal 0.4645396774435609; a combination weighted by -1.502871694222167, 0.7239127905595304, -0.2373110244288602, and -0.1260210332851125 must equal 0.3023538191780689; a combination weighted by -0.1738503900411032, 1.795035445633136, 0.4912858705710282, and 1.011593878467344 must equal -0.4494297548628751; and a combination weighted by 0.4863065784013345, 1.917253921273967, 0.0113609495408681, and 1.178604249156841 must equal -1.701240670398688. The resource allocation variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.0827964599101699, 0.00176755725217533, -0.1846363653081483, and 0.0643720488743014, respectively. Similarly, the resource allocation variables \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.0789339456076434, 0.0889865820408794, 0.1048309970353658, and 0.0769986096204651, respectively. The variables \\( t_0[0] \\) and \\( t_1[0] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.6054001385216589 and 0.9698797396720825, respectively. The system must also satisfy two second-order cone constraints: the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) minus the square of \\( t_0[0] \\) must be less than or equal to zero, and the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) minus the square of \\( t_1[0] \\) must be less than or equal to zero. All decision variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( x[3] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), \\( y_0[3] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), \\( y_1[3] \\), \\( t_0[0] \\), and \\( t_1[0] \\) are free to take any real value.",
    "answer": 0.65,
    "ori": "13_optmath_bench",
    "index": 164,
    "description": "Minimize the linear combination of decision variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) with coefficients -0.4846985478797502, -0.5148337459861181, -0.103222308633488, and -0.4982619511067216, respectively. The variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) must satisfy five linear equality constraints: a combination weighted by 0.6711266895702664, 0.3859509788606931, 0.4567515243481577, and 0.9480688150913272 must equal -0.722783786716152; a combination weighted by 0.8243709699260372, -1.258592224290495, 0.6114769465783959, and 0.1988705802173026 must equal 0.4645396774435609; a combination weighted by -1.502871694222167, 0.7239127905595304, -0.2373110244288602, and -0.1260210332851125 must equal 0.3023538191780689; a combination weighted by -0.1738503900411032, 1.795035445633136, 0.4912858705710282, and 1.011593878467344 must equal -0.4494297548628751; and a combination weighted by 0.4863065784013345, 1.917253921273967, 0.0113609495408681, and 1.178604249156841 must equal -1.701240670398688. The resource allocation variables \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.0827964599101699, 0.00176755725217533, -0.1846363653081483, and 0.0643720488743014, respectively. Similarly, the resource allocation variables \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.0789339456076434, 0.0889865820408794, 0.1048309970353658, and 0.0769986096204651, respectively. The variables \\( t_0[0] \\) and \\( t_1[0] \\) must satisfy specific linear combinations with \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), and \\( x[3] \\) to meet exact values of 0.6054001385216589 and 0.9698797396720825, respectively. The system must also satisfy two second-order cone constraints: the sum of the squares of \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), and \\( y_0[3] \\) minus the square of \\( t_0[0] \\) must be less than or equal to zero, and the sum of the squares of \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), and \\( y_1[3] \\) minus the square of \\( t_1[0] \\) must be less than or equal to zero. All decision variables \\( x[0] \\), \\( x[1] \\), \\( x[2] \\), \\( x[3] \\), \\( y_0[0] \\), \\( y_0[1] \\), \\( y_0[2] \\), \\( y_0[3] \\), \\( y_1[0] \\), \\( y_1[1] \\), \\( y_1[2] \\), \\( y_1[3] \\), \\( t_0[0] \\), and \\( t_1[0] \\) are free to take any real value.",
    "ground_truth": 0.65
  },
  {
    "question": "The problem is to minimize the total cost, represented by the objective function: -0.1903710639101614 multiplied by x[0], plus 0.2471205466943747 multiplied by x[1], plus 2.348193401972641 multiplied by x[2], plus 0.9152449416117181 multiplied by x[3], minus 1.742613003351053 multiplied by x[4]. The problem is subject to five linear equality constraints. The first constraint requires that -0.2030886237352828 multiplied by x[0], minus 0.1763724551444181 multiplied by x[1], minus 0.5941927118633189 multiplied by x[2], plus 0.830361694227971 multiplied by x[3], minus 0.5802412833432681 multiplied by x[4] equals 1.780877672468478. The second constraint requires that -0.6639499053878003 multiplied by x[0], plus 1.188142824766808 multiplied by x[1], minus 1.177300154867763 multiplied by x[2], minus 0.3969063969716068 multiplied by x[3], plus 0.2889021746134166 multiplied by x[4] equals -0.3331997792148634. The third constraint requires that -0.8719514624527444 multiplied by x[0], plus 0.1808126068216141 multiplied by x[1], minus 0.9665774590076043 multiplied by x[2], plus 1.100084951306936 multiplied by x[3], minus 0.9042747703694114 multiplied by x[4] equals 2.800183976297944. The fourth constraint requires that -0.2015270532241274 multiplied by x[0], minus 1.293118253679058 multiplied by x[1], minus 0.4545577007105097 multiplied by x[2], minus 0.1304722040029908 multiplied by x[3], plus 0.6064299665361618 multiplied by x[4] equals 0.3418400860293037. The fifth constraint requires that -0.6152966616157548 multiplied by x[0], minus 2.528352204302152 multiplied by x[1], plus 1.007133413111276 multiplied by x[2], plus 0.4961854953912131 multiplied by x[3], minus 0.8422906933926506 multiplied by x[4] equals 2.844445804939649.\n\nAdditionally, the problem includes four constraints involving additional variables y_0[0], y_0[1], y_0[2], and t_0[0]. The first constraint, labeled R5, requires that 0.8380405126438697 multiplied by x[0], plus 1.725727253419972 multiplied by x[1], plus 0.2150240770195237 multiplied by x[2], plus 0.9187896715161638 multiplied by x[3], minus 0.336923104799861 multiplied by x[4], plus y_0[0] equals -0.457902185585681. The second constraint, labeled R6, requires that -1.68549282142258 multiplied by x[0], minus 0.2316401110005971 multiplied by x[1], plus 2.523836638490076 multiplied by x[2], minus 0.2575764188061656 multiplied by x[3], plus 0.3440917268091695 multiplied by x[4], plus y_0[1] equals 0.1406890072115732. The third constraint, labeled R7, requires that 1.252648113065757 multiplied by x[0], minus 0.6790006571802352 multiplied by x[1], plus 0.7626153811807369 multiplied by x[2], minus 0.2640373876912787 multiplied by x[3], minus 1.630978171354607 multiplied by x[4], plus y_0[2] equals 0.0216487444612001. The fourth constraint, labeled R8, requires that -0.2911339846463995 multiplied by x[0], minus 0.2752818731665084 multiplied by x[1], minus 0.284762721024827 multiplied by x[2], plus 0.842789585430482 multiplied by x[3], plus 1.448230318030449 multiplied by x[4], plus t_0[0] equals 0.9299709419894615.\n\nThe problem also includes a second-order cone constraint, labeled qc0, which requires that the square of t_0[0] is less than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2], expressed as -t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 ≤ 0. All decision variables, including x[0], x[1], x[2], x[3], x[4], y_0[0], y_0[1], y_0[2], and t_0[0], are free to take any real value. The task is to determine the optimal values for these variables to minimize the total cost while satisfying all constraints.",
    "answer": 1.65,
    "ori": "13_optmath_bench",
    "index": 165,
    "description": "The problem is to minimize the total cost, represented by the objective function: -0.1903710639101614 multiplied by x[0], plus 0.2471205466943747 multiplied by x[1], plus 2.348193401972641 multiplied by x[2], plus 0.9152449416117181 multiplied by x[3], minus 1.742613003351053 multiplied by x[4]. The problem is subject to five linear equality constraints. The first constraint requires that -0.2030886237352828 multiplied by x[0], minus 0.1763724551444181 multiplied by x[1], minus 0.5941927118633189 multiplied by x[2], plus 0.830361694227971 multiplied by x[3], minus 0.5802412833432681 multiplied by x[4] equals 1.780877672468478. The second constraint requires that -0.6639499053878003 multiplied by x[0], plus 1.188142824766808 multiplied by x[1], minus 1.177300154867763 multiplied by x[2], minus 0.3969063969716068 multiplied by x[3], plus 0.2889021746134166 multiplied by x[4] equals -0.3331997792148634. The third constraint requires that -0.8719514624527444 multiplied by x[0], plus 0.1808126068216141 multiplied by x[1], minus 0.9665774590076043 multiplied by x[2], plus 1.100084951306936 multiplied by x[3], minus 0.9042747703694114 multiplied by x[4] equals 2.800183976297944. The fourth constraint requires that -0.2015270532241274 multiplied by x[0], minus 1.293118253679058 multiplied by x[1], minus 0.4545577007105097 multiplied by x[2], minus 0.1304722040029908 multiplied by x[3], plus 0.6064299665361618 multiplied by x[4] equals 0.3418400860293037. The fifth constraint requires that -0.6152966616157548 multiplied by x[0], minus 2.528352204302152 multiplied by x[1], plus 1.007133413111276 multiplied by x[2], plus 0.4961854953912131 multiplied by x[3], minus 0.8422906933926506 multiplied by x[4] equals 2.844445804939649.\n\nAdditionally, the problem includes four constraints involving additional variables y_0[0], y_0[1], y_0[2], and t_0[0]. The first constraint, labeled R5, requires that 0.8380405126438697 multiplied by x[0], plus 1.725727253419972 multiplied by x[1], plus 0.2150240770195237 multiplied by x[2], plus 0.9187896715161638 multiplied by x[3], minus 0.336923104799861 multiplied by x[4], plus y_0[0] equals -0.457902185585681. The second constraint, labeled R6, requires that -1.68549282142258 multiplied by x[0], minus 0.2316401110005971 multiplied by x[1], plus 2.523836638490076 multiplied by x[2], minus 0.2575764188061656 multiplied by x[3], plus 0.3440917268091695 multiplied by x[4], plus y_0[1] equals 0.1406890072115732. The third constraint, labeled R7, requires that 1.252648113065757 multiplied by x[0], minus 0.6790006571802352 multiplied by x[1], plus 0.7626153811807369 multiplied by x[2], minus 0.2640373876912787 multiplied by x[3], minus 1.630978171354607 multiplied by x[4], plus y_0[2] equals 0.0216487444612001. The fourth constraint, labeled R8, requires that -0.2911339846463995 multiplied by x[0], minus 0.2752818731665084 multiplied by x[1], minus 0.284762721024827 multiplied by x[2], plus 0.842789585430482 multiplied by x[3], plus 1.448230318030449 multiplied by x[4], plus t_0[0] equals 0.9299709419894615.\n\nThe problem also includes a second-order cone constraint, labeled qc0, which requires that the square of t_0[0] is less than or equal to the sum of the squares of y_0[0], y_0[1], and y_0[2], expressed as -t_0[0]^2 + y_0[0]^2 + y_0[1]^2 + y_0[2]^2 ≤ 0. All decision variables, including x[0], x[1], x[2], x[3], x[4], y_0[0], y_0[1], y_0[2], and t_0[0], are free to take any real value. The task is to determine the optimal values for these variables to minimize the total cost while satisfying all constraints.",
    "ground_truth": 1.65
  },
  {
    "question": "Determine the optimal levels of five resources, labeled x[0] through x[4], along with auxiliary variables y_i[0], y_i[1], and t_i[0] for i = 0, 1, 2, 3, to minimize the total operational cost. The cost coefficients for the resources are as follows: x[0] has a coefficient of -0.1583313894422966, x[1] has a coefficient of 0.3001605310606917, x[2] has a coefficient of -0.1036603523790828, x[3] has a coefficient of -0.248725637286869, and x[4] has a coefficient of -0.6446466512774527. The optimization must satisfy 18 constraints, including 3 linear equality constraints, 11 additional constraints involving auxiliary variables, and 4 second-order cone constraints. The first linear equality constraint requires 1.340455763918918 units of x[0], 0.6122011761088476 units of x[1], 0.0241146255663964 units of x[2], 0.3597528706289873 units of x[3], and 1.140437589082963 units of x[4] to equal -2.525763513585038. The second linear equality constraint requires -0.3516433576310653 units of x[0], 0.0965558577316191 units of x[1], 0.3529378836507989 units of x[2], -0.0202375554076704 units of x[3], and -0.1677595357452861 units of x[4] to equal 0.2235505634382546. The third linear equality constraint requires 0.3075615720609267 units of x[0], 0.8085248764397751 units of x[1], 0.8880007171842481 units of x[2], 0.9386933269367855 units of x[3], and 1.224241726116549 units of x[4] to equal -3.117140788520132. The additional constraints involving auxiliary variables are as follows: 0.2455202814808017 units of x[0], 0.0472232513833277 units of x[1], 0.047517849850401 units of x[2], -0.00744390387231037 units of x[3], and 0.1666805170718211 units of x[4] plus y_0[0] must equal 0.1079335532146737; 0.13246246186774 units of x[0], 0.00659412390607974 units of x[1], 0.1114369110680747 units of x[2], -0.2665760991911567 units of x[3], and -0.18331535073365 units of x[4] plus y_0[1] must equal 0.1309744569827054; 1.420088014213417 units of x[0], 0.0293620814227688 units of x[1], -0.2441905598608127 units of x[2], -0.5623611776952713 units of x[3], and 1.040148376816393 units of x[4] plus t_0[0] must equal 0.1035292994181456; -0.10415918739318 units of x[0], 0.0857458 units of x[1], -0.110689170404098 units of x[2], -0.0521857879268957 units of x[3], and -0.1552718932805042 units of x[4] plus y_1[0] must equal -0.1542023398547745; 0.1066277951798869 units of x[0], -0.2407462132103433 units of x[1], 0.0250995224738677 units of x[2], 0.0697439542403621 units of x[3], and 0.0913997005017029 units of x[4] plus y_1[1] must equal -0.1125960948765685; -1.307066723082076 units of x[0], -0.1389121435606677 units of x[1], 0.3296112909294153 units of x[2], -0.3486230654088014 units of x[3], and 0.991038664821373 units of x[4] plus t_1[0] must equal 1.974360972589342; 0.0338157458141306 units of x[0], -0.0691173193642718 units of x[1], 0.06921235157118 units of x[2], 0.1912305441179409 units of x[3], and 0.0307745904197725 units of x[4] plus y_2[0] must equal 0.1826196734978178; -0.0850017860817879 units of x[0], 0.032183697895793 units of x[1], 0.0975233971012199 units of x[2], 0.1552972331129627 units of x[3], and 0.0274993364499619 units of x[4] plus y_2[1] must equal -0.00804524201171049; 1.435354965811914 units of x[0], 0.0916142411098695 units of x[1], 0.6979687102235776 units of x[2], -0.603509686532014 units of x[3], and 0.4772240882858254 units of x[4] plus t_2[0] must equal 1.174433212798432; -0.8060483631976895 units of x[0], 2.079831334431379 units of x[1], -0.0295281669371715 units of x[2], -1.61454817201267 units of x[3], and 0.5192117784670098 units of x[4] plus y_3[0] must equal 0.2657818441153715; -0.9441542385781047 units of x[0], 2.176756986944978 units of x[1], 0.6386189181592981 units of x[2], 1.295414594438755 units of x[3], and -0.6941305016601239 units of x[4] plus y_3[1] must equal -0.9771957594358285; 0.1874916310113519 units of x[0], -2.40692481111106 units of x[1], 1.487697722815744 units of x[2], 1.078504407492902 units of x[3], and 0.1412227274745621 units of x[4] plus t_3[0] must equal 0.0280865701316309. Additionally, four second-order cone constraints must be satisfied: the squared value of y_0[0] plus the squared value of y_0[1] must not exceed the squared value of t_0[0]; the squared value of y_1[0] plus the squared value of y_1[1] must not exceed the squared value of t_1[0]; the squared value of y_2[0] plus the squared value of y_2[1] must not exceed the squared value of t_2[0]; the squared value of y_3[0] plus the squared value of y_3[1] must not exceed the squared value of t_3[0]. All variables, including x[0] through x[4], y_i[0], y_i[1], and t_i[0], are free to take any real value.",
    "answer": 0.9,
    "ori": "13_optmath_bench",
    "index": 166,
    "description": "Determine the optimal levels of five resources, labeled x[0] through x[4], along with auxiliary variables y_i[0], y_i[1], and t_i[0] for i = 0, 1, 2, 3, to minimize the total operational cost. The cost coefficients for the resources are as follows: x[0] has a coefficient of -0.1583313894422966, x[1] has a coefficient of 0.3001605310606917, x[2] has a coefficient of -0.1036603523790828, x[3] has a coefficient of -0.248725637286869, and x[4] has a coefficient of -0.6446466512774527. The optimization must satisfy 18 constraints, including 3 linear equality constraints, 11 additional constraints involving auxiliary variables, and 4 second-order cone constraints. The first linear equality constraint requires 1.340455763918918 units of x[0], 0.6122011761088476 units of x[1], 0.0241146255663964 units of x[2], 0.3597528706289873 units of x[3], and 1.140437589082963 units of x[4] to equal -2.525763513585038. The second linear equality constraint requires -0.3516433576310653 units of x[0], 0.0965558577316191 units of x[1], 0.3529378836507989 units of x[2], -0.0202375554076704 units of x[3], and -0.1677595357452861 units of x[4] to equal 0.2235505634382546. The third linear equality constraint requires 0.3075615720609267 units of x[0], 0.8085248764397751 units of x[1], 0.8880007171842481 units of x[2], 0.9386933269367855 units of x[3], and 1.224241726116549 units of x[4] to equal -3.117140788520132. The additional constraints involving auxiliary variables are as follows: 0.2455202814808017 units of x[0], 0.0472232513833277 units of x[1], 0.047517849850401 units of x[2], -0.00744390387231037 units of x[3], and 0.1666805170718211 units of x[4] plus y_0[0] must equal 0.1079335532146737; 0.13246246186774 units of x[0], 0.00659412390607974 units of x[1], 0.1114369110680747 units of x[2], -0.2665760991911567 units of x[3], and -0.18331535073365 units of x[4] plus y_0[1] must equal 0.1309744569827054; 1.420088014213417 units of x[0], 0.0293620814227688 units of x[1], -0.2441905598608127 units of x[2], -0.5623611776952713 units of x[3], and 1.040148376816393 units of x[4] plus t_0[0] must equal 0.1035292994181456; -0.10415918739318 units of x[0], 0.0857458 units of x[1], -0.110689170404098 units of x[2], -0.0521857879268957 units of x[3], and -0.1552718932805042 units of x[4] plus y_1[0] must equal -0.1542023398547745; 0.1066277951798869 units of x[0], -0.2407462132103433 units of x[1], 0.0250995224738677 units of x[2], 0.0697439542403621 units of x[3], and 0.0913997005017029 units of x[4] plus y_1[1] must equal -0.1125960948765685; -1.307066723082076 units of x[0], -0.1389121435606677 units of x[1], 0.3296112909294153 units of x[2], -0.3486230654088014 units of x[3], and 0.991038664821373 units of x[4] plus t_1[0] must equal 1.974360972589342; 0.0338157458141306 units of x[0], -0.0691173193642718 units of x[1], 0.06921235157118 units of x[2], 0.1912305441179409 units of x[3], and 0.0307745904197725 units of x[4] plus y_2[0] must equal 0.1826196734978178; -0.0850017860817879 units of x[0], 0.032183697895793 units of x[1], 0.0975233971012199 units of x[2], 0.1552972331129627 units of x[3], and 0.0274993364499619 units of x[4] plus y_2[1] must equal -0.00804524201171049; 1.435354965811914 units of x[0], 0.0916142411098695 units of x[1], 0.6979687102235776 units of x[2], -0.603509686532014 units of x[3], and 0.4772240882858254 units of x[4] plus t_2[0] must equal 1.174433212798432; -0.8060483631976895 units of x[0], 2.079831334431379 units of x[1], -0.0295281669371715 units of x[2], -1.61454817201267 units of x[3], and 0.5192117784670098 units of x[4] plus y_3[0] must equal 0.2657818441153715; -0.9441542385781047 units of x[0], 2.176756986944978 units of x[1], 0.6386189181592981 units of x[2], 1.295414594438755 units of x[3], and -0.6941305016601239 units of x[4] plus y_3[1] must equal -0.9771957594358285; 0.1874916310113519 units of x[0], -2.40692481111106 units of x[1], 1.487697722815744 units of x[2], 1.078504407492902 units of x[3], and 0.1412227274745621 units of x[4] plus t_3[0] must equal 0.0280865701316309. Additionally, four second-order cone constraints must be satisfied: the squared value of y_0[0] plus the squared value of y_0[1] must not exceed the squared value of t_0[0]; the squared value of y_1[0] plus the squared value of y_1[1] must not exceed the squared value of t_1[0]; the squared value of y_2[0] plus the squared value of y_2[1] must not exceed the squared value of t_2[0]; the squared value of y_3[0] plus the squared value of y_3[1] must not exceed the squared value of t_3[0]. All variables, including x[0] through x[4], y_i[0], y_i[1], and t_i[0], are free to take any real value.",
    "ground_truth": 0.9
  }
]